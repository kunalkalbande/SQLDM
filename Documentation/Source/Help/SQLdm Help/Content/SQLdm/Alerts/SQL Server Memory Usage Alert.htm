<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us" MadCap:lastBlockDepth="8" MadCap:lastHeight="826" MadCap:lastWidth="807">
    <head><title>SQL Server Memory Usage (Percent) alert in Idera SQLdm</title>
        <link href="Resources/Stylesheets/Idera Stylesheet.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 class="Heading1">SQL Server Memory Usage (Percent) alert </h1>
        <p class="Body">The SQL&#160;Server Memory Usage (Percent) alert provides the total server memory (Total Server Memory per <code>sysperfinfo</code>) as a percent of total physical memory from WMI.
</p>
        <h2 class="Heading2">Reduce the percentage of memory used by SQL&#160;Server</h2>
        <p class="Body">If this value is regularly over  80%, SQL Server needs more memory or needs to use the memory it has more efficiently. Consider implementing one or more of the following solutions:</p>
        <ul style="list-style-type: circle;">
            <li class="Bullet"> 
If your site makes use of extended stored procedures that are infrequently called, then after calling them, issue a <code>DBCC DLLNAME (FREE)</code>. Once an extended stored procedure is called, it remains in memory until SQL Server is shut down even if it is never again called, which then wastes available memory. A <code>DBCC dllname (FREE)</code> releases that memory for use by both the procedure cache and Data Pages, which has a significant positive effect on both the Procedure Cache Hit Ratio and the Buffer Cache Hit Ratio. Execute <span style="font-variant: small-caps;">sp_helpextendedproc</span>  to view the extended stored procedures currently loaded in memory by SQL Server.</li>
            <li class="Bullet">As each SQL Server lock requires 96 bytes of memory, the granting of lock space is done at the expense of Data Pages and Procedure Cache Pages. To maintain proper system performance and throughput, keep the number of locks to a minimum by:
<ul><li class="Bullet">Wherever possible, using the <code>(NOLOCK)</code> optimizer hint or <code>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</code> on select statements as this neither issues any shared locks on the data it reads nor honors any exclusive locks set by other transactions.
</li><li class="Bullet">When updating all rows in a table with more than 50 rows, using the <code>TABLOCKX</code> table hint. This table hint prevents SQL Server from initially taking exclusive row locks, granting many of these locks, and then escalating them to an exclusive table lock.
</li><li class="Bullet">When deleting all rows in any table, using the TRUNCATE TABLE statement instead of the DELETE statement as fewer locks and other system resources are consumed in the process.
</li><li class="Bullet">Reducing the time that a lock is held by: 
<ul style="list-style-type: circle;"><li class="Bullet-Def-Body">Performing as much work as possible before the transaction performs its first update, delete, or insert.
For example, add any necessary SELECT statements.</li><li class="Bullet-Def-Body">Grouping all UPDATES, DELETES, and INSERTS as closely as possible within a transaction with as few SELECTS as possible separating them.</li><li class="Bullet-Def-Body">Committing the transaction as soon as possible after the final DML statement.</li><li class="Bullet-Def-Body">Avoiding any stops for user input once the transaction begins. Be sure to gather all user inputs before the transaction starts.</li><li class="Bullet-Def-Body">Allowing SQL&#160;Server to consume more of the available memory, making sure that OS Paging does not increase.</li></ul></li></ul></li>
            <li class="Bullet">Add more physical memory (RAM) to the computer. 
</li>
            <li class="Bullet">If the computer is running multiple instances of SQL Server, then consider placing each  instance on a separate physical computer.
</li>
            <li class="Bullet">If the computer is running other memory-intensive applications, such as IIS or Exchange, then consider moving each instance to a separate physical computer.
</li>
            <li class="BulletLast">Limit SQL Server computers to performing only SQL Server work. Stop any unnecessary programs, such as allowing the computer to act as either a primary or backup domain controller.</li>
        </ul>
    </body>
</html>