<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:igRibbon="http://infragistics.com/Ribbon"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:p="clr-namespace:Idera.SQLdm.DesktopClient.Controls.Presentation"
    mc:Ignorable="d">

    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="#006089"/>
    </Style>

    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolDisabledBorderDarkFillKey}}"/>
    </Style>

    <Style TargetType="p:ToolBarButton">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverBorderDarkFillKey}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverCenterFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverBorderDarkFillKey}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverCenterFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedBorderDarkFillKey}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedCenterFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type p:ToolBarToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverBorderDarkFillKey}}"/>
                            <Setter Property="Background"  Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedCenterFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverBorderDarkFillKey}}"/>
                            <Setter Property="Background"  Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverCenterFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverBorderDarkFillKey}}"/>
                            <Setter Property="Background"  Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonHoverCenterFillKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedBorderDarkFillKey}}"/>
                            <Setter Property="Background"  Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedCenterFillKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="true"/>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedBorderDarkFillKey}}"/>
                            <Setter Property="Background"  Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedCenterFillKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedBorderDarkFillKey}}"/>
                            <Setter Property="Background"  Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ButtonPressedCenterFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
