//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idera.SQLdm.PrescriptiveAnalyzer.Common.Properties
{
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Idera.SQLdm.PrescriptiveAnalyzer.Common.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cached plan may not be the most efficient for all parameters.
        /// </summary>
        internal static string CachedPlanMisuseFinding_Text {
            get {
                return ResourceManager.GetString("CachedPlanMisuseFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The procecure was executed $(ExecutionCount) times during the analyzed workload. The smallest execution duration was $(MinimumDuration)ms resulting in $(MinimumReads) reads and $(MinimumCPU) CPU time while the longest execution duration was $(MaximumDuration)ms resulting in $(MaximumReads) reads and $(MaximumCPU) CPU time. The significant difference between execution times and consumed resources likely indicates that an unexpected set of parameters was used resulting in an inefficient cached plan being sele [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CachedPlanMisuseImpact_Text {
            get {
                return ResourceManager.GetString("CachedPlanMisuseImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may need to update statistics so that a more suitable plan will be created or you may need to use the WITH RECOMPILE option on your stored procedure..
        /// </summary>
        internal static string CachedPlanMisuseRecommendation_Text {
            get {
                return ResourceManager.GetString("CachedPlanMisuseRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///
        ///select top 100 
        ///	[Database]=db_name(database_id), 
        ///	[IO]=sum(num_of_bytes_read + num_of_bytes_written) 
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DatabaseRankingStats {
            get {
                return ResourceManager.GetString("DatabaseRankingStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cursor {CursorName} is not being properly closed and deallocated. .
        /// </summary>
        internal static string DeallocateCursorFinding_Text {
            get {
                return ResourceManager.GetString("DeallocateCursorFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cursor {CursorName} is not being properly closed and deallocated. Undisposed cursors may consume memory resources and may hold locks that affect data availability. It is recommended that the cursor be explicitly closed and deallocated after usage.
        ///
        ///$(Sql).
        /// </summary>
        internal static string DeallocateCursorImpact_Text {
            get {
                return ResourceManager.GetString("DeallocateCursorImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quit being lazy, close and deallocate your cursors..
        /// </summary>
        internal static string DeallocateCursorRecommendation_Text {
            get {
                return ResourceManager.GetString("DeallocateCursorRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled index.
        /// </summary>
        internal static string DisabledIndexFinding_Text {
            get {
                return ResourceManager.GetString("DisabledIndexFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on table $(Table) in database $(Database) is disabled.  .
        /// </summary>
        internal static string DisabledIndexImpact_Text {
            get {
                return ResourceManager.GetString("DisabledIndexImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We recommend you evaluate if this index is still necessary.  If not, drop it..
        /// </summary>
        internal static string DisabledIndexRecommendation_Text {
            get {
                return ResourceManager.GetString("DisabledIndexRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate index.
        /// </summary>
        internal static string DuplicateIndexFinding_Text {
            get {
                return ResourceManager.GetString("DuplicateIndexFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on table $(Schema).$(Table) in database $(Database) is a duplicate of index $(DupName)..
        /// </summary>
        internal static string DuplicateIndexImpact_Text {
            get {
                return ResourceManager.GetString("DuplicateIndexImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop one.
        /// </summary>
        internal static string DuplicateIndexRecommendation_Text {
            get {
                return ResourceManager.GetString("DuplicateIndexRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cursor optimization..
        /// </summary>
        internal static string FastForwardCursorFinding_Text {
            get {
                return ResourceManager.GetString("FastForwardCursorFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cursor {CursorName} seems to be used for read and forward scroll operations only. The cursor is declared without &quot;Fast Forward&quot; optimization option which may enhance its performance. It is recommended that the cursor declaration be rewritten using the &quot;Fast Forward&quot; cursor option.
        ///
        ///$(Sql).
        /// </summary>
        internal static string FastForwardCursorImpact_Text {
            get {
                return ResourceManager.GetString("FastForwardCursorImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since you are using a read-only forward cursor you should use the Fast  Forward option..
        /// </summary>
        internal static string FastForwardCursorRecommendation_Text {
            get {
                return ResourceManager.GetString("FastForwardCursorRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fragmented index.
        /// </summary>
        internal static string FragmentedIndexFinding_Text {
            get {
                return ResourceManager.GetString("FragmentedIndexFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on table $(Sqhema).$(Table) in database ($Database) is fragmented ($(AvgFragmentation)%)..
        /// </summary>
        internal static string FragmentedIndexImpact_Text {
            get {
                return ResourceManager.GetString("FragmentedIndexImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We recommend you buy Idera SQL defrag and defragment the index..
        /// </summary>
        internal static string FragmentedIndexRecommendation_Text {
            get {
                return ResourceManager.GetString("FragmentedIndexRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function or expression used in where clause.
        /// </summary>
        internal static string FunctionInWhereClauseFinding_Text {
            get {
                return ResourceManager.GetString("FunctionInWhereClauseFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rewrite query so that the function or expressions is on the right side of the equals in the identified query
        ///
        ///$(Sql)
        ///.
        /// </summary>
        internal static string FunctionInWhereClauseImpact_Text {
            get {
                return ResourceManager.GetString("FunctionInWhereClauseImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change your query so it works better..
        /// </summary>
        internal static string FunctionInWhereClauseRecommendation_Text {
            get {
                return ResourceManager.GetString("FunctionInWhereClauseRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///
        ///
        ///select 
        ///	[ObjectName]=object_name({0}),
        ///	[IsTable]=objectproperty({0}, &apos;IsTable&apos;),
        ///	[IsMSShipped]=obje [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetIndexInfo {
            get {
                return ResourceManager.GetString("GetIndexInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///
        ///use {0};
        ///
        ///select 
        ///	[ObjectName]=o.name, 
        ///	[SchemaName]=s.name 
        ///	from sys.objects o 
        ///	inner join sys.s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetObjectSchemaName {
            get {
                return ResourceManager.GetString("GetObjectSchemaName", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///
        ///declare @db sysname;
        ///set @db = DB_NAME({0})
        ///dbcc page (@db , {1}, {2}, 0) with tableresults,no_infomsgs
        ///.
        /// </summary>
        internal static string GetPageInfo {
            get {
                return ResourceManager.GetString("GetPageInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	ds.name
        ///	, ds.type
        ///FROM sys.data_spaces ds
        ///WHERE (ds.data_space_id = {1}).
        /// </summary>
        internal static string GetPropertiesFromSysDataSpaces {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysDataSpaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	ic.is_descending_key
        ///	,ic.is_included_column
        ///	,ic.partition_ordinal
        ///	,ic.key_ordinal
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysIndexColumns {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysIndexColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	i.is_unique
        ///	,i.type
        ///	,i.index_id
        ///	,i.is_padded
        ///	,i.fill_factor
        ///	,i.ignore_dup_key
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysIndexes2005 {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysIndexes2005", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	i.is_unique
        ///	,i.type
        ///	,i.index_id
        ///	,i.has_filter
        ///	,i.filter_definition
        ///	,i.is_padded [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysIndexes2008 {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysIndexes2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT 
        ///	OBJECT_ID({1})
        ///	, OBJECTPROPERTY(OBJECT_ID({1}), &apos;IsUserTable&apos;).
        /// </summary>
        internal static string GetPropertiesFromSysObjects {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysObjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	p.partition_number
        ///FROM sys.partitions p
        ///WHERE ((p.object_id = {1}) AND (p.index_id = { [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysPartitions2005 {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysPartitions2005", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	p.partition_number
        ///	, p.data_compression_desc
        ///FROM sys.partitions p
        ///WHERE ((p.object_i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysPartitions2008 {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysPartitions2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	sit.tessellation_scheme
        ///	,sit.bounding_box_xmin
        ///	,sit.bounding_box_ymin
        ///	,sit.bounding [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysSpatialIndexTessellations {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysSpatialIndexTessellations", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	s.no_recompute
        ///FROM sys.stats s
        ///WHERE ((s.object_id = {1}) AND (s.stats_id = {2})).
        /// </summary>
        internal static string GetPropertiesFromSysStats {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	ds.name
        ///FROM sys.tables t
        ///	INNER JOIN sys.data_spaces ds
        ///		ON (t.filestream_data_space [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysTables2008 {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysTables2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT
        ///	x.using_xml_index_id
        ///	, x.secondary_type
        ///FROM sys.xml_indexes x
        ///WHERE ((x.object_id =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPropertiesFromSysXMLIndexes {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysXMLIndexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///USE {0}
        ///
        ///SELECT 
        ///	name 
        ///FROM sys.xml_indexes 
        ///WHERE index_id = {1}.
        /// </summary>
        internal static string GetPropertiesFromSysXMLIndexesPrimary {
            get {
                return ResourceManager.GetString("GetPropertiesFromSysXMLIndexesPrimary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- required parameters - these must be added to the command parameters prior to calling this script
        ///-- @TableName sysname
        ///-- @SchemaName sysname
        ///
        ///declare @tempdep table(objid int not null, objtype smallint not null)
        ///
        ///INSERT INTO @tempdep 
        ///SELECT
        ///tbl.object_id AS [ID],
        ///3
        ///FROM
        ///sys.tables AS tbl
        ///WHERE
        ///(tbl.name=@TableName and SCHEMA_NAME(tbl.schema_id)=@SchemaName)
        ///
        ///declare @must_set_nocount_off bit
        ///set @must_set_nocount_off = 0
        ///
        ///IF @@OPTIONS &amp; 512 = 0 
        ///   set @must_set_nocount_off = 1
        ///set  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetTableDependentObjects {
            get {
                return ResourceManager.GetString("GetTableDependentObjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overusing hints.
        /// </summary>
        internal static string HintAbuseFinding_Text {
            get {
                return ResourceManager.GetString("HintAbuseFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hints are usually placed either to affect the execution plan or enforce a locking method. Often, hints that helped a query&apos;s performance in the past are left in the query without re examination of its affect after data has changed, software or hardware upgrades etc. It is recommended that all queries that use hints be re evaluated periodically for performance with and without the hint and that the hint be removed if it proves not to be beneficial for the query&apos;s performance in the current environment.
        ///
        ///$( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HintAbuseImpact_Text {
            get {
                return ResourceManager.GetString("HintAbuseImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quit trying to out think SQL Server and let it do it&apos;s job.  .
        /// </summary>
        internal static string HintAbuseRecommendation_Text {
            get {
                return ResourceManager.GetString("HintAbuseRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hypothetical index found.
        /// </summary>
        internal static string HypotheticalIndexFinding_Text {
            get {
                return ResourceManager.GetString("HypotheticalIndexFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A hypothetical index $(Name) on table $(Schema).$(Table) in database $(Database) was found.  .
        /// </summary>
        internal static string HypotheticalIndexImpact_Text {
            get {
                return ResourceManager.GetString("HypotheticalIndexImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider dropping hypothetical indexes..
        /// </summary>
        internal static string HypotheticalIndexRecommendation_Text {
            get {
                return ResourceManager.GetString("HypotheticalIndexRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Page latch contention.
        /// </summary>
        internal static string IndexPageLatchContentionFinding_Text {
            get {
                return ResourceManager.GetString("IndexPageLatchContentionFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on Table $(Schema).$(Table) in $(Database) is in the top 10 highest indexes with page latch waits.  Sessions have waited a total of $(WaitCount) times for a total of $(WaitMs)ms with an average wait time of $(AvgWaitMs)ms.  .
        /// </summary>
        internal static string IndexPageLatchContentionImpact_Text {
            get {
                return ResourceManager.GetString("IndexPageLatchContentionImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You should rearchitect your entire database so this doesn&apos;t happen..
        /// </summary>
        internal static string IndexPageLatchContentionRecommendation_Text {
            get {
                return ResourceManager.GetString("IndexPageLatchContentionRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Page lock contention.
        /// </summary>
        internal static string IndexPageLockContentionFinding_Text {
            get {
                return ResourceManager.GetString("IndexPageLockContentionFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on Table $(Schema).$(Table) in $(Database) is in the top 10 highest indexes with pagelock waits.  Sessions have waited a total of $(WaitCount) times for a total of $(WaitMs)ms with an average wait time of $(AvgWaitMs)ms. .
        /// </summary>
        internal static string IndexPageLockContentionImpact_Text {
            get {
                return ResourceManager.GetString("IndexPageLockContentionImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You should rearchitect your entire database so this doesn&apos;t happen..
        /// </summary>
        internal static string IndexPageLockContentionRecommendation_Text {
            get {
                return ResourceManager.GetString("IndexPageLockContentionRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Row lock contention.
        /// </summary>
        internal static string IndexRowLockContentionFinding_Text {
            get {
                return ResourceManager.GetString("IndexRowLockContentionFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on Table $(Schema).$(Table) in $(Database) is in the top 10 highest indexes with rowlock waits.  Sessions have waited a total of $(WaitCount) times for a total of $(WaitMs)ms with an average wait time of $(AvgWaitMs)ms..
        /// </summary>
        internal static string IndexRowLockContentionImpact_Text {
            get {
                return ResourceManager.GetString("IndexRowLockContentionImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You should rearchitect your entire database so this doesn&apos;t happen..
        /// </summary>
        internal static string IndexRowLockContentionRecommendation_Text {
            get {
                return ResourceManager.GetString("IndexRowLockContentionRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index underutilized.
        /// </summary>
        internal static string IndexUnderutilizedFinding_Text {
            get {
                return ResourceManager.GetString("IndexUnderutilizedFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on table $(Schema).$(Table) in database $(Database) does not appear to get  used much..
        /// </summary>
        internal static string IndexUnderutilizedImpact_Text {
            get {
                return ResourceManager.GetString("IndexUnderutilizedImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop it.
        /// </summary>
        internal static string IndexUnderutilizedRecommendation_Text {
            get {
                return ResourceManager.GetString("IndexUnderutilizedRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index not used.
        /// </summary>
        internal static string IndexUnusedFinding_Text {
            get {
                return ResourceManager.GetString("IndexUnusedFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on table $(Schema).$(Table) in database $(Database) does not appear to have been used in long time..
        /// </summary>
        internal static string IndexUnusedImpact_Text {
            get {
                return ResourceManager.GetString("IndexUnusedImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop it.
        /// </summary>
        internal static string IndexUnusedRecommendation_Text {
            get {
                return ResourceManager.GetString("IndexUnusedRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--	exec sp_configure &apos;xp_cmdshell&apos;;
        ///--	^^^^^Can be used to determine if cmd shell is enabled
        ///--
        ///--
        ///--  exec sp_configure &apos;show advanced options&apos;, 1;
        ///--  GO
        ///--  RECONFIGURE;
        ///--  GO
        ///--	^^^^^Can be used show advanced options from sp_configure
        ///--
        ///--
        ///--  exec sp_configure &apos;xp_cmdshell&apos;, 1;
        ///--  GO
        ///--  RECONFIGURE;
        ///--  GO
        ///--	^^^^^Can be used to turn on cmd shell
        ///--
        ///---------------------------------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IsCmdShellEnabled {
            get {
                return ResourceManager.GetString("IsCmdShellEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @id bigint, @indexid bigint, @type int, @version int, @online bit
        ///
        ///select @online = 0
        ///select @id = object_id(@ObjectName)
        ///select @type = type, @indexid = index_id from sys.indexes where object_id = @id and name = @IndexName
        ///select @version = cast(substring(cast(serverproperty(&apos;productversion&apos;) as nvarchar), 1, charindex(&apos;.&apos;, cast(serverproperty(&apos;productversion&apos;) as nvarchar)) -1) as int)
        ///
        ///if @indexid is not null
        ///begin
        ///	-- Check for Enterprise Edition
        ///	if lower(cast(serverproperty(&apos;edition&apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IsIndexRebuildableOnline {
            get {
                return ResourceManager.GetString("IsIndexRebuildableOnline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--	exec sp_configure &apos;Ole Automation Procedures&apos;;
        ///--	^^^^^Can be used to determine if ole automation is enabled
        ///--
        ///--
        ///--  exec sp_configure &apos;show advanced options&apos;, 1;
        ///--  GO
        ///--  RECONFIGURE;
        ///--  GO
        ///--	^^^^^Can be used show advanced options from sp_configure
        ///--
        ///--
        ///--  exec sp_configure &apos;Ole Automation Procedures&apos;, 1;
        ///--  GO
        ///--  RECONFIGURE;
        ///--  GO
        ///--	^^^^^Can be used to turn on ole automation
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IsOleEnabled {
            get {
                return ResourceManager.GetString("IsOleEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use {0};
        ///declare @objid int;
        ///set @objid = {1};
        ///
        ///if (objectproperty(@objid, &apos;ismsshipped&apos;) = 1) 
        ///begin 
        ///	select 1; 
        ///	return; 
        ///end;
        ///
        ///if (objectproperty(@objid, &apos;isreplproc&apos;) = 1) 
        ///begin 
        ///	select 1; 
        ///	return; 
        ///end;
        ///
        ///select 0
        ///
        ///
        ///.
        /// </summary>
        internal static string IsSystemObject {
            get {
                return ResourceManager.GetString("IsSystemObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use {0};
        ///declare @objid int;
        ///set @objid = object_id({1});
        ///
        ///if (objectproperty(@objid, &apos;IsMSShipped&apos;) = 1) 
        ///begin 
        ///	select 1; 
        ///	return; 
        ///end;
        ///
        ///if (objectproperty(@objid, &apos;IsSystemTable&apos;) = 1) 
        ///begin 
        ///	select 1; 
        ///	return; 
        ///end;
        ///
        ///select 0
        ///
        ///
        ///.
        /// </summary>
        internal static string IsSystemTable {
            get {
                return ResourceManager.GetString("IsSystemTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LEFT function used in where clause.
        /// </summary>
        internal static string LeftExpressionInWhereClauseFinding_Text {
            get {
                return ResourceManager.GetString("LeftExpressionInWhereClauseFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A predicate containing the LEFT function is used for a prefix search of a string expression. The use of LEFT may prohibit the optimizer from generating execution plans that use index seeks and from correctly evaluating string statistics. It is recommended that the query be rewritten and that the LEFT function be replaced with the functionally equivalent syntax of LIKE and the % wild card. Using the LIKE operator may enable the optimizer to use indexes and string statistics more efficiently and generate more [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LeftExpressionInWhereClauseImpact_Text {
            get {
                return ResourceManager.GetString("LeftExpressionInWhereClauseImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Learn how to use LIKE.
        /// </summary>
        internal static string LeftExpressionInWhereClauseRecommendation_Text {
            get {
                return ResourceManager.GetString("LeftExpressionInWhereClauseRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LIKE not needed.
        /// </summary>
        internal static string LikeUseNotNeededFinding_Text {
            get {
                return ResourceManager.GetString("LikeUseNotNeededFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use a direct comparison operator instead of using the LIKE predicate.
        ///
        ///$(Sql).
        /// </summary>
        internal static string LikeUseNotNeededImpact_Text {
            get {
                return ResourceManager.GetString("LikeUseNotNeededImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using LIKE if you can accomplish the same thing using boolean operators..
        /// </summary>
        internal static string LikeUseNotNeededRecommendation_Text {
            get {
                return ResourceManager.GetString("LikeUseNotNeededRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to updat the recommendation text.
        ///
        ///$(Sql).
        /// </summary>
        internal static string MemLimitExceededFinding_Text {
            get {
                return ResourceManager.GetString("MemLimitExceededFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to updat the recommendation text.
        ///
        ///$(Sql).
        /// </summary>
        internal static string MemLimitExceededImpact_Text {
            get {
                return ResourceManager.GetString("MemLimitExceededImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to updat the recommendation text.
        ///
        ///$(Sql).
        /// </summary>
        internal static string MemLimitExceededRecommendation_Text {
            get {
                return ResourceManager.GetString("MemLimitExceededRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text..
        /// </summary>
        internal static string MissingIndexFinding_Text {
            get {
                return ResourceManager.GetString("MissingIndexFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text..
        /// </summary>
        internal static string MissingIndexImpact_Text {
            get {
                return ResourceManager.GetString("MissingIndexImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text..
        /// </summary>
        internal static string MissingIndexRecommendation_Text {
            get {
                return ResourceManager.GetString("MissingIndexRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No columns specified on insert operation.
        /// </summary>
        internal static string NakedInsertFinding_Text {
            get {
                return ResourceManager.GetString("NakedInsertFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You should specify a column list on your insert statements.
        ///
        ///$(Sql).
        /// </summary>
        internal static string NakedInsertImpact_Text {
            get {
                return ResourceManager.GetString("NakedInsertImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lazy....
        /// </summary>
        internal static string NakedInsertRecommendation_Text {
            get {
                return ResourceManager.GetString("NakedInsertRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server has lost network bandwidth..
        /// </summary>
        internal static string NetBandwidthLostFinding_Text {
            get {
                return ResourceManager.GetString("NetBandwidthLostFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sql Doctor has detected that this server has lost network bandwidth. When previously measured its total active bandwidth was xxx megabits/sec and it is now xxx megabits/sec (a xx% reduction). Either a network card has been changed to one of lesser capability or BIOS or power settings or hardware/cable/fiber errors are preventing and card from operating at full potential. Alternatively a failover may have occurred on a cluster to a server with a less capable card..
        /// </summary>
        internal static string NetBandwidthLostImpact_Text {
            get {
                return ResourceManager.GetString("NetBandwidthLostImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that the network be analyzed to determine the issue..
        /// </summary>
        internal static string NetBandwidthLostRecommendation_Text {
            get {
                return ResourceManager.GetString("NetBandwidthLostRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A network card is having serious unexpected errors..
        /// </summary>
        internal static string NetCardErrorsFinding_Text {
            get {
                return ResourceManager.GetString("NetCardErrorsFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network card **** is giving serious unexpected errors. These errors are being written to the system event log which should be closely scrutinized as the log entries will give further details. See http://technet.microsoft.com/en-us/library/cc783876(WS.10).aspx.
        /// </summary>
        internal static string NetCardErrorsImpact_Text {
            get {
                return ResourceManager.GetString("NetCardErrorsImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that the errors written to the system event log should be closely scrutinized as the log entries will give further details..
        /// </summary>
        internal static string NetCardErrorsRecommendation_Text {
            get {
                return ResourceManager.GetString("NetCardErrorsRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more network cards have stopped working..
        /// </summary>
        internal static string NetCardLostFinding_Text {
            get {
                return ResourceManager.GetString("NetCardLostFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sql Doctor has detected that one or more network cards seem to have stopped working. Previously SQL Doctor had found xx network cards with a total bandwidth of xxx megabits/sec. Now only xx card(s) with a total bandwidth of xxx megabits/sec have been found (a xx% reduction in capacity). Either a network card has stopped working or been unplugged either on the card or network switch or the network cable/fiber is faulty or another server is being used or a failover has occurred on a cluster to a server with l [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NetCardLostImpact_Text {
            get {
                return ResourceManager.GetString("NetCardLostImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that the the Network cards be examined to determined which are having problems..
        /// </summary>
        internal static string NetCardLostRecommendation_Text {
            get {
                return ResourceManager.GetString("NetCardLostRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SQL Server is generating only xx% of the network load on your production server while xx% is being generated by non-SQL Server processes..
        /// </summary>
        internal static string NetCongestionFinding_Text {
            get {
                return ResourceManager.GetString("NetCongestionFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sql Doctor has detected that this instance of SQL Server is generating only xx% of the network load with the other xx% being generated by non-SQL Server processes. See http://www.sql-server-performance.com/articles/audit/operating_system_performance_p1.aspx Processes such as those shown below generate significant network traffic and should be stopped on any production server:Print spooler, IIS, DHCP server, Alerter, Clipbook, Computer browser, Messenger, network DDE, task scheduler, Exchange, Skype, Citrix, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NetCongestionImpact_Text {
            get {
                return ResourceManager.GetString("NetCongestionImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that non-essential applications be stopped on production servers..
        /// </summary>
        internal static string NetCongestionRecommendation_Text {
            get {
                return ResourceManager.GetString("NetCongestionRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default network connection option on SQL Server is not using Nocount On and a sample of the text of the T-SQL being executed by SQL Server shows that in most cases the SET NOCOUNT ON statement is not being included..
        /// </summary>
        internal static string NetNoCountFinding_Text {
            get {
                return ResourceManager.GetString("NetNoCountFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is causing excessive network use as packets containing the number of rows affected being constantly transmitted back to the clients with each and every T-SQL Statement being executed..
        /// </summary>
        internal static string NetNoCountImpact_Text {
            get {
                return ResourceManager.GetString("NetNoCountImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that Nocount On be set as the default network setting on your SQL Server.
        /// </summary>
        internal static string NetNoCountRecommendation_Text {
            get {
                return ResourceManager.GetString("NetNoCountRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network is having serious unexpected errors..
        /// </summary>
        internal static string NetRedirectorErrorsFinding_Text {
            get {
                return ResourceManager.GetString("NetRedirectorErrorsFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network is giving serious unexpected errors. These errors are being written to the system event log which should be closely scrutinized as the log entries will give further details. See http://technet.microsoft.com/en-us/library/cc783876(WS.10).aspx.
        /// </summary>
        internal static string NetRedirectorErrorsImpact_Text {
            get {
                return ResourceManager.GetString("NetRedirectorErrorsImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that the errors written to the system event log should be closely scrutinized as the log entries will give further details..
        /// </summary>
        internal static string NetRedirectorErrorsRecommendation_Text {
            get {
                return ResourceManager.GetString("NetRedirectorErrorsRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server does not have 2 active teamed or un-teamed network cards.
        /// </summary>
        internal static string NetRedundantCardsFinding_Text {
            get {
                return ResourceManager.GetString("NetRedundantCardsFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Having 2 redundant network cards is a best practice suggestion.
        /// </summary>
        internal static string NetRedundantCardsImpact_Text {
            get {
                return ResourceManager.GetString("NetRedundantCardsImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that your network cards be teamed..
        /// </summary>
        internal static string NetRedundantCardsRecommendation_Text {
            get {
                return ResourceManager.GetString("NetRedundantCardsRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of TCP segments being retransmitted is xx%..
        /// </summary>
        internal static string NetRetranSegsFinding_Text {
            get {
                return ResourceManager.GetString("NetRetranSegsFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of TCP segments being retransmitted is xx%. TCP segments are typically retransmitted either due to the fact that their receipt is not being timeously acknowledged or that the segments are being acknowledged out of order. See http://msdn.microsoft.com/en-us/library/ms819737.aspx and http://support.microsoft.com/kb/224829A high level of retransmissions will significantly slow up SQL Server and indicates one of the following problems:1. Either the network card(s) in the server or the network switch/ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NetRetranSegsImpact_Text {
            get {
                return ResourceManager.GetString("NetRetranSegsImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that the network be analyzed to determine the issue..
        /// </summary>
        internal static string NetRetranSegsRecommendation_Text {
            get {
                return ResourceManager.GetString("NetRetranSegsRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network encryption has been turned on by default..
        /// </summary>
        internal static string NetSSLEncryptionFinding_Text {
            get {
                return ResourceManager.GetString("NetSSLEncryptionFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are high security environments where network transmission is required.  Encryption and decryption of network transmission streams places additional CPU load on the server as well as double the number of network transmissions during each connection made..
        /// </summary>
        internal static string NetSSLEncryptionImpact_Text {
            get {
                return ResourceManager.GetString("NetSSLEncryptionImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended that, if the network transmission encryption is not necessary, the network encryption be disabled..
        /// </summary>
        internal static string NetSSLEncryptionRecommendation_Text {
            get {
                return ResourceManager.GetString("NetSSLEncryptionRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text..
        /// </summary>
        internal static string NoColumnStatsFinding_Text {
            get {
                return ResourceManager.GetString("NoColumnStatsFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text..
        /// </summary>
        internal static string NoColumnStatsImpact_Text {
            get {
                return ResourceManager.GetString("NoColumnStatsImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text..
        /// </summary>
        internal static string NoColumnStatsRecommendation_Text {
            get {
                return ResourceManager.GetString("NoColumnStatsRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The query references table {Table} but seems to be missing the join predicate that defines its relationship to another table used in the query. Without a join predicate, the result of the join will be a Cartesian product of all rows. Although this might not affect the final result set due to rows removed by subsequent joins, it still may incur a significant performance overhead. It is recommended that you re evaluate the join and rewrite the query to include the appropriate join predicate..
        /// </summary>
        internal static string NoJoinPredicateFinding_Text {
            get {
                return ResourceManager.GetString("NoJoinPredicateFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The query references table {Table} but seems to be missing the join predicate that defines its relationship to another table used in the query. Without a join predicate, the result of the join will be a Cartesian product of all rows. Although this might not affect the final result set due to rows removed by subsequent joins, it still may incur a significant performance overhead. It is recommended that you re evaluate the join and rewrite the query to include the appropriate join predicate..
        /// </summary>
        internal static string NoJoinPredicateImpact_Text {
            get {
                return ResourceManager.GetString("NoJoinPredicateImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The query references table {Table} but seems to be missing the join predicate that defines its relationship to another table used in the query. Without a join predicate, the result of the join will be a Cartesian product of all rows. Although this might not affect the final result set due to rows removed by subsequent joins, it still may incur a significant performance overhead. It is recommended that you re evaluate the join and rewrite the query to include the appropriate join predicate..
        /// </summary>
        internal static string NoJoinPredicateRecommendation_Text {
            get {
                return ResourceManager.GetString("NoJoinPredicateRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Statistics are out of date.
        /// </summary>
        internal static string OutOfDateStatsFinding_Text {
            get {
                return ResourceManager.GetString("OutOfDateStatsFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Statistics object $(Name) on table $(Schema).$(Table) in database $(Database) is out of date..
        /// </summary>
        internal static string OutOfDateStatsImpact_Text {
            get {
                return ResourceManager.GetString("OutOfDateStatsImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Statistics should be updated..
        /// </summary>
        internal static string OutOfDateStatsRecommendation_Text {
            get {
                return ResourceManager.GetString("OutOfDateStatsRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial duplicate index.
        /// </summary>
        internal static string PartialDuplicateIndexFinding_Text {
            get {
                return ResourceManager.GetString("PartialDuplicateIndexFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index $(Name) on table $(Schema).$(Table) in database $(Database) is a duplicate of index $(DupName)..
        /// </summary>
        internal static string PartialDuplicateIndexImpact_Text {
            get {
                return ResourceManager.GetString("PartialDuplicateIndexImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop the one with the least number of columns.
        /// </summary>
        internal static string PartialDuplicateIndexRecommendation_Text {
            get {
                return ResourceManager.GetString("PartialDuplicateIndexRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index {0} cannot be rebuilt online because one or more columns in this index do not support the online rebuild option. If you continue, the index will be taken offline and will be unavailable..
        /// </summary>
        internal static string RebuildIndexPerformedOffline {
            get {
                return ResourceManager.GetString("RebuildIndexPerformedOffline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This optimization script may cause unexpected results or errors from third-party applications that use ActiveX Data Objects (ADO) to connect to SQL Server..
        /// </summary>
        internal static string RecommendationCanBreakADO {
            get {
                return ResourceManager.GetString("RecommendationCanBreakADO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To successfully apply the changes made by this optimization script, you must restart the SQL Server Service on the target instance..
        /// </summary>
        internal static string RecommendationRequiresRestartMessage {
            get {
                return ResourceManager.GetString("RecommendationRequiresRestartMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To successfully apply the changes made by this undo script, you must restart the SQL Server Service on the target instance..
        /// </summary>
        internal static string RecommendationRequiresRestartMessageUndo {
            get {
                return ResourceManager.GetString("RecommendationRequiresRestartMessageUndo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This optimization script may take several minutes to apply its changes. The total run time depends on environmental factors such as the current workload on your target server..
        /// </summary>
        internal static string RecommendationScriptRunDuration {
            get {
                return ResourceManager.GetString("RecommendationScriptRunDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This undo script may take several minutes to apply its changes. The total run time depends on environmental factors such as the current workload on your target server..
        /// </summary>
        internal static string RecommendationScriptRunDurationUndo {
            get {
                return ResourceManager.GetString("RecommendationScriptRunDurationUndo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select * abuse.
        /// </summary>
        internal static string SelectStarAbuseFinding_Text {
            get {
                return ResourceManager.GetString("SelectStarAbuseFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple queries that use SELECT * syntax were found. If the application actually requires all table columns, the overhead of using this syntax is minor in terms of performance but still is discouraged due to code maintenance reasons. If the application does not actually use all the columns, reducing the select list to the minimal set of required columns may have a significant positive effect on performance. Either way, it is recommended that these queries be rewritten and that the * be replaced with the mi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SelectStarAbuseImpact_Text {
            get {
                return ResourceManager.GetString("SelectStarAbuseImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid the temptation to be lazy.
        /// </summary>
        internal static string SelectStarAbuseRecommendation_Text {
            get {
                return ResourceManager.GetString("SelectStarAbuseRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to if (select count(*) from sys.configurations where cast(value_in_use as int) &lt;&gt; 1 and configuration_id = 518) &gt; 0 
        ///	begin 
        ///			execute master..sp_configure &apos;show advanced options&apos;, 1
        ///			reconfigure with override
        ///	end 
        ///
        ///execute master..sp_configure &apos;ole automation procedures&apos;, {0}
        ///reconfigure with override
        ///.
        /// </summary>
        internal static string SetOleAutomationConfig {
            get {
                return ResourceManager.GetString("SetOleAutomationConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///set transaction isolation level read uncommitted; 
        ///set lock_timeout 20000; 
        ///set implicit_transactions off; 
        ///if @@trancount &gt; 0 commit transaction; 
        ///set language us_english; 
        ///set cursor_close_on_commit off; 
        ///set query_governor_cost_limit 0; 
        ///set numeric_roundabort off; 
        ///set deadlock_priority low; 
        ///set nocount on; 
        ///
        ///select top 100 
        ///	[Database]=db_name(st.database_id), 
        ///	[ObjectID]=st.object_id,
        ///	[IO]=sum((st.user_seeks [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TableRankingStats {
            get {
                return ResourceManager.GetString("TableRankingStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Coalesce replacement.
        /// </summary>
        internal static string TwoExpressionCoalesceFinding_Text {
            get {
                return ResourceManager.GetString("TwoExpressionCoalesceFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A predicate containing the COALESCE function is used for two expressions null replacement. Although COALESCE is the ANSI standard for null replacement and enables multiple expression null replacement, SQL Server interprets COALESCE as a full CASE expression. This may hinder the optimizer from generating optimal execution plans. ISNULL is a functionally equivalent function in this case which is interpreted more efficiently by the optimizer and may produce more optimal execution plans. It is recommended that  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TwoExpressionCoalesceImpact_Text {
            get {
                return ResourceManager.GetString("TwoExpressionCoalesceImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change COALESCE to ISNULL.
        /// </summary>
        internal static string TwoExpressionCoalesceRecommendation_Text {
            get {
                return ResourceManager.GetString("TwoExpressionCoalesceRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unfiltered delete statement.
        /// </summary>
        internal static string UnfilteredDeleteFinding_Text {
            get {
                return ResourceManager.GetString("UnfilteredDeleteFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The query deletes all data from table {Table}. It is highly recommended that full truncations of this type be rewritten to use the much more efficient TRUNCATE statement instead of DELETE.
        ///
        ///$(Sql).
        /// </summary>
        internal static string UnfilteredDeleteImpact_Text {
            get {
                return ResourceManager.GetString("UnfilteredDeleteImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Give TRUNCATE a try.
        /// </summary>
        internal static string UnfilteredDeleteRecommendation_Text {
            get {
                return ResourceManager.GetString("UnfilteredDeleteRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Union set abuse.
        /// </summary>
        internal static string UnionSetAbuseFinding_Text {
            get {
                return ResourceManager.GetString("UnionSetAbuseFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A UNION set operator is used. A UNION operator requires that SQL server discards duplicate rows from the result set. This requires sorting or grouping which may consume significant resources. It is recommended that the query be re evaluated manually for the possibility of duplicate rows returning from the individual select statements. If found that there is no possibility of duplicate rows, it is highly recommended that the query be rewritten and the UNION operator replaced with a UNION ALL operator.
        ///
        ///$(S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UnionSetAbuseImpact_Text {
            get {
                return ResourceManager.GetString("UnionSetAbuseImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change up your query so that you can eliminate duplicates from each rowset in the union so that you can use UNION ALL..
        /// </summary>
        internal static string UnionSetAbuseRecommendation_Text {
            get {
                return ResourceManager.GetString("UnionSetAbuseRecommendation_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text.
        ///
        ///$(Sql).
        /// </summary>
        internal static string UsingRowCountFinding_Text {
            get {
                return ResourceManager.GetString("UsingRowCountFinding_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text.
        ///
        ///$(Sql).
        /// </summary>
        internal static string UsingRowCountImpact_Text {
            get {
                return ResourceManager.GetString("UsingRowCountImpact_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need someone to update the recommendation text.
        ///
        ///$(Sql).
        /// </summary>
        internal static string UsingRowCountRecommendation_Text {
            get {
                return ResourceManager.GetString("UsingRowCountRecommendation_Text", resourceCulture);
            }
        }
    }
}
