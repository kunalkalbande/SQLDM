if (object_id('[p_GetServerOverviewStatistics]') is not null)
begin
drop procedure p_GetServerOverviewStatistics
end
go

create procedure [dbo].p_GetServerOverviewStatistics
	@SQLServerID int,
	@StartDate datetime,
	@EndDate datetime
as
begin

select 
	convert(dec(20,1),avg(BlockedProcesses) + (stdev(BlockedProcesses))) as [BlockedProcesses Upper Bound], convert(dec(20,1),avg(BlockedProcesses) - (stdev(BlockedProcesses))) as [BlockedProcesses Lower Bound],
	convert(dec(20,1),avg(BufferCacheHitRatioPercentage) + (stdev(BufferCacheHitRatioPercentage))) as [BufferCacheHitRatioPercentage Upper Bound], convert(dec(20,1),avg(BufferCacheHitRatioPercentage) - (stdev(BufferCacheHitRatioPercentage))) as [BufferCacheHitRatioPercentage Lower Bound],
	convert(dec(20,1),avg(BufferCacheSizeInKilobytes) + (stdev(BufferCacheSizeInKilobytes))) as [BufferCacheSizeInKilobytes Upper Bound], convert(dec(20,1),avg(BufferCacheSizeInKilobytes) - (stdev(BufferCacheSizeInKilobytes))) as [BufferCacheSizeInKilobytes Lower Bound],
	convert(dec(20,1),avg(CheckpointWrites/nullif(TimeDeltaInSeconds,0)) + stdev(CheckpointWrites/nullif(TimeDeltaInSeconds,0))) as [CheckpointWritesPerSecond Upper Bound], convert(dec(20,1),avg(CheckpointWrites/nullif(TimeDeltaInSeconds,0)) - stdev(CheckpointWrites/nullif(TimeDeltaInSeconds,0))) as [CheckpointWritesPerSecond Lower Bound],
	convert(dec(20,1),avg(ClientComputers) + (stdev(ClientComputers))) as [ClientComputers Upper Bound], convert(dec(20,1),avg(ClientComputers) - (stdev(ClientComputers))) as [ClientComputers Lower Bound],
	convert(dec(20,1),avg(CPUActivityPercentage) + (stdev(CPUActivityPercentage))) as [CPUActivityPercentage Upper Bound], convert(dec(20,1),avg(CPUActivityPercentage) - (stdev(CPUActivityPercentage))) as [CPUActivityPercentage Lower Bound],
	convert(dec(20,1),avg(DatabaseCount) + (stdev(DatabaseCount))) as [DatabaseCount Upper Bound], convert(dec(20,1),avg(DatabaseCount) - (stdev(DatabaseCount))) as [DatabaseCount Lower Bound],
	convert(dec(20,1),avg(DataFileCount) + (stdev(DataFileCount))) as [DataFileCount Upper Bound], convert(dec(20,1),avg(DataFileCount) - (stdev(DataFileCount))) as [DataFileCount Lower Bound],
	convert(dec(20,1),avg(DataFileSpaceAllocatedInKilobytes) + (stdev(DataFileSpaceAllocatedInKilobytes))) as [DataFileSpaceAllocatedInKilobytes Upper Bound], convert(dec(20,1),avg(DataFileSpaceAllocatedInKilobytes) - (stdev(DataFileSpaceAllocatedInKilobytes))) as [DataFileSpaceAllocatedInKilobytes Lower Bound],
	convert(dec(20,1),avg(DataFileSpaceUsedInKilobytes) + (stdev(DataFileSpaceUsedInKilobytes))) as [DataFileSpaceUsedInKilobytes Upper Bound], convert(dec(20,1),avg(DataFileSpaceUsedInKilobytes) - (stdev(DataFileSpaceUsedInKilobytes))) as [DataFileSpaceUsedInKilobytes Lower Bound],
	convert(dec(20,1),avg(DiskQueueLength) + (stdev(DiskQueueLength))) as [DiskQueueLength Upper Bound], convert(dec(20,1),avg(DiskQueueLength) - (stdev(DiskQueueLength))) as [DiskQueueLength Lower Bound],
	convert(dec(20,1),avg(DiskTimePercent) + (stdev(DiskTimePercent))) as [DiskTimePercent Upper Bound], convert(dec(20,1),avg(DiskTimePercent) - (stdev(DiskTimePercent))) as [DiskTimePercent Lower Bound],
	convert(dec(20,1),avg(FullScans/nullif(TimeDeltaInSeconds,0)) + stdev(FullScans/nullif(TimeDeltaInSeconds,0))) as [FullScansPerSecond Upper Bound], convert(dec(20,1),avg(FullScans/nullif(TimeDeltaInSeconds,0)) - stdev(FullScans/nullif(TimeDeltaInSeconds,0))) as [FullScansPerSecond Lower Bound],
	convert(dec(20,1),avg(IdleTimePercentage) + (stdev(IdleTimePercentage))) as [IdleTimePercentage Upper Bound], convert(dec(20,1),avg(IdleTimePercentage) - (stdev(IdleTimePercentage))) as [IdleTimePercentage Lower Bound],
	convert(dec(20,1),avg(IOActivityPercentage) + (stdev(IOActivityPercentage))) as [IOActivityPercentage Upper Bound], convert(dec(20,1),avg(IOActivityPercentage) - (stdev(IOActivityPercentage))) as [IOActivityPercentage Lower Bound],
	convert(dec(20,1),avg(LazyWriterWrites/nullif(TimeDeltaInSeconds,0)) + stdev(LazyWriterWrites/nullif(TimeDeltaInSeconds,0))) as [LazyWriterWritesPerSecond Upper Bound], convert(dec(20,1),avg(LazyWriterWrites/nullif(TimeDeltaInSeconds,0)) - stdev(LazyWriterWrites/nullif(TimeDeltaInSeconds,0))) as [LazyWriterWritesPerSecond Lower Bound],
	convert(dec(20,1),avg(LockWaits/nullif(TimeDeltaInSeconds,0)) + stdev(LockWaits/nullif(TimeDeltaInSeconds,0))) as [LockWaitsPerSecond Upper Bound], convert(dec(20,1),avg(LockWaits/nullif(TimeDeltaInSeconds,0)) - stdev(LockWaits/nullif(TimeDeltaInSeconds,0))) as [LockWaitsPerSecond Lower Bound],
	convert(dec(20,1),avg(LogFileCount) + (stdev(LogFileCount))) as [LogFileCount Upper Bound], convert(dec(20,1),avg(LogFileCount) - (stdev(LogFileCount))) as [LogFileCount Lower Bound],
	convert(dec(20,1),avg(LogFileSpaceAllocatedInKilobytes) + (stdev(LogFileSpaceAllocatedInKilobytes))) as [LogFileSpaceAllocatedInKilobytes Upper Bound], convert(dec(20,1),avg(LogFileSpaceAllocatedInKilobytes) - (stdev(LogFileSpaceAllocatedInKilobytes))) as [LogFileSpaceAllocatedInKilobytes Lower Bound],
	convert(dec(20,1),avg(LogFileSpaceUsedInKilobytes) + (stdev(LogFileSpaceUsedInKilobytes))) as [LogFileSpaceUsedInKilobytes Upper Bound], convert(dec(20,1),avg(LogFileSpaceUsedInKilobytes) - (stdev(LogFileSpaceUsedInKilobytes))) as [LogFileSpaceUsedInKilobytes Lower Bound],
	convert(dec(20,1),avg(LogFlushes/nullif(TimeDeltaInSeconds,0)) + stdev(LogFlushes/nullif(TimeDeltaInSeconds,0))) as [LogFlushesPerSecond Upper Bound], convert(dec(20,1),avg(LogFlushes/nullif(TimeDeltaInSeconds,0)) - stdev(LogFlushes/nullif(TimeDeltaInSeconds,0))) as [LogFlushesPerSecond Lower Bound],
	convert(dec(20,1),avg(Logins/nullif(TimeDeltaInSeconds,0)) + stdev(Logins/nullif(TimeDeltaInSeconds,0))) as [LoginsPerSecond Upper Bound], convert(dec(20,1),avg(Logins/nullif(TimeDeltaInSeconds,0)) - stdev(Logins/nullif(TimeDeltaInSeconds,0))) as [LoginsPerSecond Lower Bound],
	convert(dec(20,1),avg(OldestOpenTransactionsInMinutes) + (stdev(OldestOpenTransactionsInMinutes))) as [OldestOpenTransactionsInMinutes Upper Bound], convert(dec(20,1),avg(OldestOpenTransactionsInMinutes) - (stdev(OldestOpenTransactionsInMinutes))) as [OldestOpenTransactionsInMinutes Lower Bound],
	convert(dec(20,1),avg(OpenTransactions) + (stdev(OpenTransactions))) as [OpenTransactions Upper Bound], convert(dec(20,1),avg(OpenTransactions) - (stdev(OpenTransactions))) as [OpenTransactions Lower Bound],
	convert(dec(20,1),(avg(OSAvailableMemoryInKilobytes) + (stdev(OSAvailableMemoryInKilobytes)))/1024) as [OSAvailableMemoryInMegabytes Upper Bound], convert(dec(20,1), (avg(OSAvailableMemoryInKilobytes) - (stdev(OSAvailableMemoryInKilobytes)))/1024) as [OSAvailableMemoryInMegabytes Lower Bound],
	convert(dec(20,1),avg(OSTotalPhysicalMemoryInKilobytes) + (stdev(OSTotalPhysicalMemoryInKilobytes))) as [OSTotalPhysicalMemoryInKilobytes Upper Bound], convert(dec(20,1),avg(OSTotalPhysicalMemoryInKilobytes) - (stdev(OSTotalPhysicalMemoryInKilobytes))) as [OSTotalPhysicalMemoryInKilobytes Lower Bound],
	convert(dec(20,1),avg(PacketErrors/nullif(TimeDeltaInSeconds,0)) + stdev(PacketErrors/nullif(TimeDeltaInSeconds,0))) as [PacketErrorsPerSecond Upper Bound], convert(dec(20,1),avg(PacketErrors/nullif(TimeDeltaInSeconds,0)) - stdev(PacketErrors/nullif(TimeDeltaInSeconds,0))) as [PacketErrorsPerSecond Lower Bound],
	convert(dec(20,1),avg(PacketsReceived/nullif(TimeDeltaInSeconds,0)) + stdev(PacketsReceived/nullif(TimeDeltaInSeconds,0))) as [PacketsReceivedPerSecond Upper Bound], convert(dec(20,1),avg(PacketsReceived/nullif(TimeDeltaInSeconds,0)) - stdev(PacketsReceived/nullif(TimeDeltaInSeconds,0))) as [PacketsReceivedPerSecond Lower Bound],
	convert(dec(20,1),avg(PacketsSent/nullif(TimeDeltaInSeconds,0)) + stdev(PacketsSent/nullif(TimeDeltaInSeconds,0))) as [PacketsSentPerSecond Upper Bound], convert(dec(20,1),avg(PacketsSent/nullif(TimeDeltaInSeconds,0)) - stdev(PacketsSent/nullif(TimeDeltaInSeconds,0))) as [PacketsSentPerSecond Lower Bound],
	convert(dec(20,1),avg(PageErrors/nullif(TimeDeltaInSeconds,0)) + stdev(PageErrors/nullif(TimeDeltaInSeconds,0))) as [PageErrorsPerSecond Upper Bound], convert(dec(20,1),avg(PageErrors/nullif(TimeDeltaInSeconds,0)) - stdev(PageErrors/nullif(TimeDeltaInSeconds,0))) as [PageErrorsPerSecond Lower Bound],
	convert(dec(20,1),avg(PageLifeExpectancy) + (stdev(PageLifeExpectancy))) as [PageLifeExpectancy Upper Bound], convert(dec(20,1),avg(PageLifeExpectancy) - (stdev(PageLifeExpectancy))) as [PageLifeExpectancy Lower Bound],
	convert(dec(20,1),avg(PageLookups/nullif(TimeDeltaInSeconds,0)) + stdev(PageLookups/nullif(TimeDeltaInSeconds,0))) as [PageLookupsPerSecond Upper Bound], convert(dec(20,1),avg(PageLookups/nullif(TimeDeltaInSeconds,0)) - stdev(PageLookups/nullif(TimeDeltaInSeconds,0))) as [PageLookupsPerSecond Lower Bound],
	convert(dec(20,1),avg(PageReads/nullif(TimeDeltaInSeconds,0)) + stdev(PageReads/nullif(TimeDeltaInSeconds,0))) as [PageReadsPerSecond Upper Bound], convert(dec(20,1),avg(PageReads/nullif(TimeDeltaInSeconds,0)) - stdev(PageReads/nullif(TimeDeltaInSeconds,0))) as [PageReadsPerSecond Lower Bound],
	convert(dec(20,1),avg(PagesPerSecond) + (stdev(PagesPerSecond))) as [PagesPerSecond Upper Bound], convert(dec(20,1),avg(PagesPerSecond) - (stdev(PagesPerSecond))) as [PagesPerSecond Lower Bound],
	convert(dec(20,1),avg(PageSplits/nullif(TimeDeltaInSeconds,0)) + stdev(PageSplits/nullif(TimeDeltaInSeconds,0))) as [PageSplitsPerSecond Upper Bound], convert(dec(20,1),avg(PageSplits/nullif(TimeDeltaInSeconds,0)) - stdev(PageSplits/nullif(TimeDeltaInSeconds,0))) as [PageSplitsPerSecond Lower Bound],
	convert(dec(20,1),avg(PageWrites/nullif(TimeDeltaInSeconds,0)) + stdev(PageWrites/nullif(TimeDeltaInSeconds,0))) as [PageWritesPerSecond Upper Bound], convert(dec(20,1),avg(PageWrites/nullif(TimeDeltaInSeconds,0)) - stdev(PageWrites/nullif(TimeDeltaInSeconds,0))) as [PageWritesPerSecond Lower Bound],
	convert(dec(20,1),avg(PrivilegedTimePercent) + (stdev(PrivilegedTimePercent))) as [PrivilegedTimePercent Upper Bound], convert(dec(20,1),avg(PrivilegedTimePercent) - (stdev(PrivilegedTimePercent))) as [PrivilegedTimePercent Lower Bound],
	convert(dec(20,1),avg(ProcedureCacheHitRatioPercentage) + (stdev(ProcedureCacheHitRatioPercentage))) as [ProcedureCacheHitRatioPercentage Upper Bound], convert(dec(20,1),avg(ProcedureCacheHitRatioPercentage) - (stdev(ProcedureCacheHitRatioPercentage))) as [ProcedureCacheHitRatioPercentage Lower Bound],
	convert(dec(20,1),avg(ProcedureCacheSizeInKilobytes) + (stdev(ProcedureCacheSizeInKilobytes))) as [ProcedureCacheSizeInKilobytes Upper Bound], convert(dec(20,1),avg(ProcedureCacheSizeInKilobytes) - (stdev(ProcedureCacheSizeInKilobytes))) as [ProcedureCacheSizeInKilobytes Lower Bound],
	convert(dec(20,1),avg(ProcedureCacheSizePercent) + (stdev(ProcedureCacheSizePercent))) as [ProcedureCacheSizePercent Upper Bound], convert(dec(20,1),avg(ProcedureCacheSizePercent) - (stdev(ProcedureCacheSizePercent))) as [ProcedureCacheSizePercent Lower Bound],
	convert(dec(20,1),avg(ProcessorQueueLength) + (stdev(ProcessorQueueLength))) as [ProcessorQueueLength Upper Bound], convert(dec(20,1),avg(ProcessorQueueLength) - (stdev(ProcessorQueueLength))) as [ProcessorQueueLength Lower Bound],
	convert(dec(20,1),avg(ProcessorTimePercent) + (stdev(ProcessorTimePercent))) as [ProcessorTimePercent Upper Bound], convert(dec(20,1),avg(ProcessorTimePercent) - (stdev(ProcessorTimePercent))) as [ProcessorTimePercent Lower Bound],
	convert(dec(20,1),avg(ReadAheadPages/nullif(TimeDeltaInSeconds,0)) + stdev(ReadAheadPages/nullif(TimeDeltaInSeconds,0))) as [ReadAheadPagesPerSecond Upper Bound], convert(dec(20,1),avg(ReadAheadPages/nullif(TimeDeltaInSeconds,0)) - stdev(ReadAheadPages/nullif(TimeDeltaInSeconds,0))) as [ReadAheadPagesPerSecond Lower Bound],
	convert(dec(20,1),avg(ReplicationLatencyInSeconds) + (stdev(ReplicationLatencyInSeconds))) as [ReplicationLatencyInSeconds Upper Bound], convert(dec(20,1),avg(ReplicationLatencyInSeconds) - (stdev(ReplicationLatencyInSeconds))) as [ReplicationLatencyInSeconds Lower Bound],
	convert(dec(20,1),avg(ReplicationSubscribed) + (stdev(ReplicationSubscribed))) as [ReplicationSubscribed Upper Bound], convert(dec(20,1),avg(ReplicationSubscribed) - (stdev(ReplicationSubscribed))) as [ReplicationSubscribed Lower Bound],
	convert(dec(20,1),avg(ReplicationUndistributed) + (stdev(ReplicationUndistributed))) as [ReplicationUndistributed Upper Bound], convert(dec(20,1),avg(ReplicationUndistributed) - (stdev(ReplicationUndistributed))) as [ReplicationUndistributed Lower Bound],
	convert(dec(20,1),avg(ReplicationUnsubscribed) + (stdev(ReplicationUnsubscribed))) as [ReplicationUnsubscribed Upper Bound], convert(dec(20,1),avg(ReplicationUnsubscribed) - (stdev(ReplicationUnsubscribed))) as [ReplicationUnsubscribed Lower Bound],
	convert(dec(20,1),avg(ResponseTimeInMilliseconds) + (stdev(ResponseTimeInMilliseconds))) as [ResponseTimeInMilliseconds Upper Bound], convert(dec(20,1),avg(ResponseTimeInMilliseconds) - (stdev(ResponseTimeInMilliseconds))) as [ResponseTimeInMilliseconds Lower Bound],
	convert(dec(20,1),avg(SqlCompilations/nullif(TimeDeltaInSeconds,0)) + stdev(SqlCompilations/nullif(TimeDeltaInSeconds,0))) as [SqlCompilationsPerSecond Upper Bound], convert(dec(20,1),avg(SqlCompilations/nullif(TimeDeltaInSeconds,0)) - stdev(SqlCompilations/nullif(TimeDeltaInSeconds,0))) as [SqlCompilationsPerSecond Lower Bound],
	convert(dec(20,1),avg(SqlMemoryAllocatedInKilobytes) + (stdev(SqlMemoryAllocatedInKilobytes))) as [SqlMemoryAllocatedInKilobytes Upper Bound], convert(dec(20,1),avg(SqlMemoryAllocatedInKilobytes) - (stdev(SqlMemoryAllocatedInKilobytes))) as [SqlMemoryAllocatedInKilobytes Lower Bound],
	convert(dec(20,1),avg(SqlMemoryUsedInKilobytes) + (stdev(SqlMemoryUsedInKilobytes))) as [SqlMemoryUsedInKilobytes Upper Bound], convert(dec(20,1),avg(SqlMemoryUsedInKilobytes) - (stdev(SqlMemoryUsedInKilobytes))) as [SqlMemoryUsedInKilobytes Lower Bound],
	convert(dec(20,1),avg(SqlRecompilations/nullif(TimeDeltaInSeconds,0)) + stdev(SqlRecompilations/nullif(TimeDeltaInSeconds,0))) as [SqlRecompilationsPerSecond Upper Bound], convert(dec(20,1),avg(SqlRecompilations/nullif(TimeDeltaInSeconds,0)) - stdev(SqlRecompilations/nullif(TimeDeltaInSeconds,0))) as [SqlRecompilationsPerSecond Lower Bound],
	convert(dec(20,1),avg(SystemProcesses) + (stdev(SystemProcesses))) as [SystemProcesses Upper Bound], convert(dec(20,1),avg(SystemProcesses) - (stdev(SystemProcesses))) as [SystemProcesses Lower Bound],
	convert(dec(20,1),avg(SystemProcessesConsumingCPU) + (stdev(SystemProcessesConsumingCPU))) as [SystemProcessesConsumingCPU Upper Bound], convert(dec(20,1),avg(SystemProcessesConsumingCPU) - (stdev(SystemProcessesConsumingCPU))) as [SystemProcessesConsumingCPU Lower Bound],
	convert(dec(20,1),avg(TableLockEscalations/nullif(TimeDeltaInSeconds,0)) + (stdev(TableLockEscalations/nullif(TimeDeltaInSeconds,0)))) as [TableLockEscalationsPerSecond Upper Bound], convert(dec(20,1),avg(TableLockEscalations/nullif(TimeDeltaInSeconds,0)) - (stdev(TableLockEscalations/nullif(TimeDeltaInSeconds,0)))) as [TableLockEscalationsPerSecond Lower Bound],
	convert(dec(20,1),avg(TempDBSizeInKilobytes) + (stdev(TempDBSizeInKilobytes))) as [TempDBSizeInKilobytes Upper Bound], convert(dec(20,1),avg(TempDBSizeInKilobytes) - (stdev(TempDBSizeInKilobytes))) as [TempDBSizeInKilobytes Lower Bound],
	convert(dec(20,1),avg(TempDBSizePercent) + (stdev(TempDBSizePercent))) as [TempDBSizePercent Upper Bound], convert(dec(20,1),avg(TempDBSizePercent) - (stdev(TempDBSizePercent))) as [TempDBSizePercent Lower Bound],
	convert(dec(20,1),avg(Batches/nullif(TimeDeltaInSeconds,0)) + (stdev(Batches/nullif(TimeDeltaInSeconds,0)))) as [BatchesPerSecond Upper Bound], convert(dec(20,1),avg(Batches/nullif(TimeDeltaInSeconds,0)) - (stdev(Batches/nullif(TimeDeltaInSeconds,0)))) as [BatchesPerSecond Lower Bound],
	convert(dec(20,4),avg(1 - (convert(dec(20,4),OSAvailableMemoryInKilobytes )/ nullif(OSTotalPhysicalMemoryInKilobytes,0)))) + (stdev(1 - (convert(dec(20,4),OSAvailableMemoryInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)))) as [UsedMemoryPercent Upper Bound], convert(dec(20,4),avg(1 - convert(dec(20,4),OSAvailableMemoryInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)) - (stdev(1 - convert(dec(20,4),OSAvailableMemoryInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)))) as [UsedMemoryPercent Lower Bound],	
	convert(dec(20,4),avg(convert(dec(20,4),SqlMemoryUsedInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)) + (stdev(convert(dec(20,4),SqlMemoryUsedInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)))) as [UsedSqlMemoryPercent Upper Bound], convert(dec(20,4),avg(convert(dec(20,4),SqlMemoryUsedInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)) - (stdev(convert(dec(20,4),SqlMemoryUsedInKilobytes) / nullif(OSTotalPhysicalMemoryInKilobytes,0)))) as [UsedSqlMemoryPercent Lower Bound],	
	convert(dec(20,1),avg(UserProcesses) + (stdev(UserProcesses))) as [UserProcesses Upper Bound], convert(dec(20,1),avg(UserProcesses) - (stdev(UserProcesses))) as [UserProcesses Lower Bound],
	convert(dec(20,1),avg(UserProcessesConsumingCPU) + (stdev(UserProcessesConsumingCPU))) as [UserProcessesConsumingCPU Upper Bound], convert(dec(20,1),avg(UserProcessesConsumingCPU) - (stdev(UserProcessesConsumingCPU))) as [UserProcessesConsumingCPU Lower Bound],
	convert(dec(20,1),avg(UserTimePercent) + (stdev(UserTimePercent))) as [UserTimePercent Upper Bound], convert(dec(20,1),avg(UserTimePercent) - (stdev(UserTimePercent))) as [UserTimePercent Lower Bound],
	convert(dec(20,1),avg(WorkFilesCreated/nullif(TimeDeltaInSeconds,0)) + stdev(WorkFilesCreated/nullif(TimeDeltaInSeconds,0))) as [WorkFilesCreatedPerSecond Upper Bound], convert(dec(20,1),avg(WorkFilesCreated/nullif(TimeDeltaInSeconds,0)) - stdev(WorkFilesCreated/nullif(TimeDeltaInSeconds,0))) as [WorkFilesCreatedPerSecond Lower Bound],
	convert(dec(20,1),avg(WorkTablesCreated/nullif(TimeDeltaInSeconds,0)) + stdev(WorkTablesCreated/nullif(TimeDeltaInSeconds,0))) as [WorkTablesCreatedPerSecond Upper Bound], convert(dec(20,1),avg(WorkTablesCreated/nullif(TimeDeltaInSeconds,0)) - stdev(WorkTablesCreated/nullif(TimeDeltaInSeconds,0))) as [WorkTablesCreatedPerSecond Lower Bound],
	convert(dec(20,1),avg(vs.CPUUsage) + stdev(vs.CPUUsage)) as [VMCPUUsage Upper Bound], convert(dec(20,1),avg(vs.CPUUsage) - stdev(vs.CPUUsage)) as [VMCPUUsage Lower Bound],
	convert(dec(20,1),avg(vs.CPUUsageMHz) + stdev(vs.CPUUsageMHz)) as [VMCPUUsageMHz Upper Bound], convert(dec(20,1),avg(vs.CPUUsageMHz) - stdev(vs.CPUUsageMHz)) as [VMCPUUsageMHz Lower Bound],
	convert(dec(20,1),avg(vs.CPUReady) + stdev(vs.CPUReady)) as [VMCPUReady Upper Bound], convert(dec(20,1),avg(vs.CPUReady) - stdev(vs.CPUReady)) as [VMCPUReady Lower Bound],
	convert(dec(20,1),avg(vs.CPUSwapWait) + stdev(vs.CPUSwapWait)) as [VMCPUSwapWait Upper Bound], convert(dec(20,1),avg(vs.CPUSwapWait) - stdev(vs.CPUSwapWait)) as [VMCPUSwapWait Lower Bound],
	convert(dec(20,1),avg(vs.MemSwapInRate) + stdev(vs.MemSwapInRate)) as [VMMemSwapInRate Upper Bound], convert(dec(20,1),avg(vs.MemSwapInRate) - stdev(vs.MemSwapInRate)) as [VMMemSwapInRate Lower Bound],
	convert(dec(20,1),avg(vs.MemSwapOutRate) + stdev(vs.MemSwapOutRate)) as [VMMemSwapOutRate Upper Bound], convert(dec(20,1),avg(vs.MemSwapOutRate) - stdev(vs.MemSwapOutRate)) as [VMMemSwapOutRate Lower Bound],
	convert(dec(20,1),avg(vs.MemSwapped) + stdev(vs.MemSwapped)) as [VMMemSwapped Upper Bound], convert(dec(20,1),avg(vs.MemSwapped) - stdev(vs.MemSwapped)) as [VMMemSwapped Lower Bound],
	convert(dec(20,1),avg(vs.MemActive) + stdev(vs.MemActive)) as [VMMemActive Upper Bound], convert(dec(20,1),avg(vs.MemActive) - stdev(vs.MemActive)) as [VMMemActive Lower Bound],
	convert(dec(20,1),avg(vs.MemConsumed) + stdev(vs.MemConsumed)) as [VMMemConsumed Upper Bound], convert(dec(20,1),avg(vs.MemConsumed) - stdev(vs.MemConsumed)) as [VMMemConsumed Lower Bound],
	convert(dec(20,1),avg(vs.MemGranted) + stdev(vs.MemGranted)) as [VMMemGranted Upper Bound], convert(dec(20,1),avg(vs.MemGranted) - stdev(vs.MemGranted)) as [VMMemGranted Lower Bound],
	convert(dec(20,1),avg(vs.MemBalooned) + stdev(vs.MemBalooned)) as [VMMemBalooned Upper Bound], convert(dec(20,1),avg(vs.MemBalooned) - stdev(vs.MemBalooned)) as [VMMemBalooned Lower Bound],
	convert(dec(20,1),avg(vs.MemUsage) + stdev(vs.MemUsage)) as [VMMemUsage Upper Bound], convert(dec(20,1),avg(vs.MemUsage) - stdev(vs.MemUsage)) as [VMMemUsage Lower Bound],
	convert(dec(20,1),avg(vs.DiskRead) + stdev(vs.DiskRead)) as [VMDiskRead Upper Bound], convert(dec(20,1),avg(vs.DiskRead) - stdev(vs.DiskRead)) as [VMDiskRead Lower Bound],
	convert(dec(20,1),avg(vs.DiskWrite) + stdev(vs.DiskWrite)) as [VMDiskWrite Upper Bound], convert(dec(20,1),avg(vs.DiskWrite) - stdev(vs.DiskWrite)) as [VMDiskWrite Lower Bound],
	convert(dec(20,1),avg(vs.DiskUsage) + stdev(vs.DiskUsage)) as [VMDiskUsage Upper Bound], convert(dec(20,1),avg(vs.DiskUsage) - stdev(vs.DiskUsage)) as [VMDiskUsage Lower Bound],
	convert(dec(20,1),avg(vs.NetUsage) + stdev(vs.NetUsage)) as [VMNetUsage Upper Bound], convert(dec(20,1),avg(vs.NetUsage) - stdev(vs.NetUsage)) as [VMNetUsage Lower Bound],
	convert(dec(20,1),avg(vs.NetTransmitted) + stdev(vs.NetTransmitted)) as [VMNetTransmitted Upper Bound], convert(dec(20,1),avg(vs.NetTransmitted) - stdev(vs.NetTransmitted)) as [VMNetTransmitted Lower Bound],
	convert(dec(20,1),avg(vs.NetReceived) + stdev(vs.NetReceived)) as [VMNetReceived Upper Bound], convert(dec(20,1),avg(vs.NetReceived) - stdev(vs.NetReceived)) as [VMNetReceived Lower Bound],
	convert(dec(20,1),avg(es.CPUUsage) + stdev(es.CPUUsage)) as [ESXCPUUsage Upper Bound], convert(dec(20,1),avg(es.CPUUsage) - stdev(es.CPUUsage)) as [ESXCPUUsage Lower Bound],
	convert(dec(20,1),avg(es.CPUUsageMHz) + stdev(es.CPUUsageMHz)) as [ESXCPUUsageMHz Upper Bound], convert(dec(20,1),avg(es.CPUUsageMHz) - stdev(es.CPUUsageMHz)) as [ESXCPUUsageMHz Lower Bound],
	convert(dec(20,1),avg(es.MemSwapInRate) + stdev(es.MemSwapInRate)) as [ESXMemSwapInRate Upper Bound], convert(dec(20,1),avg(es.MemSwapInRate) - stdev(es.MemSwapInRate)) as [ESXMemSwapInRate Lower Bound],
	convert(dec(20,1),avg(es.MemSwapOutRate) + stdev(es.MemSwapOutRate)) as [ESXMemSwapOutRate Upper Bound], convert(dec(20,1),avg(es.MemSwapOutRate) - stdev(es.MemSwapOutRate)) as [ESXMemSwapOutRate Lower Bound],
	convert(dec(20,1),avg(es.MemActive) + stdev(es.MemActive)) as [ESXMemActive Upper Bound], convert(dec(20,1),avg(es.MemActive) - stdev(es.MemActive)) as [ESXMemActive Lower Bound],
	convert(dec(20,1),avg(es.MemConsumed) + stdev(es.MemConsumed)) as [ESXMemConsumed Upper Bound], convert(dec(20,1),avg(es.MemConsumed) - stdev(es.MemConsumed)) as [ESXMemConsumed Lower Bound],
	convert(dec(20,1),avg(es.MemGranted) + stdev(es.MemGranted)) as [ESXMemGranted Upper Bound], convert(dec(20,1),avg(es.MemGranted) - stdev(es.MemGranted)) as [ESXMemGranted Lower Bound],
	convert(dec(20,1),avg(es.MemBalooned) + stdev(es.MemBalooned)) as [ESXMemBalooned Upper Bound], convert(dec(20,1),avg(es.MemBalooned) - stdev(es.MemBalooned)) as [ESXMemBalooned Lower Bound],
	convert(dec(20,1),avg(es.MemUsage) + stdev(es.MemUsage)) as [ESXMemUsage Upper Bound], convert(dec(20,1),avg(es.MemUsage) - stdev(es.MemUsage)) as [ESXMemUsage Lower Bound],
	convert(dec(20,1),avg(es.DiskRead) + stdev(es.DiskRead)) as [ESXDiskRead Upper Bound], convert(dec(20,1),avg(es.DiskRead) - stdev(es.DiskRead)) as [ESXDiskRead Lower Bound],
	convert(dec(20,1),avg(es.DiskWrite) + stdev(es.DiskWrite)) as [ESXDiskWrite Upper Bound], convert(dec(20,1),avg(es.DiskWrite) - stdev(es.DiskWrite)) as [ESXDiskWrite Lower Bound],
	convert(dec(20,1),avg(es.DiskUsage) + stdev(es.DiskUsage)) as [ESXDiskUsage Upper Bound], convert(dec(20,1),avg(es.DiskUsage) - stdev(es.DiskUsage)) as [ESXDiskUsage Lower Bound],
	convert(dec(20,1),avg(es.NetUsage) + stdev(es.NetUsage)) as [ESXNetUsage Upper Bound], convert(dec(20,1),avg(es.NetUsage) - stdev(es.NetUsage)) as [ESXNetUsage Lower Bound],
	convert(dec(20,1),avg(es.NetTransmitted) + stdev(es.NetTransmitted)) as [ESXNetTransmitted Upper Bound], convert(dec(20,1),avg(es.NetTransmitted) - stdev(es.NetTransmitted)) as [ESXNetTransmitted Lower Bound],
	convert(dec(20,1),avg(es.NetReceived) + stdev(es.NetReceived)) as [ESXNetReceived Upper Bound], convert(dec(20,1),avg(es.NetReceived) - stdev(es.NetReceived)) as [ESXNetReceived Lower Bound],
	convert(dec(20,1),avg(es.DiskDeviceLatency) + stdev(es.DiskDeviceLatency)) as [ESXDiskDeviceLatency Upper Bound], convert(dec(20,1),avg(es.DiskDeviceLatency) - stdev(es.DiskDeviceLatency)) as [ESXDiskDeviceLatency Lower Bound],
	convert(dec(20,1),avg(es.DiskKernelLatency) + stdev(es.DiskKernelLatency)) as [ESXDiskKernelLatency Upper Bound], convert(dec(20,1),avg(es.DiskKernelLatency) - stdev(es.DiskKernelLatency)) as [ESXDiskKernelLatency Lower Bound],
	convert(dec(20,1),avg(es.DiskQueueLatency) + stdev(es.DiskQueueLatency)) as [ESXDiskQueueLatency Upper Bound], convert(dec(20,1),avg(es.DiskQueueLatency) - stdev(es.DiskQueueLatency)) as [ESXDiskQueueLatency Lower Bound],
	convert(dec(20,1),avg(es.DiskTotalLatency) + stdev(es.DiskTotalLatency)) as [ESXDiskTotalLatency Upper Bound], convert(dec(20,1),avg(es.DiskTotalLatency) - stdev(es.DiskTotalLatency)) as [ESXDiskTotalLatency Lower Bound]
	into #TempStatistics
from
	[ServerStatistics] s1
	left join [MonitoredSQLServers] m
	on m.[SQLServerID] = s1.[SQLServerID]
	left join [OSStatistics] o
	on o.[SQLServerID] = s1.[SQLServerID] and o.[UTCCollectionDateTime] = s1.[UTCCollectionDateTime]
	left join [VMConfigData] vc
		on s1.SQLServerID = vc.SQLServerID and s1.UTCCollectionDateTime = vc.UTCCollectionDateTime
	left join [ESXConfigData] ec
		on s1.SQLServerID = ec.SQLServerID and s1.UTCCollectionDateTime = ec.UTCCollectionDateTime
	left join [VMStatistics] vs
		on s1.SQLServerID = vs.SQLServerID and s1.UTCCollectionDateTime = vs.UTCCollectionDateTime
	left join [ESXStatistics] es
		on s1.SQLServerID = es.SQLServerID and s1.UTCCollectionDateTime = es.UTCCollectionDateTime
where 
	s1.SQLServerID = @SQLServerID
	and s1.UTCCollectionDateTime >= @StartDate
	and s1.UTCCollectionDateTime <= @EndDate

select 
	[BlockedProcesses] = case when isnull([BlockedProcesses Lower Bound],-1) < 0 then '0' else cast([BlockedProcesses Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([BlockedProcesses Upper Bound],0) as nvarchar(50)),
	[BufferCacheHitRatioPercentage] = case when isnull([BufferCacheHitRatioPercentage Lower Bound],-1) < 0 then '0' else cast([BufferCacheHitRatioPercentage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([BufferCacheHitRatioPercentage Upper Bound],0) as nvarchar(50)),
	[BufferCacheSizeInMegabytes] = case when isnull([BufferCacheSizeInKilobytes Lower Bound],-1)/1024 < 0 then '0' else cast(convert(dec(20,1),[BufferCacheSizeInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' - ' + cast(isnull(convert(dec(20,1),[BufferCacheSizeInKilobytes Upper Bound]/1024),0) as nvarchar(50)),
	[CheckpointWritesPerSecond] = case when isnull([CheckpointWritesPerSecond Lower Bound],-1) < 0 then '0' else cast([CheckpointWritesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([CheckpointWritesPerSecond Upper Bound],0) as nvarchar(50)),
	[ClientComputers] = case when isnull([ClientComputers Lower Bound],-1) < 0 then '0' else cast([ClientComputers Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ClientComputers Upper Bound],0) as nvarchar(50)),
	[CPUActivityPercentage] = case when isnull([CPUActivityPercentage Lower Bound],-1) < 0 then '0' else cast([CPUActivityPercentage Lower Bound] as nvarchar(50)) end + ' - ' + case when [CPUActivityPercentage Upper Bound] > 100 then '100' else cast(isnull([CPUActivityPercentage Upper Bound],0) as nvarchar(50)) end,
	[DatabaseCount] = case when isnull([DatabaseCount Lower Bound],-1) < 0 then '0' else cast([DatabaseCount Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([DatabaseCount Upper Bound],0) as nvarchar(50)),
	[DataFileCount] = case when isnull([DataFileCount Lower Bound],-1) < 0 then '0' else cast([DataFileCount Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([DataFileCount Upper Bound],0) as nvarchar(50)),
	[DataFileSpaceAllocatedInMegabytes] = case when isnull([DataFileSpaceAllocatedInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[DataFileSpaceAllocatedInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[DataFileSpaceAllocatedInKilobytes Upper Bound]/1024),0) as nvarchar(50))  + ' MB',
	[DataFileSpaceUsedInMegabytes] = case when isnull([DataFileSpaceUsedInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[DataFileSpaceUsedInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB  - ' + cast(isnull(convert(dec(20,1),[DataFileSpaceUsedInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[DiskQueueLength] = case when isnull([DiskQueueLength Lower Bound],-1) < 0 then '0' else cast([DiskQueueLength Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([DiskQueueLength Upper Bound],0) as nvarchar(50)),
	[DiskTimePercent] = case when isnull([DiskTimePercent Lower Bound],-1) < 0 then '0' else cast([DiskTimePercent Lower Bound] as nvarchar(50)) end + ' - ' + case when [DiskTimePercent Upper Bound] > 100 then '100' else cast(isnull([DiskTimePercent Upper Bound],0) as nvarchar(50)) end,
	[FullScansPerSecond] = case when isnull([FullScansPerSecond Lower Bound],-1) < 0 then '0' else cast([FullScansPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([FullScansPerSecond Upper Bound],0) as nvarchar(50)),
	[IdleTimePercentage] = case when isnull([IdleTimePercentage Lower Bound],-1) < 0 then '0' else cast([IdleTimePercentage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([IdleTimePercentage Upper Bound],0) as nvarchar(50)),
	[IOActivityPercentage] = case when isnull([IOActivityPercentage Lower Bound],-1) < 0 then '0' else cast([IOActivityPercentage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([IOActivityPercentage Upper Bound],0) as nvarchar(50)),
	[LazyWriterWritesPerSecond] = case when isnull([LazyWriterWritesPerSecond Lower Bound],-1) < 0 then '0' else cast([LazyWriterWritesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([LazyWriterWritesPerSecond Upper Bound],0) as nvarchar(50)),
	[LockWaitsPerSecond] = case when isnull([LockWaitsPerSecond Lower Bound],-1) < 0 then '0' else cast([LockWaitsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([LockWaitsPerSecond Upper Bound],0) as nvarchar(50)),
	[LogFileCount] = case when isnull([LogFileCount Lower Bound],-1) < 0 then '0' else cast([LogFileCount Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([LogFileCount Upper Bound],0) as nvarchar(50)),
	[LogFileSpaceAllocatedInMegabytes] = case when isnull([LogFileSpaceAllocatedInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[LogFileSpaceAllocatedInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[LogFileSpaceAllocatedInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[LogFileSpaceUsedInMegabytes] = case when isnull([LogFileSpaceUsedInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[LogFileSpaceUsedInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[LogFileSpaceUsedInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[LogFlushesPerSecond] = case when isnull([LogFlushesPerSecond Lower Bound],-1) < 0 then '0' else cast([LogFlushesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([LogFlushesPerSecond Upper Bound],0) as nvarchar(50)),
	[LoginsPerSecond] = case when isnull([LoginsPerSecond Lower Bound],-1) < 0 then '0' else cast([LoginsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([LoginsPerSecond Upper Bound],0) as nvarchar(50)),
	[OldestOpenTransactionsInMinutes] = case when isnull([OldestOpenTransactionsInMinutes Lower Bound],-1) < 0 then '0' else cast([OldestOpenTransactionsInMinutes Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([OldestOpenTransactionsInMinutes Upper Bound],0) as nvarchar(50)),
	[OpenTransactions] = case when isnull([OpenTransactions Lower Bound],-1) < 0 then '0' else cast([OpenTransactions Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([OpenTransactions Upper Bound],0) as nvarchar(50)),
	[OSAvailableMemoryInMegabytes] = case when isnull([OSAvailableMemoryInMegabytes Lower Bound],-1) < 0 then '0' else cast([OSAvailableMemoryInMegabytes Lower Bound] as nvarchar(50)) end + ' MB - ' + cast(isnull([OSAvailableMemoryInMegabytes Upper Bound],0) as nvarchar(50)) + ' MB',
	[OSTotalPhysicalMemoryInMegabytes] = case when isnull([OSTotalPhysicalMemoryInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[OSTotalPhysicalMemoryInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[OSTotalPhysicalMemoryInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[PacketErrorsPerSecond] = case when isnull([PacketErrorsPerSecond Lower Bound],-1) < 0 then '0' else cast([PacketErrorsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PacketErrorsPerSecond Upper Bound],0) as nvarchar(50)),
	[PacketsReceivedPerSecond] = case when isnull([PacketsReceivedPerSecond Lower Bound],-1) < 0 then '0' else cast([PacketsReceivedPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PacketsReceivedPerSecond Upper Bound],0) as nvarchar(50)),
	[PacketsSentPerSecond] = case when isnull([PacketsSentPerSecond Lower Bound],-1) < 0 then '0' else cast([PacketsSentPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PacketsSentPerSecond Upper Bound],0) as nvarchar(50)),
	[PageErrorsPerSecond] = case when isnull([PageErrorsPerSecond Lower Bound],-1) < 0 then '0' else cast([PageErrorsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PageErrorsPerSecond Upper Bound],0) as nvarchar(50)),
	[PageLifeExpectancy] = case when isnull([PageLifeExpectancy Lower Bound],-1) < 0 then '0' else cast([PageLifeExpectancy Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PageLifeExpectancy Upper Bound],0) as nvarchar(50)),
	[PageLookupsPerSecond] = case when isnull([PageLookupsPerSecond Lower Bound],-1) < 0 then '0' else cast([PageLookupsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PageLookupsPerSecond Upper Bound],0) as nvarchar(50)),
	[PageReadsPerSecond] = case when isnull([PageReadsPerSecond Lower Bound],-1) < 0 then '0' else cast([PageReadsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PageReadsPerSecond Upper Bound],0) as nvarchar(50)),
	[PagesPerSecond] = case when isnull([PagesPerSecond Lower Bound],-1) < 0 then '0' else cast([PagesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PagesPerSecond Upper Bound],0) as nvarchar(50)),
	[PageSplitsPerSecond] = case when isnull([PageSplitsPerSecond Lower Bound],-1) < 0 then '0' else cast([PageSplitsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PageSplitsPerSecond Upper Bound],0) as nvarchar(50)),
	[PageWritesPerSecond] = case when isnull([PageWritesPerSecond Lower Bound],-1) < 0 then '0' else cast([PageWritesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([PageWritesPerSecond Upper Bound],0) as nvarchar(50)),
	[PrivilegedTimePercent] = case when isnull([PrivilegedTimePercent Lower Bound],-1) < 0 then '0' else cast([PrivilegedTimePercent Lower Bound] as nvarchar(50)) end + ' - ' + case when [PrivilegedTimePercent Upper Bound] > 100 then '100' else cast(isnull([PrivilegedTimePercent Upper Bound],0) as nvarchar(50)) end,
	[ProcedureCacheHitRatioPercentage] = case when isnull([ProcedureCacheHitRatioPercentage Lower Bound],-1) < 0 then '0' else cast([ProcedureCacheHitRatioPercentage Lower Bound] as nvarchar(50)) end + ' - ' + case when [ProcedureCacheHitRatioPercentage Upper Bound] > 100 then '100' else cast(isnull([ProcedureCacheHitRatioPercentage Upper Bound],0) as nvarchar(50)) end,
	[ProcedureCacheSizeInMegabytes] = case when isnull([ProcedureCacheSizeInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[ProcedureCacheSizeInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[ProcedureCacheSizeInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[ProcedureCacheSizePercent] = case when isnull([ProcedureCacheSizePercent Lower Bound],-1) < 0 then '0' else cast([ProcedureCacheSizePercent Lower Bound] as nvarchar(50)) end + ' - ' + case when [ProcedureCacheSizePercent Upper Bound] > 100 then '100' else cast(isnull([ProcedureCacheSizePercent Upper Bound],0) as nvarchar(50)) end,
	[ProcessorQueueLength] = case when isnull([ProcessorQueueLength Lower Bound],-1) < 0 then '0' else cast([ProcessorQueueLength Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ProcessorQueueLength Upper Bound],0) as nvarchar(50)),
	[ProcessorTimePercent] = case when isnull([ProcessorTimePercent Lower Bound],-1) < 0 then '0' else cast([ProcessorTimePercent Lower Bound] as nvarchar(50)) end + ' - ' + case when [ProcessorTimePercent Upper Bound] > 100 then '100' else cast(isnull([ProcessorTimePercent Upper Bound],0) as nvarchar(50)) end,
	[ReadAheadPagesPerSecond] = case when isnull([ReadAheadPagesPerSecond Lower Bound],-1) < 0 then '0' else cast([ReadAheadPagesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ReadAheadPagesPerSecond Upper Bound],0) as nvarchar(50)),
	[ReplicationLatencyInSeconds] = case when isnull([ReplicationLatencyInSeconds Lower Bound],-1) < 0 then '0' else cast([ReplicationLatencyInSeconds Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ReplicationLatencyInSeconds Upper Bound],0) as nvarchar(50)),
	[ReplicationSubscribed] = case when isnull([ReplicationSubscribed Lower Bound],-1) < 0 then '0' else cast([ReplicationSubscribed Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ReplicationSubscribed Upper Bound],0) as nvarchar(50)),
	[ReplicationUndistributed] = case when isnull([ReplicationUndistributed Lower Bound],-1) < 0 then '0' else cast([ReplicationUndistributed Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ReplicationUndistributed Upper Bound],0) as nvarchar(50)),
	[ReplicationUnsubscribed] = case when isnull([ReplicationUnsubscribed Lower Bound],-1) < 0 then '0' else cast([ReplicationUnsubscribed Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ReplicationUnsubscribed Upper Bound],0) as nvarchar(50)),
	[ResponseTimeInMilliseconds] = case when isnull([ResponseTimeInMilliseconds Lower Bound],-1) < 0 then '0' else cast([ResponseTimeInMilliseconds Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ResponseTimeInMilliseconds Upper Bound],0) as nvarchar(50)),
	[SqlCompilationsPerSecond] = case when isnull([SqlCompilationsPerSecond Lower Bound],-1) < 0 then '0' else cast([SqlCompilationsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([SqlCompilationsPerSecond Upper Bound],0) as nvarchar(50)),
	[SqlMemoryAllocatedInMegabytes] = case when isnull([SqlMemoryAllocatedInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[SqlMemoryAllocatedInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[SqlMemoryAllocatedInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[SqlMemoryUsedInMegabytes] = case when isnull([SqlMemoryUsedInKilobytes Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[SqlMemoryUsedInKilobytes Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[SqlMemoryUsedInKilobytes Upper Bound]/1024),0) as nvarchar(50))+ ' MB',
	[SqlRecompilationsPerSecond] = case when isnull([SqlRecompilationsPerSecond Lower Bound],-1) < 0 then '0' else cast([SqlRecompilationsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([SqlRecompilationsPerSecond Upper Bound],0) as nvarchar(50)),
	[SystemProcesses] = case when isnull([SystemProcesses Lower Bound],-1) < 0 then '0' else cast([SystemProcesses Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([SystemProcesses Upper Bound],0) as nvarchar(50)),
	[SystemProcessesConsumingCPU] = case when isnull([SystemProcessesConsumingCPU Lower Bound],-1) < 0 then '0' else cast([SystemProcessesConsumingCPU Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([SystemProcessesConsumingCPU Upper Bound],0) as nvarchar(50)),
	[TableLockEscalationsPerSecond] = case when isnull([TableLockEscalationsPerSecond Lower Bound],-1) < 0 then '0' else cast([TableLockEscalationsPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([TableLockEscalationsPerSecond Upper Bound],0) as nvarchar(50)),
	[TempDBSizeInKilobytes] = case when isnull([TempDBSizeInKilobytes Lower Bound],-1) < 0 then '0' else cast([TempDBSizeInKilobytes Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([TempDBSizeInKilobytes Upper Bound],0) as nvarchar(50)),
	[TempDBSizePercent] = case when isnull([TempDBSizePercent Lower Bound],-1) < 0 then '0' else cast([TempDBSizePercent Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([TempDBSizePercent Upper Bound],0) as nvarchar(50)),
	[BatchesPerSecond] = case when isnull([BatchesPerSecond Lower Bound],-1) < 0 then '0' else cast([BatchesPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([BatchesPerSecond Upper Bound],0) as nvarchar(50)),
	[UserProcesses] = case when isnull([UserProcesses Lower Bound],-1) < 0 then '0' else cast([UserProcesses Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([UserProcesses Upper Bound],0) as nvarchar(50)),
	[UserProcessesConsumingCPU] = case when isnull([UserProcessesConsumingCPU Lower Bound],-1) < 0 then '0' else cast([UserProcessesConsumingCPU Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([UserProcessesConsumingCPU Upper Bound],0) as nvarchar(50)),
	[UserTimePercent] = case when isnull([UserTimePercent Lower Bound],-1) < 0 then '0' else cast([UserTimePercent Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([UserTimePercent Upper Bound],0) as nvarchar(50)),
	[UsedMemoryPercent] = case when isnull([UsedMemoryPercent Lower Bound],-1) < 0 then '0' else cast(convert(dec(20,1),[UsedMemoryPercent Lower Bound]*100) as nvarchar(50)) end + ' - ' + case when [UsedMemoryPercent Upper Bound] > 1 then '100' else cast(isnull(convert(dec(20,1),[UsedMemoryPercent Upper Bound]*100),0) as nvarchar(50)) end,
	[UsedSqlMemoryPercent] = case when isnull([UsedSqlMemoryPercent Lower Bound],-1) < 0 then '0' else cast(convert(dec(20,1),[UsedSqlMemoryPercent Lower Bound]*100) as nvarchar(50)) end + ' - ' + case when [UsedSqlMemoryPercent Upper Bound] > 1 then '100' else cast(isnull(convert(dec(20,1),[UsedSqlMemoryPercent Upper Bound]*100),0) as nvarchar(50)) end,
	[WorkFilesCreatedPerSecond] = case when isnull([WorkFilesCreatedPerSecond Lower Bound],-1) < 0 then '0' else cast([WorkFilesCreatedPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([WorkFilesCreatedPerSecond Upper Bound],0) as nvarchar(50)),
	[WorkTablesCreatedPerSecond] = case when isnull([WorkTablesCreatedPerSecond Lower Bound],-1) < 0 then '0' else cast([WorkTablesCreatedPerSecond Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([WorkTablesCreatedPerSecond Upper Bound],0) as nvarchar(50)),
	[VMCPUUsage] = case when isnull([VMCPUUsage Lower Bound],-1) < 0 then '0' else cast([VMCPUUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMCPUUsage Upper Bound],0) as nvarchar(50)),
	[VMCPUUsageMHz] = case when isnull([VMCPUUsageMHz Lower Bound],-1) < 0 then '0' else cast([VMCPUUsageMHz Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMCPUUsageMHz Upper Bound],0) as nvarchar(50)),
	[VMCPUReady] = case when isnull([VMCPUReady Lower Bound],-1) < 0 then '0' else cast([VMCPUReady Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMCPUReady Upper Bound],0) as nvarchar(50)),
	[VMCPUSwapWait] = case when isnull([VMCPUSwapWait Lower Bound],-1) < 0 then '0' else cast([VMCPUSwapWait Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMCPUSwapWait Upper Bound],0) as nvarchar(50)),
	[VMMemSwapInRate] = case when isnull([VMMemSwapInRate Lower Bound],-1) < 0 then '0' else cast([VMMemSwapInRate Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMMemSwapInRate Upper Bound],0) as nvarchar(50)),
	[VMMemSwapOutRate] = case when isnull([VMMemSwapOutRate Lower Bound],-1) < 0 then '0' else cast([VMMemSwapOutRate Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMMemSwapOutRate Upper Bound],0) as nvarchar(50)),
	[VMMemSwapped] = case when isnull([VMMemSwapped Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[VMMemSwapped Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[VMMemSwapped Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[VMMemActive] = case when isnull([VMMemActive Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[VMMemActive Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[VMMemActive Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[VMMemConsumed] = case when isnull([VMMemConsumed Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[VMMemConsumed Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[VMMemConsumed Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[VMMemGranted] = case when isnull([VMMemGranted Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[VMMemGranted Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[VMMemGranted Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[VMMemBalooned] = case when isnull([VMMemBalooned Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[VMMemBalooned Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[VMMemBalooned Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[VMMemUsage] = case when isnull([VMMemUsage Lower Bound],-1) < 0 then '0' else cast([VMMemUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMMemUsage Upper Bound],0) as nvarchar(50)),
	[VMDiskRead] = case when isnull([VMDiskRead Lower Bound],-1) < 0 then '0' else cast([VMDiskRead Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMDiskRead Upper Bound],0) as nvarchar(50)),
	[VMDiskWrite] = case when isnull([VMDiskWrite Lower Bound],-1) < 0 then '0' else cast([VMDiskWrite Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMDiskWrite Upper Bound],0) as nvarchar(50)),
	[VMDiskUsage] = case when isnull([VMDiskUsage Lower Bound],-1) < 0 then '0' else cast([VMDiskUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMDiskUsage Upper Bound],0) as nvarchar(50)),
	[VMNetUsage] = case when isnull([VMNetUsage Lower Bound],-1) < 0 then '0' else cast([VMNetUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMNetUsage Upper Bound],0) as nvarchar(50)),
	[VMNetTransmitted] = case when isnull([VMNetTransmitted Lower Bound],-1) < 0 then '0' else cast([VMNetTransmitted Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMNetTransmitted Upper Bound],0) as nvarchar(50)),
	[VMNetReceived] = case when isnull([VMNetReceived Lower Bound],-1) < 0 then '0' else cast([VMNetReceived Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([VMNetReceived Upper Bound],0) as nvarchar(50)),
	[ESXCPUUsage] = case when isnull([ESXCPUUsage Lower Bound],-1) < 0 then '0' else cast([ESXCPUUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXCPUUsage Upper Bound],0) as nvarchar(50)),
	[ESXCPUUsageMHz] = case when isnull([ESXCPUUsageMHz Lower Bound],-1) < 0 then '0' else cast([ESXCPUUsageMHz Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXCPUUsageMHz Upper Bound],0) as nvarchar(50)),
	[ESXMemSwapInRate] = case when isnull([ESXMemSwapInRate Lower Bound],-1) < 0 then '0' else cast([ESXMemSwapInRate Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXMemSwapInRate Upper Bound],0) as nvarchar(50)),
	[ESXMemSwapOutRate] = case when isnull([ESXMemSwapOutRate Lower Bound],-1) < 0 then '0' else cast([ESXMemSwapOutRate Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXMemSwapOutRate Upper Bound],0) as nvarchar(50)),
	[ESXMemActive] = case when isnull([ESXMemActive Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[ESXMemActive Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[ESXMemActive Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[ESXMemConsumed] = case when isnull([ESXMemConsumed Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[ESXMemConsumed Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[ESXMemConsumed Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[ESXMemGranted] = case when isnull([ESXMemGranted Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[ESXMemGranted Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[ESXMemGranted Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[ESXMemBalooned] = case when isnull([ESXMemBalooned Lower Bound]/1024,-1) < 0 then '0' else cast(convert(dec(20,1),[ESXMemBalooned Lower Bound]/1024) as nvarchar(50)) end + ' MB - ' + cast(isnull(convert(dec(20,1),[ESXMemBalooned Upper Bound]/1024),0) as nvarchar(50)) + ' MB',
	[ESXMemUsage] = case when isnull([ESXMemUsage Lower Bound],-1) < 0 then '0' else cast([ESXMemUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXMemUsage Upper Bound],0) as nvarchar(50)),
	[ESXDiskRead] = case when isnull([ESXDiskRead Lower Bound],-1) < 0 then '0' else cast([ESXDiskRead Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskRead Upper Bound],0) as nvarchar(50)),
	[ESXDiskWrite] = case when isnull([ESXDiskWrite Lower Bound],-1) < 0 then '0' else cast([ESXDiskWrite Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskWrite Upper Bound],0) as nvarchar(50)),
	[ESXDiskUsage] = case when isnull([ESXDiskUsage Lower Bound],-1) < 0 then '0' else cast([ESXDiskUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskUsage Upper Bound],0) as nvarchar(50)),
	[ESXNetUsage] = case when isnull([ESXNetUsage Lower Bound],-1) < 0 then '0' else cast([ESXNetUsage Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXNetUsage Upper Bound],0) as nvarchar(50)),
	[ESXNetTransmitted] = case when isnull([ESXNetTransmitted Lower Bound],-1) < 0 then '0' else cast([ESXNetTransmitted Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXNetTransmitted Upper Bound],0) as nvarchar(50)),
	[ESXNetReceived] = case when isnull([ESXNetReceived Lower Bound],-1) < 0 then '0' else cast([ESXNetReceived Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXNetReceived Upper Bound],0) as nvarchar(50)),
	[ESXDiskDeviceLatency] = case when isnull([ESXDiskDeviceLatency Lower Bound],-1) < 0 then '0' else cast([ESXDiskDeviceLatency Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskDeviceLatency Upper Bound],0) as nvarchar(50)),
	[ESXDiskKernelLatency] = case when isnull([ESXDiskKernelLatency Lower Bound],-1) < 0 then '0' else cast([ESXDiskKernelLatency Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskKernelLatency Upper Bound],0) as nvarchar(50)),
	[ESXDiskQueueLatency] = case when isnull([ESXDiskQueueLatency Lower Bound],-1) < 0 then '0' else cast([ESXDiskQueueLatency Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskQueueLatency Upper Bound],0) as nvarchar(50)),
	[ESXDiskTotalLatency] = case when isnull([ESXDiskTotalLatency Lower Bound],-1) < 0 then '0' else cast([ESXDiskTotalLatency Lower Bound] as nvarchar(50)) end + ' - ' + cast(isnull([ESXDiskTotalLatency Upper Bound],0) as nvarchar(50))
from #TempStatistics

drop table #TempStatistics

end
go


