//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idera.SQLdm.PrescriptiveAnalyzer.Properties
{
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Idera.SQLdm.PrescriptiveAnalyzer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------
        ///--  Parms:
        ///--    0 - The id of the trace
        ///--    1 - End time of the last collected trace item
        ///--    2 - Allows the trace to be started/stopped for specific sampling
        ///--
        ///
        ///set transaction isolation level read uncommitted 
        ///set lock_timeout 20000 
        ///set implicit_transactions off 
        ///if @@trancount &gt; 0 commit transaction 
        ///set language us_english 
        ///set cursor_close_on_commit off 
        ///set query_governor_cost_limit 0 
        ///set num [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CollectTraceData {
            get {
                return ResourceManager.GetString("CollectTraceData", resourceCulture);
            }
        }


        internal static string CollectExEventSessionData
        {
            get
            {
                return ResourceManager.GetString("CollectExEventSessionData", resourceCulture);
            }
        }

        internal static string StartExEventSession
        {
            get
            {
                return ResourceManager.GetString("StartExEventSession", resourceCulture);
            }
        }

        internal static string SampleExEventSession
        {
            get
            {
                return ResourceManager.GetString("SampleExEventSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------
        ///--  Parms:
        ///--    0 - Trace file prefix
        ///--    1 - Maximum minutes that the trace can run
        ///--    2 - Min query duration to trace
        ///--    3 - Max query duration to trace (applied when &gt; 0)
        ///--    4 - Trace status (1 for start)
        ///--
        ///
        ///set transaction isolation level read uncommitted 
        ///set lock_timeout 20000 
        ///set implicit_transactions off 
        ///if @@trancount &gt; 0 commit transaction 
        ///set language us_english 
        ///set cursor_close [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateTrace {
            get {
                return ResourceManager.GetString("CreateTrace", resourceCulture);
            }
        }


        internal static string CreateExEventSession
        {
            get
            {
                return ResourceManager.GetString("CreateExEventSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------
        ///--  Parms:
        ///--    {0} - Trace file prefix
        ///--    {1} - OLE context
        ///--
        ///
        ///DECLARE @TracePath nvarchar(1024)
        ///DECLARE @traceID int 
        ///DECLARE @rc int 
        ///DECLARE @cmd sysname
        ///DECLARE @curconfig int 
        ///DECLARE @oleContext int
        ///
        ///set @oleContext = {1}
        ///
        ///----------------------------------------------------------------------------------------
        ///--  The IO path to tempdb on high-end systems will be SAN, hence we should put the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DeleteTrace {
            get {
                return ResourceManager.GetString("DeleteTrace", resourceCulture);
            }
        }


        internal static string DeleteExEventSession
        {
            get
            {
                return ResourceManager.GetString("DeleteExEventSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------
        ///--  Parms:
        ///--    {0} - Trace file prefix
        ///--
        ///
        ///DECLARE @TracePath nvarchar(1024)
        ///DECLARE @traceID int 
        ///DECLARE @rc int 
        ///DECLARE @cmd sysname
        ///DECLARE @curconfig int 
        ///
        ///----------------------------------------------------------------------------------------
        ///--  The IO path to tempdb on high-end systems will be SAN, hence we should put the trace data files there too rather than on a local drive  
        ///--
        ///USE tempdb
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DeleteTraceUsingCmdShell {
            get {
                return ResourceManager.GetString("DeleteTraceUsingCmdShell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------
        ///--  Parms:
        ///--    {0} - Trace file prefix
        ///--
        ///
        ///DECLARE @TracePath nvarchar(1024)
        ///DECLARE @traceID int 
        ///DECLARE @rc int 
        ///
        ///----------------------------------------------------------------------------------------
        ///--  The IO path to tempdb on high-end systems will be SAN, hence we should put the trace data files there too rather than on a local drive  
        ///--
        ///USE tempdb
        ///select @TracePath = left(physical_name, len(phy [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetTraceFilename {
            get {
                return ResourceManager.GetString("GetTraceFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT MAX(online_scheduler_count) AS &apos;MaxOnlineSchedulerCount&apos; FROM sys.dm_os_nodes WHERE (node_id &lt; 64).
        /// </summary>
        internal static string MaxOnlineSchedulerCountQuery {
            get {
                return ResourceManager.GetString("MaxOnlineSchedulerCountQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///DECLARE @rc int 
        ///
        ///exec @rc = sp_trace_setstatus @TraceID, 1 -- start the trace
        ///if @rc &lt;&gt; 0 begin RAISERROR(&apos;sp_trace_setstatus @TraceID, 1&apos;, 16, 1) end
        ///waitfor delay &apos;{0}&apos;
        ///exec @rc = sp_trace_setstatus @TraceID, 0 -- stop the trace
        ///if @rc &lt;&gt; 0 begin RAISERROR(&apos;sp_trace_setstatus @TraceID, 0&apos;, 16, 1) end
        ///
        ///
        ///.
        /// </summary>
        internal static string SampleTrace {
            get {
                return ResourceManager.GetString("SampleTrace", resourceCulture);
            }
        }
    }
}
