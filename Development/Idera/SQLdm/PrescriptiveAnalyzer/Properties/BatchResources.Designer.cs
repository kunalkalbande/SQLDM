//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idera.SQLdm.PrescriptiveAnalyzer.Properties
{
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BatchResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BatchResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Idera.SQLdm.PrescriptiveAnalyzer.Properties.BatchResources", typeof(BatchResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use {Database};
        ///
        ///declare @dbid int;
        ///declare @objid int;
        ///set @dbid = db_id();
        ///set @objid = object_id({SchemaTable});
        ///
        ///-- We will not make the index recommendation for system tables.
        ///if (objectproperty(@objid, &apos;isusertable&apos;) = 0) 
        ///begin 
        ///	select [AllowRecommendation]=&apos;Not a user table&apos;; 
        ///	return; 
        ///end;
        ///
        ///-- We will not make the index recommendation for ms tables.
        ///if (objectproperty(@objid, &apos;IsMSShipped&apos;) = 1) 
        ///begin 
        ///	select [AllowRecommendation]=&apos;MSShipped table&apos;; 
        ///	return; 
        ///end;
        ///
        ///-- if the table writes are m [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AllowIndexRecommendation {
            get {
                return ResourceManager.GetString("AllowIndexRecommendation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--	collect backup and recovery information for analysis.
        ///--
        ///--	Collection boot page information for the database.
        ///--
        ///declare @dbinfo table ([ParentObject] varchar(255), [Object] varchar(255), [Field] varchar(255), [Value] varchar(255));
        ///declare @outputTable table (Name varchar(64), Value varchar(32));
        ///
        ///insert into @dbinfo exec sp_executesql N&apos;dbcc dbinfo with tableresults&apos;;
        ///
        ///insert into @outputTable(Name, Value [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BackupAndRecovery {
            get {
                return ResourceManager.GetString("BackupAndRecovery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use [tempdb] -- switch to tempdb in case master is backlevel
        ///
        ///declare @processes table
        ///	(spid int,
        ///	 blocker int,
        ///	 waittime bigint,
        ///	 dbid int,
        ///	 hostname sysname,
        ///	 program_name sysname,
        ///	 loginame sysname,
        ///	 script nvarchar(max),
        ///	 waitresource nvarchar(2048))
        ///
        ///insert into @processes	 
        ///select  s.spid,
        ///		s.blocked, 
        ///		s.waittime,
        ///		s.dbid,
        ///		s.hostname,
        ///		s.program_name, 
        ///	    s.loginame,
        ///	    qry.text,
        ///	    w.resource_description
        ///	from sys.sysprocesses s
        ///	left outer join sys.dm_os_waiting_tasks w
        ///	on s.s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BlockingProcesses {
            get {
                return ResourceManager.GetString("BlockingProcesses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///create nonclustered index {IndexName}				-- index name
        ///                    on {TableName}					-- table name
        ///                    {Columns}						-- (col,...n) include (col,...n)
        ///                    with statistics_only = 0  ON [PRIMARY]
        ///                    --with statistics_only = -1
        /// select indexproperty(object_id({TableNameSafe}), {IndexNameSafe}, &apos;IndexID&apos;)
        ///.
        /// </summary>
        internal static string CreateNonClusteredIndex {
            get {
                return ResourceManager.GetString("CreateNonClusteredIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use [tempdb];
        ///select 
        ///	[DatabaseName]=db_name(fs.database_id),
        ///	[DatabaseID]=fs.database_id, 
        ///	[IO]=sum(fs.num_of_bytes_read + fs.num_of_bytes_written),
        ///	[Encrypted]=d.is_encrypted
        ///	from sys.dm_io_virtual_file_stats(null, null) fs
        ///	left outer join sys.databases d on fs.database_id = d.database_id
        ///	group by fs.database_id, d.is_encrypted
        ///.
        /// </summary>
        internal static string DatabaseIOBytes2008 {
            get {
                return ResourceManager.GetString("DatabaseIOBytes2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  return database properties.
        ///--
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///select serverproperty(&apos;Edition&apos;)
        ///
        ///select
        ///name
        ///	,is_read_only
        ///	,is_auto_create_stats_on
        ///	,auto_update_stats = is_auto_update_stats_on | is_auto_update_stats_async_on
        ///	,compatibility_level
        ///	,state
        ///	,state_desc
        ///	,auto_close = databasepropertyex(name,&apos;IsAutoClose&apos;)
        ///	,is_cursor_close_on_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DBProperties {
            get {
                return ResourceManager.GetString("DBProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  return database properties.
        ///--
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///select serverproperty(&apos;Edition&apos;)
        ///
        ///select
        ///name
        ///	,is_read_only
        ///	,is_auto_create_stats_on
        ///	,auto_update_stats = is_auto_update_stats_on | is_auto_update_stats_async_on
        ///	,compatibility_level
        ///	,state
        ///	,state_desc
        ///	,auto_close = databasepropertyex(name,&apos;IsAutoClose&apos;)
        ///	,is_cursor_close_on_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DBProperties2012 {
            get {
                return ResourceManager.GetString("DBProperties2012", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///if (db_name() not in (&apos;master&apos;,&apos;msdb&apos;,&apos;model&apos;,&apos;tempdb&apos;))
        ///begin
        ///	select
        ///		&apos;GuestHasDatabaseAccess&apos;, value = count(1)
        ///	from
        ///		sysusers
        ///	where
        ///		name = &apos;guest&apos;
        ///		and hasdbaccess = 1
        ///
        ///	declare @dbowner sysname,@isTrustworthy bit,@isadmin bit
        ///	select  @dbowner = suser_sname(owner_sid), @isTrustworthy = is_trustworthy_on,@isadmin = 0
        ///	from sys.databases with (readcommitted)
        ///	where name = db_name()
        ///	if (isnull(@isTrustworthy,0) &gt; 0)
        ///	begin
        ///		select @isadmin = is_srvrolemember(&apos;sysadmin&apos;,@dbowner)
        ///		if (isnull(@is [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DBSecurity {
            get {
                return ResourceManager.GetString("DBSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///	[DatabaseName]=db_name(), 
        ///	[ObjectID]=object_id, 
        ///	[TableName]=object_name(object_id), 
        ///	[IndexName]=name, 
        ///	index_id, 
        ///	is_disabled, 
        ///	is_hypothetical  
        ///	from sys.indexes 
        ///		where (objectproperty(object_id, &apos;IsMsShipped&apos;) = 0)
        ///		and (indexproperty(object_id, name, &apos;IsFulltextKey&apos;) &lt;&gt; 1)
        ///		and (is_disabled = 1 or is_hypothetical = 1).
        /// </summary>
        internal static string DisabledIndexes {
            get {
                return ResourceManager.GetString("DisabledIndexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to set lock_timeout 1000;
        ///
        ///alter index {IndexName}
        ///     on {TableName} disable;		
        ///.
        /// </summary>
        internal static string DisableIndex {
            get {
                return ResourceManager.GetString("DisableIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @daysUp int;
        ///select @daysUp = datediff(dd,create_date,getdate()) from sys.databases where name = &apos;tempdb&apos;;
        ///if @daysUp &lt;= 0 set @daysUp = 1;
        ///
        ///select top (100)
        ///	[Database]=db_name(mid.database_id),
        ///	[ObjectID]=mid.object_id,
        ///	[TotalCost]=(migs.avg_total_user_cost*migs.avg_user_impact)*(migs.user_scans+migs.user_seeks), 
        ///	[Impact]=((migs.avg_total_user_cost*migs.avg_user_impact)*(migs.user_scans+migs.user_seeks))/@daysUp,
        ///	migs.avg_total_user_cost,
        ///	migs.avg_user_impact,
        ///	migs.user_scans,
        ///	migs.user_se [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DMVMissingIndexes {
            get {
                return ResourceManager.GetString("DMVMissingIndexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to drop index {IndexName}
        ///     on {TableName};		
        ///.
        /// </summary>
        internal static string DropIndex {
            get {
                return ResourceManager.GetString("DropIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use [tempdb];
        ///select 
        ///	[DatabaseID]=d.database_id, 
        ///	[DatabaseName]=d.name,
        ///	[Algorithm]=e.key_algorithm, 
        ///	[KeyLength]=e.key_length 
        ///	from sys.databases d
        ///	left outer join sys.dm_database_encryption_keys e on d.database_id = e.database_id
        ///	where d.is_encrypted = 1
        ///	and e.encryption_state &gt; 1;
        ///.
        /// </summary>
        internal static string EncryptedDatabases2008 {
            get {
                return ResourceManager.GetString("EncryptedDatabases2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--	This script will enumerate the wmi object information.
        ///--
        ///--  The following is a list of named substitution variables used in this batch.  Each
        ///--  variable will be wrapped in {} to indicate it is a named variable that should be substituted
        ///--  for a different value.
        ///--
        ///--  Named variables:
        ///--    ScriptFilename     - script to perform the wmi enumeration
        ///--    OutputFilename     - result of wmi enumeration
        ///--   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EnumWMI {
            get {
                return ResourceManager.GetString("EnumWMI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exec @rc = sp_OAMethod @pFile, &apos;WriteLine&apos;, Null, &apos;   textFile.WriteLine(&quot;{WMIPropertyName}: &quot; &amp; objItem.{WMIPropertyName})&apos;.
        /// </summary>
        internal static string EnumWMIProperties {
            get {
                return ResourceManager.GetString("EnumWMIProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --  Based on the &apos;Estimating the Size of a Nonclustered Index&apos; from BOL
        ///--  http://msdn.microsoft.com/en-us/library/ms190620.aspx
        ///--
        ///-- Variable replacement:
        ///--	Database       - Database name
        ///--	Table          - Table name
        ///--  NonUniqueIndex - Is the new index unique? (1=true 0=false)
        ///--  FillFactor     - The fill factor for the new index
        ///--  KeyColumns     - The key columns of the new index
        ///--  IncludeColumns - The include columns of the new index
        ///
        ///use {Database};
        ///
        ///declare @key_columns table (col int);
        ///dec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EstimateNonclusteredIndexSize {
            get {
                return ResourceManager.GetString("EstimateNonclusteredIndexSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to insert into @include_columns(col) values ({Column});.
        /// </summary>
        internal static string EstimateNonclusteredIndexSizeIncludeColumns {
            get {
                return ResourceManager.GetString("EstimateNonclusteredIndexSizeIncludeColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to insert into @key_columns(col) values ({Column});.
        /// </summary>
        internal static string EstimateNonclusteredIndexSizeKeyColumns {
            get {
                return ResourceManager.GetString("EstimateNonclusteredIndexSizeKeyColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  Test the most active indexes within the database to see if they are fragmented.
        ///--  Currently the top 10 most active indexes based on user reads that are larger than 1000 
        ///--  pages will be tested to see if they are more than 30% fragmented.  Any found matching this 
        ///--  will be returned.
        ///----------------------------------------------------------------------------------------------
        ///
        ///declare @indexes table (obj [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FragmentedIndexes {
            get {
                return ResourceManager.GetString("FragmentedIndexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select sum(cast(size_in_bytes as bigint)) from sys.dm_exec_cached_plans 
        ///	where usecounts = 1 
        ///	and objtype = &apos;Adhoc&apos;;
        ///.
        /// </summary>
        internal static string GetAdhocCachedPlanBytes {
            get {
                return ResourceManager.GetString("GetAdhocCachedPlanBytes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @dbname sysname
        ///declare @dbid int
        ///declare @dbio bigint
        ///declare @dynsql nvarchar(4000)
        ///
        ///create table #result ([database_name] sysname,
        ///					  [table_name] sysname, 
        ///		  			  [schema_name] sysname, 
        ///					  [index_name] sysname null, 
        ///					  [current] int,
        ///					  [compressed] int);
        ///
        ///declare dblist cursor for 
        ///	select top 3 database_id, sum(num_of_bytes_read + num_of_bytes_written) 
        ///		from sys.dm_io_virtual_file_stats(null, null) 
        ///		where database_id &gt; 4
        ///		group by database_id
        ///		order by 2 desc
        ///
        ///open db [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetCompressionCandidates {
            get {
                return ResourceManager.GetString("GetCompressionCandidates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  Return index column information.
        ///--
        ///--  Variables:
        ///--    Table - The table to return index column information for.
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///use {Database};
        ///declare @objid int;
        ///set @objid = object_id({SchemaTable});
        ///select 
        ///	[IndexName]=i.name, 
        ///	[IndexId]=i.index_id,
        ///	[Columns]=(select c.name [data()] from sys.index_columns as ic
        ///			left [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetIndexColumnsForTable {
            get {
                return ResourceManager.GetString("GetIndexColumnsForTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select SUM(awe_allocated_kb) from sys.dm_os_memory_clerks;.
        /// </summary>
        internal static string GetLockedPageKB2005 {
            get {
                return ResourceManager.GetString("GetLockedPageKB2005", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select locked_page_allocations_kb from sys.dm_os_process_memory;.
        /// </summary>
        internal static string GetLockedPageKB2008 {
            get {
                return ResourceManager.GetString("GetLockedPageKB2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @autoshrink table([dbid] int, dbname sysname, is_auto_shrink_on bit, primary key ([dbid]))
        ///
        ///insert into @autoshrink
        ///select 
        ///	i.database_id, 
        ///	d.name,
        ///	case when i.num_of_writes &gt; 0 then d.is_auto_shrink_on else 0 end
        ///from sys.dm_io_virtual_file_stats(null, null) i
        ///left join sys.databases d on d.database_id = i.database_id
        ///where i.file_id = 1
        ///
        ///select 
        ///m.database_id,
        ///a.dbname,
        ///file_name=m.[name],
        ///m.physical_name,
        ///m.[file_id],
        ///m.[type],
        ///m.type_desc,
        ///size=i.size_on_disk_bytes,
        ///initial_size=m.[size],
        ///m.m [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetMasterFiles {
            get {
                return ResourceManager.GetString("GetMasterFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  Return the number of times a table is updated per second.
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///declare @objid int;
        ///declare @dbid int;
        ///declare @minUp int;
        ///declare @updates bigint;
        ///
        ///set @dbid = db_id({Database});
        ///set @objid = object_id({SchemaTable});
        ///
        ///select @minUp = datediff(mi,create_date,getdate()) from sys.databases where name = &apos;tempdb&apos;;
        ///if @min [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetTableUpdatesPerMin {
            get {
                return ResourceManager.GetString("GetTableUpdatesPerMin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  Return the number of times a table is updated per second.
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///declare @objid int;
        ///declare @dbid int;
        ///declare @minUp int;
        ///declare @updates bigint;
        ///
        ///set @dbid = db_id({Database});
        ///set @objid = object_id({SchemaTable});
        ///
        ///select @minUp = datediff(mi,create_date,getdate()) from sys.databases where name = &apos;tempdb&apos;;
        ///if @min [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetTableUpdatesPerSec {
            get {
                return ResourceManager.GetString("GetTableUpdatesPerSec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--	This script will 
        ///--
        ///--  The following is a list of named substitution variables used in this batch.  Each
        ///--  variable will be wrapped in {} to indicate it is a named variable that should be substituted
        ///--  for a different value.
        ///--
        ///--  Named variables:
        ///--    WMIClassName       - the wmi class to get the properties of
        ///--    OLEContext         - the ole context (in/both/out of process)
        ///--    WMIClassProperties  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetWMIObjProps {
            get {
                return ResourceManager.GetString("GetWMIObjProps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exec @rc = sp_OAGetProperty @pWmiObj, &apos;{WMIPropertyName}&apos;, @bigIntVal output
        ///if @rc &lt;&gt; 0 begin set @errObj = @pWmiObj set @errID = &apos;GetProperty(BigInt - {WMIPropertyName})&apos; goto ReportError end
        ///insert into @outputTable(Name, Value) select &apos;{WMIPropertyName}&apos;, @bigIntVal.
        /// </summary>
        internal static string GetWMIObjPropsBigInt {
            get {
                return ResourceManager.GetString("GetWMIObjPropsBigInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exec @rc = sp_OAGetProperty @pWmiObj, &apos;{WMIPropertyName}&apos;, @intVal output
        ///if @rc &lt;&gt; 0 begin set @errObj = @pWmiObj set @errID = &apos;GetProperty(Int - {WMIPropertyName})&apos; goto ReportError end
        ///insert into @outputTable(Name, Value) select &apos;{WMIPropertyName}&apos;, @intVal.
        /// </summary>
        internal static string GetWMIObjPropsInt {
            get {
                return ResourceManager.GetString("GetWMIObjPropsInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exec @rc = sp_OAGetProperty @pWmiObj, &apos;{WMIPropertyName}&apos;, @stringVal output
        ///if @rc &lt;&gt; 0 begin set @errObj = @pWmiObj set @errID = &apos;GetProperty(String - {WMIPropertyName})&apos; goto ReportError end
        ///insert into @outputTable(Name, Value) select &apos;{WMIPropertyName}&apos;, @stringVal.
        /// </summary>
        internal static string GetWMIObjPropsString {
            get {
                return ResourceManager.GetString("GetWMIObjPropsString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @dbname sysname
        ///declare @dbid int
        ///declare @dbio bigint
        ///declare @dbsize bigint
        ///declare @dynsql nvarchar(4000)
        ///
        ///create table #result ([database_name] sysname,
        ///					  [table_name] sysname, 
        ///					  [index_name] sysname,
        ///		  			  [schema_name] sysname, 
        ///					  [fillfactor] int,
        ///					  [datasizeinmb] int,
        ///					  [indexsizeinmb] int);
        ///
        ///declare dblist cursor for 
        ///	select top 10  
        ///		vfs.database_id, 
        ///		sum(vfs.num_of_bytes_read + vfs.num_of_bytes_written), 
        ///		sum(case when m.type = 0 then vfs.size_on_disk_by [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetWorstFillFactorIndexes {
            get {
                return ResourceManager.GetString("GetWorstFillFactorIndexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @dbid int
        ///select @dbid = db_id()
        ///
        ///select top (100) 
        ///	[DatabaseName]=db_name(), 
        ///	[ObjectID]=s.object_id,
        ///	[TableName]=object_name(s.object_id), 
        ///	[IndexName]=i.name,
        ///	[UserReads]=user_seeks + user_scans + user_lookups,
        ///	[UserWrites]=user_updates,
        ///	[WritesPerRead]=case (s.user_seeks + s.user_scans + s.user_lookups) when 0 then s.user_updates else cast((1.0 * s.user_updates) / (s.user_seeks + s.user_scans + s.user_lookups) as numeric(15,2)) end,
        ///	[DaysSinceTableCreated]=cast(isnull((select datediff(d, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HighIndexUpdates {
            get {
                return ResourceManager.GetString("HighIndexUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--  Test for index contention.
        ///----------------------------------------------------------------------------------------------
        ///
        ///declare @dbid int
        ///select @dbid = db_id()
        ///
        ///-- return the top 10 indexes that have page latch contention
        ///select top 10
        ///	[DatabaseName]=db_name(), 
        ///	[ObjectID]=s.object_id, 
        ///	[TableName]=object_name(s.object_id), 
        ///	[IndexName]=i.name,
        ///    [Partition]=s.partition_number,
        ///	[PageLatchWaitCount]= [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IndexContention {
            get {
                return ResourceManager.GetString("IndexContention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @lastruninfo table(instance_id int, job_id uniqueidentifier);
        ///declare @results table(job_name sysname, last_run_duration int, max_run_duration int, avg_run_duration int);
        ///declare @loop int;
        ///declare @instance_id int;
        ///declare @last_run_duration int;
        ///declare @max_run_duration int;
        ///declare @job_id uniqueidentifier;
        ///
        ///insert into @lastruninfo
        ///	select top 1000
        ///		(select top 1 
        ///			case when sjh.run_duration &gt; 2500 then sjh.instance_id else 0 end
        ///			from msdb..sysjobhistory sjh 
        ///			where step_id = 0 
        ///				and [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LongRunningJobs {
            get {
                return ResourceManager.GetString("LongRunningJobs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @start datetime
        ///declare @now datetime
        ///
        ///set @now = getdate()
        ///set @start = dateadd(minute,-10,@now)
        ///
        ///select	dtst.session_id, 
        ///		dtst.transaction_id, 
        ///		dtat.transaction_begin_time,
        ///		transaction_duration=@now - dtat.transaction_begin_time,
        ///		db.name,
        ///		sp.loginame,
        ///		sp.hostname,
        ///		sp.program_name,
        ///		sp.stmt_start,
        ///		sp.stmt_end,
        ///		s2.text
        ///  from sys.dm_tran_session_transactions dtst
        ///	join sys.dm_tran_active_transactions dtat on dtat.transaction_id = dtst.transaction_id
        ///	left outer join sys.sysprocess [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LongRunningTransactions {
            get {
                return ResourceManager.GetString("LongRunningTransactions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--
        ///--
        ///----------------------------------------------------------------------------------------------
        ///
        ///use tempdb;
        ///
        ///declare 
        ///	@servername varchar(255),
        ///	@sysperfinfoname varchar(255),
        ///	@slashpos int;
        ///
        ///declare @outputTable table (NodeName varchar(128), PLE bigint, TargetPages bigint);
        ///
        ///select @servername = cast(serverproperty(&apos;servername&apos;) as nvarchar(255))
        ///
        ///select @servername = upper(@servername)
        ///
        ///select @slashp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NUMANodeCounters {
            get {
                return ResourceManager.GetString("NUMANodeCounters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--	collect stats information for a database
        ///--
        ///--  The rowmodctr value in 2005/2008 will frequently help you determine when to update statistics 
        ///--  because the behavior is reasonably close to the results of earlier versions.
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///select 
        ///	[Database]=db_name(),
        ///	[ObjectID]=i.id, 
        ///	[Table]=object_name(i.id), 
        ///	[Name]=i.na [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OutOfDateStats {
            get {
                return ResourceManager.GetString("OutOfDateStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @dbid int;
        ///select @dbid = db_id();
        ///
        ///------------------------------------------------
        ///-- return duplicate index information
        ///--
        ///;with indexcols as
        ///(
        ///	select 
        ///		object_id, 
        ///		index_id, 
        ///		name,
        ///		is_unique,
        ///		is_primary_key,
        ///		(select cast(c.column_id as varchar) + case c.is_descending_key when 1 then &apos;D&apos; else &apos;A&apos; end  as [data()] -- pull key columns
        ///			from sys.index_columns as c
        ///			where c.object_id = i.object_id
        ///			and c.index_id = i.index_id
        ///            and c.is_included_column = 0
        ///			order by c.ke [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OverlappingIndexes {
            get {
                return ResourceManager.GetString("OverlappingIndexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @dbid int;
        ///select @dbid = db_id();
        ///
        ///------------------------------------------------
        ///-- return duplicate index information
        ///--
        ///;with indexcols as
        ///(
        ///	select 
        ///		object_id, 
        ///		index_id, 
        ///		name,
        ///		is_unique,
        ///		is_primary_key,
        ///		has_filter,
        ///		filter_definition,
        ///		(select cast(c.column_id as varchar) + case c.is_descending_key when 1 then &apos;D&apos; else &apos;A&apos; end  as [data()] -- pull key columns
        ///			from sys.index_columns as c
        ///			where c.object_id = i.object_id
        ///			and c.index_id = i.index_id
        ///            and c.is_i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OverlappingIndexes2008 {
            get {
                return ResourceManager.GetString("OverlappingIndexes2008", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use [tempdb]; -- switch to tempdb in case master is backlevel
        ///
        ///;with xmlnamespaces 
        ///   (default &apos;http://schemas.microsoft.com/sqlserver/2004/07/showplan&apos;) 
        ///select top 100
        ///   stmt.value(&apos;(@StatementText)[1]&apos;, &apos;varchar(max)&apos;) as Text, 
        ///   stmt.value(&apos;(@StatementEstRows)[1]&apos;, &apos;varchar(max)&apos;) as EstRows
        ///from sys.dm_exec_cached_plans as cp 
        ///    cross apply sys.dm_exec_query_plan(plan_handle) as qp 
        ///    cross apply query_plan.nodes(&apos;/ShowPlanXML/BatchSequence/Batch/Statements/StmtSimple&apos;) as batch(stmt) 
        ///.
        /// </summary>
        internal static string QueryPlanEstRows {
            get {
                return ResourceManager.GetString("QueryPlanEstRows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @traces table(traceid int, [value] sql_variant, eventid int, columnid int)
        ///
        ///insert into @traces
        ///select i.traceid,i.value,eventid,columnid
        ///from ::fn_trace_getinfo(0) i
        ///cross apply ::fn_trace_geteventinfo(i.traceid)
        ///where (eventid = 148) 
        ///	and i.property = 2
        ///	and columnid in (1,12,14,27)
        ///	and [value] is not null
        ///	
        ///if (@@rowcount &lt;&gt; 0)
        ///begin
        ///	declare @tracefile nvarchar(4000)
        ///	select top 1 @tracefile = cast([value] as nvarchar(4000)) 
        ///		from @traces
        ///		where cast([value] as nvarchar(4000)) like &apos;%SQLdrD [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ReadDeadlockTrace {
            get {
                return ResourceManager.GetString("ReadDeadlockTrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///
        ///use tempdb;
        ///
        ///declare 
        ///	@servername varchar(255), 
        ///	@sysperfinfoname varchar(255),
        ///	@slashpos int;
        ///
        ///declare @outputTable table (Name varchar(64), Value varchar(32));
        ///
        ///select @servername = cast(serverproperty(&apos;servername&apos;) as nvarchar(255))
        ///
        ///select @servername = upper(@servername) 
        ///
        ///select @slashpos = charindex( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SampleServerResources {
            get {
                return ResourceManager.GetString("SampleServerResources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @dbcccommand nvarchar(255)
        ///declare @tracesettings table(TraceFlag int, [Status] bit, [Global] bit, Session bit)
        ///declare @global_trace_flag int
        ///
        ///-- get the status of the deadlock trace flags
        ///set @dbcccommand = &apos;DBCC TRACESTATUS (1204, 1222, -1) WITH NO_INFOMSGS&apos;
        ///Insert into @tracesettings
        ///execute (@dbcccommand)
        ///
        ///-- select best flag in case both are enabled
        ///select top 1 @global_trace_flag = TraceFlag from @tracesettings 
        ///	where Global = 1 
        ///	order by TraceFlag desc
        ///	
        ///select @global_trace_flag
        ///
        ///if (@glo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScanLogForDeadlocks {
            get {
                return ResourceManager.GetString("ScanLogForDeadlocks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use msdb;
        ///select 
        ///	name,
        ///	value,
        ///	value_in_use,
        ///	is_dynamic
        ///from 
        ///	master.sys.configurations 
        ///where 
        ///	(is_dynamic = 0 and value != value_in_use)
        ///	or configuration_id in 
        ///	(
        ///	106 -- locks
        ///	,114 -- disallow results from triggers
        ///	,503 -- max worker threads
        ///	,505 -- network packet size (B)
        ///	,1541 -- query wait (s)
        ///	,1562 -- clr enabled
        ///	,1563 -- max full-text crawl range
        ///	,1568 -- default trace enabled
        ///	,1569 -- blocked process threshold (s)
        ///	,1582 -- access check cache bucket count
        ///	,1583 -- access check cach [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerConfiguration {
            get {
                return ResourceManager.GetString("ServerConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use tempdb;
        ///
        ///declare @curconfig int;
        ///declare @outputTable table (Name varchar(64), Value varchar(32));
        ///
        ///insert into @outputTable(Name, Value) SELECT &apos;ProductVersion&apos;, CAST(SERVERPROPERTY(&apos;productversion&apos;) AS varchar(32))
        ///
        ///if (LEFT(CAST(SERVERPROPERTY(&apos;productversion&apos;) AS varchar(32)), 1) &lt;&gt; &apos;8&apos;)
        ///begin
        ///	select @curconfig = cast(value_in_use as int) from  
        ///		sys.configurations 
        ///		where configuration_id = 16388 -- Enable or disable Ole Automation Procedures
        ///
        ///	if (isnull(@curconfig,1) &gt; 0)
        ///		select @curconfig = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerOverview {
            get {
                return ResourceManager.GetString("ServerOverview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///use tempdb;
        ///
        ///declare @outputTable table (Name varchar(64), Value varchar(32));
        ///
        ///declare @tempversion table (i int, Name nvarchar(100), Internal_Value bigint, Character_Value nvarchar(100));
        ///insert into @tempversion execute xp_msver &apos;WindowsVersion&apos;;
        ///
        ///insert into @outputTable(Name, Value) select &apos;WindowsVersion&apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerProperties {
            get {
                return ResourceManager.GetString("ServerProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ----------------------------------------------------------------------------------------------
        ///--
        ///--
        ///--	
        ///----------------------------------------------------------------------------------------------
        ///use tempdb;
        ///
        ///declare @outputTable table (Name varchar(64), Value varchar(32));
        ///
        ///declare @tempversion table (i int, Name nvarchar(100), Internal_Value bigint, Character_Value nvarchar(100));
        ///insert into @tempversion execute xp_msver &apos;WindowsVersion&apos;;
        ///
        ///insert into @outputTable(Name, Value) select &apos;WindowsVersion&apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerProperties2012 {
            get {
                return ResourceManager.GetString("ServerProperties2012", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///[DatabaseName]=db_name(),
        ///[ObjectID]=asm.object_id,
        ///[ObjectName]=object_name(asm.object_id),
        ///[ObjectType]=ao.type_desc,
        ///[SQL]=asm.definition, 
        ///[uses_ansi_nulls]=asm.uses_ansi_nulls, 
        ///[uses_quoted_identifier]=asm.uses_quoted_identifier
        ///from sys.all_sql_modules asm
        ///inner join sys.all_objects ao on ao.object_id = asm.object_id
        ///where ao.type in (&apos;P&apos;,&apos;V&apos;) and is_ms_shipped = 0 and 
        ///(uses_ansi_nulls = 0 or uses_quoted_identifier = 0)
        ///.
        /// </summary>
        internal static string SQLModuleOptions {
            get {
                return ResourceManager.GetString("SQLModuleOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use tempdb;
        ///
        ///select 
        ///      t.wait_type, 
        ///      t.wait_duration_ms,
        ///      t.session_id, 
        ///      t.resource_description,
        ///      s.program_name,
        ///      b.sql_handle,
        ///      b.statement_start_offset,
        ///      b.statement_end_offset,
        ///      st.text
        ///      from sys.dm_os_waiting_tasks t
        ///      left join sys.dm_exec_requests b on t.waiting_task_address = b.task_address 
        ///      left join sys.dm_exec_sessions s on b.session_id = s.session_id
        ///      outer apply sys.dm_exec_sql_text (b.sql_handle) st
        ///      where b.sql_handle is n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WaitingBatches {
            get {
                return ResourceManager.GetString("WaitingBatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use tempdb;
        ///
        ///select &apos;AsOf&apos;, convert(varchar,getdate(),21);
        ///select 
        ///	wait_type, 
        ///	wait_time_ms, 
        ///	signal_wait_time_ms 
        ///	from sys.dm_os_wait_stats										
        ///    where wait_type not in (
        ///        &apos;CLR_SEMAPHORE&apos;, &apos;LAZYWRITER_SLEEP&apos;, &apos;RESOURCE_QUEUE&apos;, &apos;SLEEP_TASK&apos;,
        ///        &apos;SLEEP_SYSTEMTASK&apos;, &apos;SQLTRACE_BUFFER_FLUSH&apos;, &apos;WAITFOR&apos;, &apos;LOGMGR_QUEUE&apos;,
        ///        &apos;CHECKPOINT_QUEUE&apos;, &apos;REQUEST_FOR_DEADLOCK_SEARCH&apos;, &apos;XE_TIMER_EVENT&apos;, &apos;BROKER_TO_FLUSH&apos;,
        ///        &apos;BROKER_TASK_STOP&apos;, &apos;CLR_MANUAL_EVENT&apos;, &apos;CLR_AUTO_EVENT&apos;, &apos;DISPATCH [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WaitStats {
            get {
                return ResourceManager.GetString("WaitStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use tempdb;
        ///
        ///;with querystats as
        ///(
        ///	select top (200)
        ///        [execution_count]=min(qs.execution_count),
        ///        [total_logical_reads]=sum(qs.total_logical_reads),
        ///        [min_logical_reads]=sum(qs.min_logical_reads),
        ///        [max_logical_reads]=sum(qs.max_logical_reads),
        ///        [total_logical_writes]=sum(qs.total_logical_writes),
        ///        [min_logical_writes]=sum(qs.min_logical_writes),
        ///        [max_logical_writes]=sum(qs.max_logical_writes),
        ///        [total_worker_time]=sum(qs.total_worker_time),
        ///        [ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WorstPerformingTSQL {
            get {
                return ResourceManager.GetString("WorstPerformingTSQL", resourceCulture);
            }
        }
    }
}
