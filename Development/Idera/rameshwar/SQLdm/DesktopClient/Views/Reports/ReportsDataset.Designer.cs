//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Idera.SQLdm.DesktopClient.Views.Reports {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ReportsDataset")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ReportsDataset : System.Data.DataSet {
        
        private p_GetProcessorReportTempDataTable tablep_GetProcessorReportTemp;
        
        private p_GetDiskReportTempDataTable tablep_GetDiskReportTemp;
        
        private p_GetMemoryReportTempDataTable tablep_GetMemoryReportTemp;
        
        private p_GetSessionsReportTempDataTable tablep_GetSessionsReportTemp;
        
        private p_GetOverviewReportTempDataTable tablep_GetOverviewReportTemp;
        
        private p_GetDatabaseStatisticsReportTempDataTable tablep_GetDatabaseStatisticsReportTemp;
        
        private p_GetDatabaseGrowthReportTempDataTable tablep_GetDatabaseGrowthReportTemp;
        
        private p_GetTableGrowthReportTempDataTable tablep_GetTableGrowthReportTemp;
        
        private p_GetTableReorgReportTempDataTable tablep_GetTableReorgReportTemp;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReportsDataset() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ReportsDataset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["p_GetProcessorReportTemp"] != null)) {
                    base.Tables.Add(new p_GetProcessorReportTempDataTable(ds.Tables["p_GetProcessorReportTemp"]));
                }
                if ((ds.Tables["p_GetDiskReportTemp"] != null)) {
                    base.Tables.Add(new p_GetDiskReportTempDataTable(ds.Tables["p_GetDiskReportTemp"]));
                }
                if ((ds.Tables["p_GetMemoryReportTemp"] != null)) {
                    base.Tables.Add(new p_GetMemoryReportTempDataTable(ds.Tables["p_GetMemoryReportTemp"]));
                }
                if ((ds.Tables["p_GetSessionsReportTemp"] != null)) {
                    base.Tables.Add(new p_GetSessionsReportTempDataTable(ds.Tables["p_GetSessionsReportTemp"]));
                }
                if ((ds.Tables["p_GetOverviewReportTemp"] != null)) {
                    base.Tables.Add(new p_GetOverviewReportTempDataTable(ds.Tables["p_GetOverviewReportTemp"]));
                }
                if ((ds.Tables["p_GetDatabaseStatisticsReportTemp"] != null)) {
                    base.Tables.Add(new p_GetDatabaseStatisticsReportTempDataTable(ds.Tables["p_GetDatabaseStatisticsReportTemp"]));
                }
                if ((ds.Tables["p_GetDatabaseGrowthReportTemp"] != null)) {
                    base.Tables.Add(new p_GetDatabaseGrowthReportTempDataTable(ds.Tables["p_GetDatabaseGrowthReportTemp"]));
                }
                if ((ds.Tables["p_GetTableGrowthReportTemp"] != null)) {
                    base.Tables.Add(new p_GetTableGrowthReportTempDataTable(ds.Tables["p_GetTableGrowthReportTemp"]));
                }
                if ((ds.Tables["p_GetTableReorgReportTemp"] != null)) {
                    base.Tables.Add(new p_GetTableReorgReportTempDataTable(ds.Tables["p_GetTableReorgReportTemp"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetProcessorReportTempDataTable p_GetProcessorReportTemp {
            get {
                return this.tablep_GetProcessorReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetDiskReportTempDataTable p_GetDiskReportTemp {
            get {
                return this.tablep_GetDiskReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetMemoryReportTempDataTable p_GetMemoryReportTemp {
            get {
                return this.tablep_GetMemoryReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetSessionsReportTempDataTable p_GetSessionsReportTemp {
            get {
                return this.tablep_GetSessionsReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetOverviewReportTempDataTable p_GetOverviewReportTemp {
            get {
                return this.tablep_GetOverviewReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetDatabaseStatisticsReportTempDataTable p_GetDatabaseStatisticsReportTemp {
            get {
                return this.tablep_GetDatabaseStatisticsReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetDatabaseGrowthReportTempDataTable p_GetDatabaseGrowthReportTemp {
            get {
                return this.tablep_GetDatabaseGrowthReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetTableGrowthReportTempDataTable p_GetTableGrowthReportTemp {
            get {
                return this.tablep_GetTableGrowthReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public p_GetTableReorgReportTempDataTable p_GetTableReorgReportTemp {
            get {
                return this.tablep_GetTableReorgReportTemp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ReportsDataset cln = ((ReportsDataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["p_GetProcessorReportTemp"] != null)) {
                    base.Tables.Add(new p_GetProcessorReportTempDataTable(ds.Tables["p_GetProcessorReportTemp"]));
                }
                if ((ds.Tables["p_GetDiskReportTemp"] != null)) {
                    base.Tables.Add(new p_GetDiskReportTempDataTable(ds.Tables["p_GetDiskReportTemp"]));
                }
                if ((ds.Tables["p_GetMemoryReportTemp"] != null)) {
                    base.Tables.Add(new p_GetMemoryReportTempDataTable(ds.Tables["p_GetMemoryReportTemp"]));
                }
                if ((ds.Tables["p_GetSessionsReportTemp"] != null)) {
                    base.Tables.Add(new p_GetSessionsReportTempDataTable(ds.Tables["p_GetSessionsReportTemp"]));
                }
                if ((ds.Tables["p_GetOverviewReportTemp"] != null)) {
                    base.Tables.Add(new p_GetOverviewReportTempDataTable(ds.Tables["p_GetOverviewReportTemp"]));
                }
                if ((ds.Tables["p_GetDatabaseStatisticsReportTemp"] != null)) {
                    base.Tables.Add(new p_GetDatabaseStatisticsReportTempDataTable(ds.Tables["p_GetDatabaseStatisticsReportTemp"]));
                }
                if ((ds.Tables["p_GetDatabaseGrowthReportTemp"] != null)) {
                    base.Tables.Add(new p_GetDatabaseGrowthReportTempDataTable(ds.Tables["p_GetDatabaseGrowthReportTemp"]));
                }
                if ((ds.Tables["p_GetTableGrowthReportTemp"] != null)) {
                    base.Tables.Add(new p_GetTableGrowthReportTempDataTable(ds.Tables["p_GetTableGrowthReportTemp"]));
                }
                if ((ds.Tables["p_GetTableReorgReportTemp"] != null)) {
                    base.Tables.Add(new p_GetTableReorgReportTempDataTable(ds.Tables["p_GetTableReorgReportTemp"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablep_GetProcessorReportTemp = ((p_GetProcessorReportTempDataTable)(base.Tables["p_GetProcessorReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetProcessorReportTemp != null)) {
                    this.tablep_GetProcessorReportTemp.InitVars();
                }
            }
            this.tablep_GetDiskReportTemp = ((p_GetDiskReportTempDataTable)(base.Tables["p_GetDiskReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetDiskReportTemp != null)) {
                    this.tablep_GetDiskReportTemp.InitVars();
                }
            }
            this.tablep_GetMemoryReportTemp = ((p_GetMemoryReportTempDataTable)(base.Tables["p_GetMemoryReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetMemoryReportTemp != null)) {
                    this.tablep_GetMemoryReportTemp.InitVars();
                }
            }
            this.tablep_GetSessionsReportTemp = ((p_GetSessionsReportTempDataTable)(base.Tables["p_GetSessionsReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetSessionsReportTemp != null)) {
                    this.tablep_GetSessionsReportTemp.InitVars();
                }
            }
            this.tablep_GetOverviewReportTemp = ((p_GetOverviewReportTempDataTable)(base.Tables["p_GetOverviewReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetOverviewReportTemp != null)) {
                    this.tablep_GetOverviewReportTemp.InitVars();
                }
            }
            this.tablep_GetDatabaseStatisticsReportTemp = ((p_GetDatabaseStatisticsReportTempDataTable)(base.Tables["p_GetDatabaseStatisticsReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetDatabaseStatisticsReportTemp != null)) {
                    this.tablep_GetDatabaseStatisticsReportTemp.InitVars();
                }
            }
            this.tablep_GetDatabaseGrowthReportTemp = ((p_GetDatabaseGrowthReportTempDataTable)(base.Tables["p_GetDatabaseGrowthReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetDatabaseGrowthReportTemp != null)) {
                    this.tablep_GetDatabaseGrowthReportTemp.InitVars();
                }
            }
            this.tablep_GetTableGrowthReportTemp = ((p_GetTableGrowthReportTempDataTable)(base.Tables["p_GetTableGrowthReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetTableGrowthReportTemp != null)) {
                    this.tablep_GetTableGrowthReportTemp.InitVars();
                }
            }
            this.tablep_GetTableReorgReportTemp = ((p_GetTableReorgReportTempDataTable)(base.Tables["p_GetTableReorgReportTemp"]));
            if ((initTable == true)) {
                if ((this.tablep_GetTableReorgReportTemp != null)) {
                    this.tablep_GetTableReorgReportTemp.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ReportsDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ReportsDataset.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablep_GetProcessorReportTemp = new p_GetProcessorReportTempDataTable();
            base.Tables.Add(this.tablep_GetProcessorReportTemp);
            this.tablep_GetDiskReportTemp = new p_GetDiskReportTempDataTable();
            base.Tables.Add(this.tablep_GetDiskReportTemp);
            this.tablep_GetMemoryReportTemp = new p_GetMemoryReportTempDataTable();
            base.Tables.Add(this.tablep_GetMemoryReportTemp);
            this.tablep_GetSessionsReportTemp = new p_GetSessionsReportTempDataTable();
            base.Tables.Add(this.tablep_GetSessionsReportTemp);
            this.tablep_GetOverviewReportTemp = new p_GetOverviewReportTempDataTable();
            base.Tables.Add(this.tablep_GetOverviewReportTemp);
            this.tablep_GetDatabaseStatisticsReportTemp = new p_GetDatabaseStatisticsReportTempDataTable();
            base.Tables.Add(this.tablep_GetDatabaseStatisticsReportTemp);
            this.tablep_GetDatabaseGrowthReportTemp = new p_GetDatabaseGrowthReportTempDataTable();
            base.Tables.Add(this.tablep_GetDatabaseGrowthReportTemp);
            this.tablep_GetTableGrowthReportTemp = new p_GetTableGrowthReportTempDataTable();
            base.Tables.Add(this.tablep_GetTableGrowthReportTemp);
            this.tablep_GetTableReorgReportTemp = new p_GetTableReorgReportTempDataTable();
            base.Tables.Add(this.tablep_GetTableReorgReportTemp);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetProcessorReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetDiskReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetMemoryReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetSessionsReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetOverviewReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetDatabaseStatisticsReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetDatabaseGrowthReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetTableGrowthReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializep_GetTableReorgReportTemp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ReportsDataset ds = new ReportsDataset();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void p_GetProcessorReportTempRowChangeEventHandler(object sender, p_GetProcessorReportTempRowChangeEvent e);
        
        public delegate void p_GetDiskReportTempRowChangeEventHandler(object sender, p_GetDiskReportTempRowChangeEvent e);
        
        public delegate void p_GetMemoryReportTempRowChangeEventHandler(object sender, p_GetMemoryReportTempRowChangeEvent e);
        
        public delegate void p_GetSessionsReportTempRowChangeEventHandler(object sender, p_GetSessionsReportTempRowChangeEvent e);
        
        public delegate void p_GetOverviewReportTempRowChangeEventHandler(object sender, p_GetOverviewReportTempRowChangeEvent e);
        
        public delegate void p_GetDatabaseStatisticsReportTempRowChangeEventHandler(object sender, p_GetDatabaseStatisticsReportTempRowChangeEvent e);
        
        public delegate void p_GetDatabaseGrowthReportTempRowChangeEventHandler(object sender, p_GetDatabaseGrowthReportTempRowChangeEvent e);
        
        public delegate void p_GetTableGrowthReportTempRowChangeEventHandler(object sender, p_GetTableGrowthReportTempRowChangeEvent e);
        
        public delegate void p_GetTableReorgReportTempRowChangeEventHandler(object sender, p_GetTableReorgReportTempRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetProcessorReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRecords;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnInstanceName;
            
            private System.Data.DataColumn columnResponseTimeInMilliseconds;
            
            private System.Data.DataColumn columnCPUActivityPercentage;
            
            private System.Data.DataColumn columnSqlCompilations;
            
            private System.Data.DataColumn columnSqlRecompilations;
            
            private System.Data.DataColumn columnTableLockEscalations;
            
            private System.Data.DataColumn columnLockWaits;
            
            private System.Data.DataColumn columnPrivilegedTimePercent;
            
            private System.Data.DataColumn columnUserTimePercent;
            
            private System.Data.DataColumn columnProcessorTimePercent;
            
            private System.Data.DataColumn columnProcessorQueueLength;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetProcessorReportTempDataTable() {
                this.TableName = "p_GetProcessorReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetProcessorReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetProcessorReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordsColumn {
                get {
                    return this.columnRecords;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstanceNameColumn {
                get {
                    return this.columnInstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResponseTimeInMillisecondsColumn {
                get {
                    return this.columnResponseTimeInMilliseconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CPUActivityPercentageColumn {
                get {
                    return this.columnCPUActivityPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SqlCompilationsColumn {
                get {
                    return this.columnSqlCompilations;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SqlRecompilationsColumn {
                get {
                    return this.columnSqlRecompilations;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TableLockEscalationsColumn {
                get {
                    return this.columnTableLockEscalations;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LockWaitsColumn {
                get {
                    return this.columnLockWaits;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrivilegedTimePercentColumn {
                get {
                    return this.columnPrivilegedTimePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserTimePercentColumn {
                get {
                    return this.columnUserTimePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProcessorTimePercentColumn {
                get {
                    return this.columnProcessorTimePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProcessorQueueLengthColumn {
                get {
                    return this.columnProcessorQueueLength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetProcessorReportTempRow this[int index] {
                get {
                    return ((p_GetProcessorReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetProcessorReportTempRowChangeEventHandler p_GetProcessorReportTempRowChanging;
            
            public event p_GetProcessorReportTempRowChangeEventHandler p_GetProcessorReportTempRowChanged;
            
            public event p_GetProcessorReportTempRowChangeEventHandler p_GetProcessorReportTempRowDeleting;
            
            public event p_GetProcessorReportTempRowChangeEventHandler p_GetProcessorReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetProcessorReportTempRow(p_GetProcessorReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetProcessorReportTempRow Addp_GetProcessorReportTempRow(int Records, System.DateTime Last_Collection_in_Interval, string InstanceName, double ResponseTimeInMilliseconds, double CPUActivityPercentage, double SqlCompilations, double SqlRecompilations, double TableLockEscalations, double LockWaits, double PrivilegedTimePercent, double UserTimePercent, double ProcessorTimePercent, double ProcessorQueueLength) {
                p_GetProcessorReportTempRow rowp_GetProcessorReportTempRow = ((p_GetProcessorReportTempRow)(this.NewRow()));
                rowp_GetProcessorReportTempRow.ItemArray = new object[] {
                        Records,
                        Last_Collection_in_Interval,
                        InstanceName,
                        ResponseTimeInMilliseconds,
                        CPUActivityPercentage,
                        SqlCompilations,
                        SqlRecompilations,
                        TableLockEscalations,
                        LockWaits,
                        PrivilegedTimePercent,
                        UserTimePercent,
                        ProcessorTimePercent,
                        ProcessorQueueLength};
                this.Rows.Add(rowp_GetProcessorReportTempRow);
                return rowp_GetProcessorReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetProcessorReportTempDataTable cln = ((p_GetProcessorReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetProcessorReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecords = base.Columns["Records"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnInstanceName = base.Columns["InstanceName"];
                this.columnResponseTimeInMilliseconds = base.Columns["ResponseTimeInMilliseconds"];
                this.columnCPUActivityPercentage = base.Columns["CPUActivityPercentage"];
                this.columnSqlCompilations = base.Columns["SqlCompilations"];
                this.columnSqlRecompilations = base.Columns["SqlRecompilations"];
                this.columnTableLockEscalations = base.Columns["TableLockEscalations"];
                this.columnLockWaits = base.Columns["LockWaits"];
                this.columnPrivilegedTimePercent = base.Columns["PrivilegedTimePercent"];
                this.columnUserTimePercent = base.Columns["UserTimePercent"];
                this.columnProcessorTimePercent = base.Columns["ProcessorTimePercent"];
                this.columnProcessorQueueLength = base.Columns["ProcessorQueueLength"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecords = new System.Data.DataColumn("Records", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecords);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnInstanceName = new System.Data.DataColumn("InstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceName);
                this.columnResponseTimeInMilliseconds = new System.Data.DataColumn("ResponseTimeInMilliseconds", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseTimeInMilliseconds);
                this.columnCPUActivityPercentage = new System.Data.DataColumn("CPUActivityPercentage", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCPUActivityPercentage);
                this.columnSqlCompilations = new System.Data.DataColumn("SqlCompilations", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqlCompilations);
                this.columnSqlRecompilations = new System.Data.DataColumn("SqlRecompilations", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqlRecompilations);
                this.columnTableLockEscalations = new System.Data.DataColumn("TableLockEscalations", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableLockEscalations);
                this.columnLockWaits = new System.Data.DataColumn("LockWaits", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockWaits);
                this.columnPrivilegedTimePercent = new System.Data.DataColumn("PrivilegedTimePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrivilegedTimePercent);
                this.columnUserTimePercent = new System.Data.DataColumn("UserTimePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserTimePercent);
                this.columnProcessorTimePercent = new System.Data.DataColumn("ProcessorTimePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessorTimePercent);
                this.columnProcessorQueueLength = new System.Data.DataColumn("ProcessorQueueLength", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessorQueueLength);
                this.columnRecords.ReadOnly = true;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnInstanceName.MaxLength = 256;
                this.columnResponseTimeInMilliseconds.ReadOnly = true;
                this.columnCPUActivityPercentage.ReadOnly = true;
                this.columnSqlCompilations.ReadOnly = true;
                this.columnSqlRecompilations.ReadOnly = true;
                this.columnTableLockEscalations.ReadOnly = true;
                this.columnLockWaits.ReadOnly = true;
                this.columnPrivilegedTimePercent.ReadOnly = true;
                this.columnUserTimePercent.ReadOnly = true;
                this.columnProcessorTimePercent.ReadOnly = true;
                this.columnProcessorQueueLength.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetProcessorReportTempRow Newp_GetProcessorReportTempRow() {
                return ((p_GetProcessorReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetProcessorReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetProcessorReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetProcessorReportTempRowChanged != null)) {
                    this.p_GetProcessorReportTempRowChanged(this, new p_GetProcessorReportTempRowChangeEvent(((p_GetProcessorReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetProcessorReportTempRowChanging != null)) {
                    this.p_GetProcessorReportTempRowChanging(this, new p_GetProcessorReportTempRowChangeEvent(((p_GetProcessorReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetProcessorReportTempRowDeleted != null)) {
                    this.p_GetProcessorReportTempRowDeleted(this, new p_GetProcessorReportTempRowChangeEvent(((p_GetProcessorReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetProcessorReportTempRowDeleting != null)) {
                    this.p_GetProcessorReportTempRowDeleting(this, new p_GetProcessorReportTempRowChangeEvent(((p_GetProcessorReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetProcessorReportTempRow(p_GetProcessorReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetProcessorReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetDiskReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRecords;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnInstanceName;
            
            private System.Data.DataColumn columnIOActivityPercentage;
            
            private System.Data.DataColumn columnPageReads;
            
            private System.Data.DataColumn columnPageErrors;
            
            private System.Data.DataColumn columnLazyWriterWrites;
            
            private System.Data.DataColumn columnCheckpointWrites;
            
            private System.Data.DataColumn columnLogFlushes;
            
            private System.Data.DataColumn columnWorkFilesCreated;
            
            private System.Data.DataColumn columnReadAheadPages;
            
            private System.Data.DataColumn columnPageSplits;
            
            private System.Data.DataColumn columnPageLifeExpectancy;
            
            private System.Data.DataColumn columnPageLookups;
            
            private System.Data.DataColumn columnTempDBSizePercent;
            
            private System.Data.DataColumn columnTempDBSizeInKilobytes;
            
            private System.Data.DataColumn columnPagesPerSecond;
            
            private System.Data.DataColumn columnDiskTimePercent;
            
            private System.Data.DataColumn columnDiskQueueLength;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDiskReportTempDataTable() {
                this.TableName = "p_GetDiskReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetDiskReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetDiskReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordsColumn {
                get {
                    return this.columnRecords;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstanceNameColumn {
                get {
                    return this.columnInstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IOActivityPercentageColumn {
                get {
                    return this.columnIOActivityPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageReadsColumn {
                get {
                    return this.columnPageReads;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageErrorsColumn {
                get {
                    return this.columnPageErrors;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LazyWriterWritesColumn {
                get {
                    return this.columnLazyWriterWrites;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckpointWritesColumn {
                get {
                    return this.columnCheckpointWrites;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogFlushesColumn {
                get {
                    return this.columnLogFlushes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkFilesCreatedColumn {
                get {
                    return this.columnWorkFilesCreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadAheadPagesColumn {
                get {
                    return this.columnReadAheadPages;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageSplitsColumn {
                get {
                    return this.columnPageSplits;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageLifeExpectancyColumn {
                get {
                    return this.columnPageLifeExpectancy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageLookupsColumn {
                get {
                    return this.columnPageLookups;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TempDBSizePercentColumn {
                get {
                    return this.columnTempDBSizePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TempDBSizeInKilobytesColumn {
                get {
                    return this.columnTempDBSizeInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PagesPerSecondColumn {
                get {
                    return this.columnPagesPerSecond;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiskTimePercentColumn {
                get {
                    return this.columnDiskTimePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiskQueueLengthColumn {
                get {
                    return this.columnDiskQueueLength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDiskReportTempRow this[int index] {
                get {
                    return ((p_GetDiskReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetDiskReportTempRowChangeEventHandler p_GetDiskReportTempRowChanging;
            
            public event p_GetDiskReportTempRowChangeEventHandler p_GetDiskReportTempRowChanged;
            
            public event p_GetDiskReportTempRowChangeEventHandler p_GetDiskReportTempRowDeleting;
            
            public event p_GetDiskReportTempRowChangeEventHandler p_GetDiskReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetDiskReportTempRow(p_GetDiskReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDiskReportTempRow Addp_GetDiskReportTempRow(
                        int Records, 
                        System.DateTime Last_Collection_in_Interval, 
                        string InstanceName, 
                        double IOActivityPercentage, 
                        double PageReads, 
                        double PageErrors, 
                        double LazyWriterWrites, 
                        double CheckpointWrites, 
                        double LogFlushes, 
                        double WorkFilesCreated, 
                        double ReadAheadPages, 
                        double PageSplits, 
                        long PageLifeExpectancy, 
                        double PageLookups, 
                        double TempDBSizePercent, 
                        long TempDBSizeInKilobytes, 
                        double PagesPerSecond, 
                        double DiskTimePercent, 
                        double DiskQueueLength) {
                p_GetDiskReportTempRow rowp_GetDiskReportTempRow = ((p_GetDiskReportTempRow)(this.NewRow()));
                rowp_GetDiskReportTempRow.ItemArray = new object[] {
                        Records,
                        Last_Collection_in_Interval,
                        InstanceName,
                        IOActivityPercentage,
                        PageReads,
                        PageErrors,
                        LazyWriterWrites,
                        CheckpointWrites,
                        LogFlushes,
                        WorkFilesCreated,
                        ReadAheadPages,
                        PageSplits,
                        PageLifeExpectancy,
                        PageLookups,
                        TempDBSizePercent,
                        TempDBSizeInKilobytes,
                        PagesPerSecond,
                        DiskTimePercent,
                        DiskQueueLength};
                this.Rows.Add(rowp_GetDiskReportTempRow);
                return rowp_GetDiskReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetDiskReportTempDataTable cln = ((p_GetDiskReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetDiskReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecords = base.Columns["Records"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnInstanceName = base.Columns["InstanceName"];
                this.columnIOActivityPercentage = base.Columns["IOActivityPercentage"];
                this.columnPageReads = base.Columns["PageReads"];
                this.columnPageErrors = base.Columns["PageErrors"];
                this.columnLazyWriterWrites = base.Columns["LazyWriterWrites"];
                this.columnCheckpointWrites = base.Columns["CheckpointWrites"];
                this.columnLogFlushes = base.Columns["LogFlushes"];
                this.columnWorkFilesCreated = base.Columns["WorkFilesCreated"];
                this.columnReadAheadPages = base.Columns["ReadAheadPages"];
                this.columnPageSplits = base.Columns["PageSplits"];
                this.columnPageLifeExpectancy = base.Columns["PageLifeExpectancy"];
                this.columnPageLookups = base.Columns["PageLookups"];
                this.columnTempDBSizePercent = base.Columns["TempDBSizePercent"];
                this.columnTempDBSizeInKilobytes = base.Columns["TempDBSizeInKilobytes"];
                this.columnPagesPerSecond = base.Columns["PagesPerSecond"];
                this.columnDiskTimePercent = base.Columns["DiskTimePercent"];
                this.columnDiskQueueLength = base.Columns["DiskQueueLength"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecords = new System.Data.DataColumn("Records", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecords);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnInstanceName = new System.Data.DataColumn("InstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceName);
                this.columnIOActivityPercentage = new System.Data.DataColumn("IOActivityPercentage", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOActivityPercentage);
                this.columnPageReads = new System.Data.DataColumn("PageReads", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageReads);
                this.columnPageErrors = new System.Data.DataColumn("PageErrors", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageErrors);
                this.columnLazyWriterWrites = new System.Data.DataColumn("LazyWriterWrites", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLazyWriterWrites);
                this.columnCheckpointWrites = new System.Data.DataColumn("CheckpointWrites", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckpointWrites);
                this.columnLogFlushes = new System.Data.DataColumn("LogFlushes", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogFlushes);
                this.columnWorkFilesCreated = new System.Data.DataColumn("WorkFilesCreated", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFilesCreated);
                this.columnReadAheadPages = new System.Data.DataColumn("ReadAheadPages", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReadAheadPages);
                this.columnPageSplits = new System.Data.DataColumn("PageSplits", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageSplits);
                this.columnPageLifeExpectancy = new System.Data.DataColumn("PageLifeExpectancy", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageLifeExpectancy);
                this.columnPageLookups = new System.Data.DataColumn("PageLookups", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageLookups);
                this.columnTempDBSizePercent = new System.Data.DataColumn("TempDBSizePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempDBSizePercent);
                this.columnTempDBSizeInKilobytes = new System.Data.DataColumn("TempDBSizeInKilobytes", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempDBSizeInKilobytes);
                this.columnPagesPerSecond = new System.Data.DataColumn("PagesPerSecond", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPagesPerSecond);
                this.columnDiskTimePercent = new System.Data.DataColumn("DiskTimePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiskTimePercent);
                this.columnDiskQueueLength = new System.Data.DataColumn("DiskQueueLength", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiskQueueLength);
                this.columnRecords.ReadOnly = true;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnInstanceName.MaxLength = 256;
                this.columnIOActivityPercentage.ReadOnly = true;
                this.columnPageReads.ReadOnly = true;
                this.columnPageErrors.ReadOnly = true;
                this.columnLazyWriterWrites.ReadOnly = true;
                this.columnCheckpointWrites.ReadOnly = true;
                this.columnLogFlushes.ReadOnly = true;
                this.columnWorkFilesCreated.ReadOnly = true;
                this.columnReadAheadPages.ReadOnly = true;
                this.columnPageSplits.ReadOnly = true;
                this.columnPageLifeExpectancy.ReadOnly = true;
                this.columnPageLookups.ReadOnly = true;
                this.columnTempDBSizePercent.ReadOnly = true;
                this.columnTempDBSizeInKilobytes.ReadOnly = true;
                this.columnPagesPerSecond.ReadOnly = true;
                this.columnDiskTimePercent.ReadOnly = true;
                this.columnDiskQueueLength.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDiskReportTempRow Newp_GetDiskReportTempRow() {
                return ((p_GetDiskReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetDiskReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetDiskReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetDiskReportTempRowChanged != null)) {
                    this.p_GetDiskReportTempRowChanged(this, new p_GetDiskReportTempRowChangeEvent(((p_GetDiskReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetDiskReportTempRowChanging != null)) {
                    this.p_GetDiskReportTempRowChanging(this, new p_GetDiskReportTempRowChangeEvent(((p_GetDiskReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetDiskReportTempRowDeleted != null)) {
                    this.p_GetDiskReportTempRowDeleted(this, new p_GetDiskReportTempRowChangeEvent(((p_GetDiskReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetDiskReportTempRowDeleting != null)) {
                    this.p_GetDiskReportTempRowDeleting(this, new p_GetDiskReportTempRowChangeEvent(((p_GetDiskReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetDiskReportTempRow(p_GetDiskReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetDiskReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetMemoryReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRecords;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnInstanceName;
            
            private System.Data.DataColumn columnSqlMemoryAllocatedInKilobytes;
            
            private System.Data.DataColumn columnSqlMemoryUsedInKilobytes;
            
            private System.Data.DataColumn columnProcedureCacheSizeInKilobytes;
            
            private System.Data.DataColumn columnProcedureCacheSizePercent;
            
            private System.Data.DataColumn columnBufferCacheHitRatioPercentage;
            
            private System.Data.DataColumn columnProcedureCacheHitRatioPercentage;
            
            private System.Data.DataColumn columnWorkTablesCreated;
            
            private System.Data.DataColumn columnOSAvailableMemoryInKilobytes;
            
            private System.Data.DataColumn columnOSTotalPhysicalMemoryInKilobytes;
            
            private System.Data.DataColumn columnPageLifeExpectancy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetMemoryReportTempDataTable() {
                this.TableName = "p_GetMemoryReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetMemoryReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetMemoryReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordsColumn {
                get {
                    return this.columnRecords;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstanceNameColumn {
                get {
                    return this.columnInstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SqlMemoryAllocatedInKilobytesColumn {
                get {
                    return this.columnSqlMemoryAllocatedInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SqlMemoryUsedInKilobytesColumn {
                get {
                    return this.columnSqlMemoryUsedInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProcedureCacheSizeInKilobytesColumn {
                get {
                    return this.columnProcedureCacheSizeInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProcedureCacheSizePercentColumn {
                get {
                    return this.columnProcedureCacheSizePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BufferCacheHitRatioPercentageColumn {
                get {
                    return this.columnBufferCacheHitRatioPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProcedureCacheHitRatioPercentageColumn {
                get {
                    return this.columnProcedureCacheHitRatioPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkTablesCreatedColumn {
                get {
                    return this.columnWorkTablesCreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OSAvailableMemoryInKilobytesColumn {
                get {
                    return this.columnOSAvailableMemoryInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OSTotalPhysicalMemoryInKilobytesColumn {
                get {
                    return this.columnOSTotalPhysicalMemoryInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageLifeExpectancyColumn {
                get {
                    return this.columnPageLifeExpectancy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetMemoryReportTempRow this[int index] {
                get {
                    return ((p_GetMemoryReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetMemoryReportTempRowChangeEventHandler p_GetMemoryReportTempRowChanging;
            
            public event p_GetMemoryReportTempRowChangeEventHandler p_GetMemoryReportTempRowChanged;
            
            public event p_GetMemoryReportTempRowChangeEventHandler p_GetMemoryReportTempRowDeleting;
            
            public event p_GetMemoryReportTempRowChangeEventHandler p_GetMemoryReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetMemoryReportTempRow(p_GetMemoryReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetMemoryReportTempRow Addp_GetMemoryReportTempRow(int Records, System.DateTime Last_Collection_in_Interval, string InstanceName, long SqlMemoryAllocatedInKilobytes, long SqlMemoryUsedInKilobytes, long ProcedureCacheSizeInKilobytes, double ProcedureCacheSizePercent, double BufferCacheHitRatioPercentage, double ProcedureCacheHitRatioPercentage, double WorkTablesCreated, double OSAvailableMemoryInKilobytes, double OSTotalPhysicalMemoryInKilobytes, double PageLifeExpectancy) {
                p_GetMemoryReportTempRow rowp_GetMemoryReportTempRow = ((p_GetMemoryReportTempRow)(this.NewRow()));
                rowp_GetMemoryReportTempRow.ItemArray = new object[] {
                        Records,
                        Last_Collection_in_Interval,
                        InstanceName,
                        SqlMemoryAllocatedInKilobytes,
                        SqlMemoryUsedInKilobytes,
                        ProcedureCacheSizeInKilobytes,
                        ProcedureCacheSizePercent,
                        BufferCacheHitRatioPercentage,
                        ProcedureCacheHitRatioPercentage,
                        WorkTablesCreated,
                        OSAvailableMemoryInKilobytes,
                        OSTotalPhysicalMemoryInKilobytes,
                        PageLifeExpectancy};
                this.Rows.Add(rowp_GetMemoryReportTempRow);
                return rowp_GetMemoryReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetMemoryReportTempDataTable cln = ((p_GetMemoryReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetMemoryReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecords = base.Columns["Records"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnInstanceName = base.Columns["InstanceName"];
                this.columnSqlMemoryAllocatedInKilobytes = base.Columns["SqlMemoryAllocatedInKilobytes"];
                this.columnSqlMemoryUsedInKilobytes = base.Columns["SqlMemoryUsedInKilobytes"];
                this.columnProcedureCacheSizeInKilobytes = base.Columns["ProcedureCacheSizeInKilobytes"];
                this.columnProcedureCacheSizePercent = base.Columns["ProcedureCacheSizePercent"];
                this.columnBufferCacheHitRatioPercentage = base.Columns["BufferCacheHitRatioPercentage"];
                this.columnProcedureCacheHitRatioPercentage = base.Columns["ProcedureCacheHitRatioPercentage"];
                this.columnWorkTablesCreated = base.Columns["WorkTablesCreated"];
                this.columnOSAvailableMemoryInKilobytes = base.Columns["OSAvailableMemoryInKilobytes"];
                this.columnOSTotalPhysicalMemoryInKilobytes = base.Columns["OSTotalPhysicalMemoryInKilobytes"];
                this.columnPageLifeExpectancy = base.Columns["PageLifeExpectancy"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecords = new System.Data.DataColumn("Records", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecords);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnInstanceName = new System.Data.DataColumn("InstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceName);
                this.columnSqlMemoryAllocatedInKilobytes = new System.Data.DataColumn("SqlMemoryAllocatedInKilobytes", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqlMemoryAllocatedInKilobytes);
                this.columnSqlMemoryUsedInKilobytes = new System.Data.DataColumn("SqlMemoryUsedInKilobytes", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqlMemoryUsedInKilobytes);
                this.columnProcedureCacheSizeInKilobytes = new System.Data.DataColumn("ProcedureCacheSizeInKilobytes", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcedureCacheSizeInKilobytes);
                this.columnProcedureCacheSizePercent = new System.Data.DataColumn("ProcedureCacheSizePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcedureCacheSizePercent);
                this.columnBufferCacheHitRatioPercentage = new System.Data.DataColumn("BufferCacheHitRatioPercentage", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBufferCacheHitRatioPercentage);
                this.columnProcedureCacheHitRatioPercentage = new System.Data.DataColumn("ProcedureCacheHitRatioPercentage", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcedureCacheHitRatioPercentage);
                this.columnWorkTablesCreated = new System.Data.DataColumn("WorkTablesCreated", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkTablesCreated);
                this.columnOSAvailableMemoryInKilobytes = new System.Data.DataColumn("OSAvailableMemoryInKilobytes", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSAvailableMemoryInKilobytes);
                this.columnOSTotalPhysicalMemoryInKilobytes = new System.Data.DataColumn("OSTotalPhysicalMemoryInKilobytes", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSTotalPhysicalMemoryInKilobytes);
                this.columnPageLifeExpectancy = new System.Data.DataColumn("PageLifeExpectancy", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageLifeExpectancy);
                this.columnRecords.ReadOnly = true;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnInstanceName.MaxLength = 256;
                this.columnSqlMemoryAllocatedInKilobytes.ReadOnly = true;
                this.columnSqlMemoryUsedInKilobytes.ReadOnly = true;
                this.columnProcedureCacheSizeInKilobytes.ReadOnly = true;
                this.columnProcedureCacheSizePercent.ReadOnly = true;
                this.columnBufferCacheHitRatioPercentage.ReadOnly = true;
                this.columnProcedureCacheHitRatioPercentage.ReadOnly = true;
                this.columnWorkTablesCreated.ReadOnly = true;
                this.columnOSAvailableMemoryInKilobytes.ReadOnly = true;
                this.columnOSTotalPhysicalMemoryInKilobytes.ReadOnly = true;
                this.columnPageLifeExpectancy.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetMemoryReportTempRow Newp_GetMemoryReportTempRow() {
                return ((p_GetMemoryReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetMemoryReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetMemoryReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetMemoryReportTempRowChanged != null)) {
                    this.p_GetMemoryReportTempRowChanged(this, new p_GetMemoryReportTempRowChangeEvent(((p_GetMemoryReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetMemoryReportTempRowChanging != null)) {
                    this.p_GetMemoryReportTempRowChanging(this, new p_GetMemoryReportTempRowChangeEvent(((p_GetMemoryReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetMemoryReportTempRowDeleted != null)) {
                    this.p_GetMemoryReportTempRowDeleted(this, new p_GetMemoryReportTempRowChangeEvent(((p_GetMemoryReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetMemoryReportTempRowDeleting != null)) {
                    this.p_GetMemoryReportTempRowDeleting(this, new p_GetMemoryReportTempRowChangeEvent(((p_GetMemoryReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetMemoryReportTempRow(p_GetMemoryReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetMemoryReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetSessionsReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnInstanceName;
            
            private System.Data.DataColumn columnLogins;
            
            private System.Data.DataColumn columnUserProcesses;
            
            private System.Data.DataColumn columnMaxUserProcesses;
            
            private System.Data.DataColumn columnClientComputers;
            
            private System.Data.DataColumn columnTransactions;
            
            private System.Data.DataColumn columnOldestOpenTransactionsInMinutes;
            
            private System.Data.DataColumn columnReplicationLatencyInSeconds;
            
            private System.Data.DataColumn columnReplicationUnsubscribed;
            
            private System.Data.DataColumn columnReplicationSubscribed;
            
            private System.Data.DataColumn columnReplicationUndistributed;
            
            private System.Data.DataColumn columnPacketsReceived;
            
            private System.Data.DataColumn columnPacketsSent;
            
            private System.Data.DataColumn columnPacketErrors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetSessionsReportTempDataTable() {
                this.TableName = "p_GetSessionsReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetSessionsReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetSessionsReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstanceNameColumn {
                get {
                    return this.columnInstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoginsColumn {
                get {
                    return this.columnLogins;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserProcessesColumn {
                get {
                    return this.columnUserProcesses;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxUserProcessesColumn {
                get {
                    return this.columnMaxUserProcesses;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientComputersColumn {
                get {
                    return this.columnClientComputers;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TransactionsColumn {
                get {
                    return this.columnTransactions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldestOpenTransactionsInMinutesColumn {
                get {
                    return this.columnOldestOpenTransactionsInMinutes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReplicationLatencyInSecondsColumn {
                get {
                    return this.columnReplicationLatencyInSeconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReplicationUnsubscribedColumn {
                get {
                    return this.columnReplicationUnsubscribed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReplicationSubscribedColumn {
                get {
                    return this.columnReplicationSubscribed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReplicationUndistributedColumn {
                get {
                    return this.columnReplicationUndistributed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketsReceivedColumn {
                get {
                    return this.columnPacketsReceived;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketsSentColumn {
                get {
                    return this.columnPacketsSent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketErrorsColumn {
                get {
                    return this.columnPacketErrors;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetSessionsReportTempRow this[int index] {
                get {
                    return ((p_GetSessionsReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetSessionsReportTempRowChangeEventHandler p_GetSessionsReportTempRowChanging;
            
            public event p_GetSessionsReportTempRowChangeEventHandler p_GetSessionsReportTempRowChanged;
            
            public event p_GetSessionsReportTempRowChangeEventHandler p_GetSessionsReportTempRowDeleting;
            
            public event p_GetSessionsReportTempRowChangeEventHandler p_GetSessionsReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetSessionsReportTempRow(p_GetSessionsReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetSessionsReportTempRow Addp_GetSessionsReportTempRow(System.DateTime Last_Collection_in_Interval, string InstanceName, double Logins, double UserProcesses, int MaxUserProcesses, int ClientComputers, double Transactions, long OldestOpenTransactionsInMinutes, double ReplicationLatencyInSeconds, long ReplicationUnsubscribed, long ReplicationSubscribed, long ReplicationUndistributed, double PacketsReceived, double PacketsSent, double PacketErrors) {
                p_GetSessionsReportTempRow rowp_GetSessionsReportTempRow = ((p_GetSessionsReportTempRow)(this.NewRow()));
                rowp_GetSessionsReportTempRow.ItemArray = new object[] {
                        Last_Collection_in_Interval,
                        InstanceName,
                        Logins,
                        UserProcesses,
                        MaxUserProcesses,
                        ClientComputers,
                        Transactions,
                        OldestOpenTransactionsInMinutes,
                        ReplicationLatencyInSeconds,
                        ReplicationUnsubscribed,
                        ReplicationSubscribed,
                        ReplicationUndistributed,
                        PacketsReceived,
                        PacketsSent,
                        PacketErrors};
                this.Rows.Add(rowp_GetSessionsReportTempRow);
                return rowp_GetSessionsReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetSessionsReportTempDataTable cln = ((p_GetSessionsReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetSessionsReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnInstanceName = base.Columns["InstanceName"];
                this.columnLogins = base.Columns["Logins"];
                this.columnUserProcesses = base.Columns["UserProcesses"];
                this.columnMaxUserProcesses = base.Columns["MaxUserProcesses"];
                this.columnClientComputers = base.Columns["ClientComputers"];
                this.columnTransactions = base.Columns["Transactions"];
                this.columnOldestOpenTransactionsInMinutes = base.Columns["OldestOpenTransactionsInMinutes"];
                this.columnReplicationLatencyInSeconds = base.Columns["ReplicationLatencyInSeconds"];
                this.columnReplicationUnsubscribed = base.Columns["ReplicationUnsubscribed"];
                this.columnReplicationSubscribed = base.Columns["ReplicationSubscribed"];
                this.columnReplicationUndistributed = base.Columns["ReplicationUndistributed"];
                this.columnPacketsReceived = base.Columns["PacketsReceived"];
                this.columnPacketsSent = base.Columns["PacketsSent"];
                this.columnPacketErrors = base.Columns["PacketErrors"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnInstanceName = new System.Data.DataColumn("InstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceName);
                this.columnLogins = new System.Data.DataColumn("Logins", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogins);
                this.columnUserProcesses = new System.Data.DataColumn("UserProcesses", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserProcesses);
                this.columnMaxUserProcesses = new System.Data.DataColumn("MaxUserProcesses", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxUserProcesses);
                this.columnClientComputers = new System.Data.DataColumn("ClientComputers", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientComputers);
                this.columnTransactions = new System.Data.DataColumn("Transactions", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactions);
                this.columnOldestOpenTransactionsInMinutes = new System.Data.DataColumn("OldestOpenTransactionsInMinutes", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldestOpenTransactionsInMinutes);
                this.columnReplicationLatencyInSeconds = new System.Data.DataColumn("ReplicationLatencyInSeconds", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplicationLatencyInSeconds);
                this.columnReplicationUnsubscribed = new System.Data.DataColumn("ReplicationUnsubscribed", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplicationUnsubscribed);
                this.columnReplicationSubscribed = new System.Data.DataColumn("ReplicationSubscribed", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplicationSubscribed);
                this.columnReplicationUndistributed = new System.Data.DataColumn("ReplicationUndistributed", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplicationUndistributed);
                this.columnPacketsReceived = new System.Data.DataColumn("PacketsReceived", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketsReceived);
                this.columnPacketsSent = new System.Data.DataColumn("PacketsSent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketsSent);
                this.columnPacketErrors = new System.Data.DataColumn("PacketErrors", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketErrors);
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnInstanceName.AllowDBNull = false;
                this.columnInstanceName.MaxLength = 256;
                this.columnLogins.ReadOnly = true;
                this.columnUserProcesses.ReadOnly = true;
                this.columnMaxUserProcesses.ReadOnly = true;
                this.columnClientComputers.ReadOnly = true;
                this.columnTransactions.ReadOnly = true;
                this.columnOldestOpenTransactionsInMinutes.ReadOnly = true;
                this.columnReplicationLatencyInSeconds.ReadOnly = true;
                this.columnReplicationUnsubscribed.ReadOnly = true;
                this.columnReplicationSubscribed.ReadOnly = true;
                this.columnReplicationUndistributed.ReadOnly = true;
                this.columnPacketsReceived.ReadOnly = true;
                this.columnPacketsSent.ReadOnly = true;
                this.columnPacketErrors.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetSessionsReportTempRow Newp_GetSessionsReportTempRow() {
                return ((p_GetSessionsReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetSessionsReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetSessionsReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetSessionsReportTempRowChanged != null)) {
                    this.p_GetSessionsReportTempRowChanged(this, new p_GetSessionsReportTempRowChangeEvent(((p_GetSessionsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetSessionsReportTempRowChanging != null)) {
                    this.p_GetSessionsReportTempRowChanging(this, new p_GetSessionsReportTempRowChangeEvent(((p_GetSessionsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetSessionsReportTempRowDeleted != null)) {
                    this.p_GetSessionsReportTempRowDeleted(this, new p_GetSessionsReportTempRowChangeEvent(((p_GetSessionsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetSessionsReportTempRowDeleting != null)) {
                    this.p_GetSessionsReportTempRowDeleting(this, new p_GetSessionsReportTempRowChangeEvent(((p_GetSessionsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetSessionsReportTempRow(p_GetSessionsReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetSessionsReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetOverviewReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnInstanceName;
            
            private System.Data.DataColumn columnResponseTimeInMilliseconds;
            
            private System.Data.DataColumn columnUserProcesses;
            
            private System.Data.DataColumn columnPacketsReceived;
            
            private System.Data.DataColumn columnPacketsSent;
            
            private System.Data.DataColumn columnPacketErrors;
            
            private System.Data.DataColumn columnSqlMemoryUsedInKilobytes;
            
            private System.Data.DataColumn columnIOActivityPercentage;
            
            private System.Data.DataColumn columnTransactions;
            
            private System.Data.DataColumn columnDataFileSpaceUsedInKilobytes;
            
            private System.Data.DataColumn columnPageReads;
            
            private System.Data.DataColumn columnPageErrors;
            
            private System.Data.DataColumn columnLazyWriterWrites;
            
            private System.Data.DataColumn columnCheckpointWrites;
            
            private System.Data.DataColumn columnLogFlushes;
            
            private System.Data.DataColumn columnCPUActivityPercentage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetOverviewReportTempDataTable() {
                this.TableName = "p_GetOverviewReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetOverviewReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetOverviewReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstanceNameColumn {
                get {
                    return this.columnInstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResponseTimeInMillisecondsColumn {
                get {
                    return this.columnResponseTimeInMilliseconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserProcessesColumn {
                get {
                    return this.columnUserProcesses;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketsReceivedColumn {
                get {
                    return this.columnPacketsReceived;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketsSentColumn {
                get {
                    return this.columnPacketsSent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketErrorsColumn {
                get {
                    return this.columnPacketErrors;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SqlMemoryUsedInKilobytesColumn {
                get {
                    return this.columnSqlMemoryUsedInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IOActivityPercentageColumn {
                get {
                    return this.columnIOActivityPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TransactionsColumn {
                get {
                    return this.columnTransactions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataFileSpaceUsedInKilobytesColumn {
                get {
                    return this.columnDataFileSpaceUsedInKilobytes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageReadsColumn {
                get {
                    return this.columnPageReads;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageErrorsColumn {
                get {
                    return this.columnPageErrors;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LazyWriterWritesColumn {
                get {
                    return this.columnLazyWriterWrites;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckpointWritesColumn {
                get {
                    return this.columnCheckpointWrites;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogFlushesColumn {
                get {
                    return this.columnLogFlushes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CPUActivityPercentageColumn {
                get {
                    return this.columnCPUActivityPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetOverviewReportTempRow this[int index] {
                get {
                    return ((p_GetOverviewReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetOverviewReportTempRowChangeEventHandler p_GetOverviewReportTempRowChanging;
            
            public event p_GetOverviewReportTempRowChangeEventHandler p_GetOverviewReportTempRowChanged;
            
            public event p_GetOverviewReportTempRowChangeEventHandler p_GetOverviewReportTempRowDeleting;
            
            public event p_GetOverviewReportTempRowChangeEventHandler p_GetOverviewReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetOverviewReportTempRow(p_GetOverviewReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetOverviewReportTempRow Addp_GetOverviewReportTempRow(
                        System.DateTime Last_Collection_in_Interval, 
                        string InstanceName, 
                        double ResponseTimeInMilliseconds, 
                        double UserProcesses, 
                        double PacketsReceived, 
                        double PacketsSent, 
                        double PacketErrors, 
                        long SqlMemoryUsedInKilobytes, 
                        double IOActivityPercentage, 
                        double Transactions, 
                        double DataFileSpaceUsedInKilobytes, 
                        double PageReads, 
                        double PageErrors, 
                        double LazyWriterWrites, 
                        double CheckpointWrites, 
                        double LogFlushes, 
                        double CPUActivityPercentage) {
                p_GetOverviewReportTempRow rowp_GetOverviewReportTempRow = ((p_GetOverviewReportTempRow)(this.NewRow()));
                rowp_GetOverviewReportTempRow.ItemArray = new object[] {
                        Last_Collection_in_Interval,
                        InstanceName,
                        ResponseTimeInMilliseconds,
                        UserProcesses,
                        PacketsReceived,
                        PacketsSent,
                        PacketErrors,
                        SqlMemoryUsedInKilobytes,
                        IOActivityPercentage,
                        Transactions,
                        DataFileSpaceUsedInKilobytes,
                        PageReads,
                        PageErrors,
                        LazyWriterWrites,
                        CheckpointWrites,
                        LogFlushes,
                        CPUActivityPercentage};
                this.Rows.Add(rowp_GetOverviewReportTempRow);
                return rowp_GetOverviewReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetOverviewReportTempDataTable cln = ((p_GetOverviewReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetOverviewReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnInstanceName = base.Columns["InstanceName"];
                this.columnResponseTimeInMilliseconds = base.Columns["ResponseTimeInMilliseconds"];
                this.columnUserProcesses = base.Columns["UserProcesses"];
                this.columnPacketsReceived = base.Columns["PacketsReceived"];
                this.columnPacketsSent = base.Columns["PacketsSent"];
                this.columnPacketErrors = base.Columns["PacketErrors"];
                this.columnSqlMemoryUsedInKilobytes = base.Columns["SqlMemoryUsedInKilobytes"];
                this.columnIOActivityPercentage = base.Columns["IOActivityPercentage"];
                this.columnTransactions = base.Columns["Transactions"];
                this.columnDataFileSpaceUsedInKilobytes = base.Columns["DataFileSpaceUsedInKilobytes"];
                this.columnPageReads = base.Columns["PageReads"];
                this.columnPageErrors = base.Columns["PageErrors"];
                this.columnLazyWriterWrites = base.Columns["LazyWriterWrites"];
                this.columnCheckpointWrites = base.Columns["CheckpointWrites"];
                this.columnLogFlushes = base.Columns["LogFlushes"];
                this.columnCPUActivityPercentage = base.Columns["CPUActivityPercentage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnInstanceName = new System.Data.DataColumn("InstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceName);
                this.columnResponseTimeInMilliseconds = new System.Data.DataColumn("ResponseTimeInMilliseconds", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseTimeInMilliseconds);
                this.columnUserProcesses = new System.Data.DataColumn("UserProcesses", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserProcesses);
                this.columnPacketsReceived = new System.Data.DataColumn("PacketsReceived", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketsReceived);
                this.columnPacketsSent = new System.Data.DataColumn("PacketsSent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketsSent);
                this.columnPacketErrors = new System.Data.DataColumn("PacketErrors", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketErrors);
                this.columnSqlMemoryUsedInKilobytes = new System.Data.DataColumn("SqlMemoryUsedInKilobytes", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqlMemoryUsedInKilobytes);
                this.columnIOActivityPercentage = new System.Data.DataColumn("IOActivityPercentage", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOActivityPercentage);
                this.columnTransactions = new System.Data.DataColumn("Transactions", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactions);
                this.columnDataFileSpaceUsedInKilobytes = new System.Data.DataColumn("DataFileSpaceUsedInKilobytes", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataFileSpaceUsedInKilobytes);
                this.columnPageReads = new System.Data.DataColumn("PageReads", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageReads);
                this.columnPageErrors = new System.Data.DataColumn("PageErrors", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageErrors);
                this.columnLazyWriterWrites = new System.Data.DataColumn("LazyWriterWrites", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLazyWriterWrites);
                this.columnCheckpointWrites = new System.Data.DataColumn("CheckpointWrites", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckpointWrites);
                this.columnLogFlushes = new System.Data.DataColumn("LogFlushes", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogFlushes);
                this.columnCPUActivityPercentage = new System.Data.DataColumn("CPUActivityPercentage", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCPUActivityPercentage);
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnInstanceName.MaxLength = 256;
                this.columnResponseTimeInMilliseconds.ReadOnly = true;
                this.columnUserProcesses.ReadOnly = true;
                this.columnPacketsReceived.ReadOnly = true;
                this.columnPacketsSent.ReadOnly = true;
                this.columnPacketErrors.ReadOnly = true;
                this.columnSqlMemoryUsedInKilobytes.ReadOnly = true;
                this.columnIOActivityPercentage.ReadOnly = true;
                this.columnTransactions.ReadOnly = true;
                this.columnDataFileSpaceUsedInKilobytes.ReadOnly = true;
                this.columnPageReads.ReadOnly = true;
                this.columnPageErrors.ReadOnly = true;
                this.columnLazyWriterWrites.ReadOnly = true;
                this.columnCheckpointWrites.ReadOnly = true;
                this.columnLogFlushes.ReadOnly = true;
                this.columnCPUActivityPercentage.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetOverviewReportTempRow Newp_GetOverviewReportTempRow() {
                return ((p_GetOverviewReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetOverviewReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetOverviewReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetOverviewReportTempRowChanged != null)) {
                    this.p_GetOverviewReportTempRowChanged(this, new p_GetOverviewReportTempRowChangeEvent(((p_GetOverviewReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetOverviewReportTempRowChanging != null)) {
                    this.p_GetOverviewReportTempRowChanging(this, new p_GetOverviewReportTempRowChangeEvent(((p_GetOverviewReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetOverviewReportTempRowDeleted != null)) {
                    this.p_GetOverviewReportTempRowDeleted(this, new p_GetOverviewReportTempRowChangeEvent(((p_GetOverviewReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetOverviewReportTempRowDeleting != null)) {
                    this.p_GetOverviewReportTempRowDeleting(this, new p_GetOverviewReportTempRowChangeEvent(((p_GetOverviewReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetOverviewReportTempRow(p_GetOverviewReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetOverviewReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetDatabaseStatisticsReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDatabaseName;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnTransactions;
            
            private System.Data.DataColumn columnLogFlushWaits;
            
            private System.Data.DataColumn columnLogFlushes;
            
            private System.Data.DataColumn columnLogKilobytesFlushed;
            
            private System.Data.DataColumn columnLogCacheReads;
            
            private System.Data.DataColumn columnLogCacheHitRatio;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseStatisticsReportTempDataTable() {
                this.TableName = "p_GetDatabaseStatisticsReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetDatabaseStatisticsReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetDatabaseStatisticsReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TransactionsColumn {
                get {
                    return this.columnTransactions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogFlushWaitsColumn {
                get {
                    return this.columnLogFlushWaits;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogFlushesColumn {
                get {
                    return this.columnLogFlushes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogKilobytesFlushedColumn {
                get {
                    return this.columnLogKilobytesFlushed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogCacheReadsColumn {
                get {
                    return this.columnLogCacheReads;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogCacheHitRatioColumn {
                get {
                    return this.columnLogCacheHitRatio;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseStatisticsReportTempRow this[int index] {
                get {
                    return ((p_GetDatabaseStatisticsReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetDatabaseStatisticsReportTempRowChangeEventHandler p_GetDatabaseStatisticsReportTempRowChanging;
            
            public event p_GetDatabaseStatisticsReportTempRowChangeEventHandler p_GetDatabaseStatisticsReportTempRowChanged;
            
            public event p_GetDatabaseStatisticsReportTempRowChangeEventHandler p_GetDatabaseStatisticsReportTempRowDeleting;
            
            public event p_GetDatabaseStatisticsReportTempRowChangeEventHandler p_GetDatabaseStatisticsReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetDatabaseStatisticsReportTempRow(p_GetDatabaseStatisticsReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseStatisticsReportTempRow Addp_GetDatabaseStatisticsReportTempRow(string DatabaseName, System.DateTime Last_Collection_in_Interval, double Transactions, double LogFlushWaits, double LogFlushes, double LogKilobytesFlushed, double LogCacheReads, double LogCacheHitRatio) {
                p_GetDatabaseStatisticsReportTempRow rowp_GetDatabaseStatisticsReportTempRow = ((p_GetDatabaseStatisticsReportTempRow)(this.NewRow()));
                rowp_GetDatabaseStatisticsReportTempRow.ItemArray = new object[] {
                        DatabaseName,
                        Last_Collection_in_Interval,
                        Transactions,
                        LogFlushWaits,
                        LogFlushes,
                        LogKilobytesFlushed,
                        LogCacheReads,
                        LogCacheHitRatio};
                this.Rows.Add(rowp_GetDatabaseStatisticsReportTempRow);
                return rowp_GetDatabaseStatisticsReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetDatabaseStatisticsReportTempDataTable cln = ((p_GetDatabaseStatisticsReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetDatabaseStatisticsReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDatabaseName = base.Columns["DatabaseName"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnTransactions = base.Columns["Transactions"];
                this.columnLogFlushWaits = base.Columns["LogFlushWaits"];
                this.columnLogFlushes = base.Columns["LogFlushes"];
                this.columnLogKilobytesFlushed = base.Columns["LogKilobytesFlushed"];
                this.columnLogCacheReads = base.Columns["LogCacheReads"];
                this.columnLogCacheHitRatio = base.Columns["LogCacheHitRatio"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDatabaseName = new System.Data.DataColumn("DatabaseName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnTransactions = new System.Data.DataColumn("Transactions", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactions);
                this.columnLogFlushWaits = new System.Data.DataColumn("LogFlushWaits", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogFlushWaits);
                this.columnLogFlushes = new System.Data.DataColumn("LogFlushes", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogFlushes);
                this.columnLogKilobytesFlushed = new System.Data.DataColumn("LogKilobytesFlushed", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogKilobytesFlushed);
                this.columnLogCacheReads = new System.Data.DataColumn("LogCacheReads", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogCacheReads);
                this.columnLogCacheHitRatio = new System.Data.DataColumn("LogCacheHitRatio", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogCacheHitRatio);
                this.columnDatabaseName.AllowDBNull = false;
                this.columnDatabaseName.MaxLength = 255;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnTransactions.ReadOnly = true;
                this.columnLogFlushWaits.ReadOnly = true;
                this.columnLogFlushes.ReadOnly = true;
                this.columnLogKilobytesFlushed.ReadOnly = true;
                this.columnLogCacheReads.ReadOnly = true;
                this.columnLogCacheHitRatio.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseStatisticsReportTempRow Newp_GetDatabaseStatisticsReportTempRow() {
                return ((p_GetDatabaseStatisticsReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetDatabaseStatisticsReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetDatabaseStatisticsReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetDatabaseStatisticsReportTempRowChanged != null)) {
                    this.p_GetDatabaseStatisticsReportTempRowChanged(this, new p_GetDatabaseStatisticsReportTempRowChangeEvent(((p_GetDatabaseStatisticsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetDatabaseStatisticsReportTempRowChanging != null)) {
                    this.p_GetDatabaseStatisticsReportTempRowChanging(this, new p_GetDatabaseStatisticsReportTempRowChangeEvent(((p_GetDatabaseStatisticsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetDatabaseStatisticsReportTempRowDeleted != null)) {
                    this.p_GetDatabaseStatisticsReportTempRowDeleted(this, new p_GetDatabaseStatisticsReportTempRowChangeEvent(((p_GetDatabaseStatisticsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetDatabaseStatisticsReportTempRowDeleting != null)) {
                    this.p_GetDatabaseStatisticsReportTempRowDeleting(this, new p_GetDatabaseStatisticsReportTempRowChangeEvent(((p_GetDatabaseStatisticsReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetDatabaseStatisticsReportTempRow(p_GetDatabaseStatisticsReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetDatabaseStatisticsReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetDatabaseGrowthReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDatabaseName;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnDataFileSizeKb;
            
            private System.Data.DataColumn columnDataSizeKb;
            
            private System.Data.DataColumn columnDataGrowth;
            
            private System.Data.DataColumn columnDataSizePercent;
            
            private System.Data.DataColumn columnIndexSizeKb;
            
            private System.Data.DataColumn columnTextSizeKb;
            
            private System.Data.DataColumn columnLogFileSizeKb;
            
            private System.Data.DataColumn columnTotalSizeKb;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseGrowthReportTempDataTable() {
                this.TableName = "p_GetDatabaseGrowthReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetDatabaseGrowthReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetDatabaseGrowthReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataFileSizeKbColumn {
                get {
                    return this.columnDataFileSizeKb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataSizeKbColumn {
                get {
                    return this.columnDataSizeKb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataGrowthColumn {
                get {
                    return this.columnDataGrowth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataSizePercentColumn {
                get {
                    return this.columnDataSizePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IndexSizeKbColumn {
                get {
                    return this.columnIndexSizeKb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextSizeKbColumn {
                get {
                    return this.columnTextSizeKb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogFileSizeKbColumn {
                get {
                    return this.columnLogFileSizeKb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalSizeKbColumn {
                get {
                    return this.columnTotalSizeKb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseGrowthReportTempRow this[int index] {
                get {
                    return ((p_GetDatabaseGrowthReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetDatabaseGrowthReportTempRowChangeEventHandler p_GetDatabaseGrowthReportTempRowChanging;
            
            public event p_GetDatabaseGrowthReportTempRowChangeEventHandler p_GetDatabaseGrowthReportTempRowChanged;
            
            public event p_GetDatabaseGrowthReportTempRowChangeEventHandler p_GetDatabaseGrowthReportTempRowDeleting;
            
            public event p_GetDatabaseGrowthReportTempRowChangeEventHandler p_GetDatabaseGrowthReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetDatabaseGrowthReportTempRow(p_GetDatabaseGrowthReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseGrowthReportTempRow Addp_GetDatabaseGrowthReportTempRow(string DatabaseName, System.DateTime Last_Collection_in_Interval, double DataFileSizeKb, double DataSizeKb, decimal DataGrowth, double DataSizePercent, double IndexSizeKb, double TextSizeKb, double LogFileSizeKb, double TotalSizeKb) {
                p_GetDatabaseGrowthReportTempRow rowp_GetDatabaseGrowthReportTempRow = ((p_GetDatabaseGrowthReportTempRow)(this.NewRow()));
                rowp_GetDatabaseGrowthReportTempRow.ItemArray = new object[] {
                        DatabaseName,
                        Last_Collection_in_Interval,
                        DataFileSizeKb,
                        DataSizeKb,
                        DataGrowth,
                        DataSizePercent,
                        IndexSizeKb,
                        TextSizeKb,
                        LogFileSizeKb,
                        TotalSizeKb};
                this.Rows.Add(rowp_GetDatabaseGrowthReportTempRow);
                return rowp_GetDatabaseGrowthReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetDatabaseGrowthReportTempDataTable cln = ((p_GetDatabaseGrowthReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetDatabaseGrowthReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDatabaseName = base.Columns["DatabaseName"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnDataFileSizeKb = base.Columns["DataFileSizeKb"];
                this.columnDataSizeKb = base.Columns["DataSizeKb"];
                this.columnDataGrowth = base.Columns["DataGrowth"];
                this.columnDataSizePercent = base.Columns["DataSizePercent"];
                this.columnIndexSizeKb = base.Columns["IndexSizeKb"];
                this.columnTextSizeKb = base.Columns["TextSizeKb"];
                this.columnLogFileSizeKb = base.Columns["LogFileSizeKb"];
                this.columnTotalSizeKb = base.Columns["TotalSizeKb"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDatabaseName = new System.Data.DataColumn("DatabaseName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnDataFileSizeKb = new System.Data.DataColumn("DataFileSizeKb", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataFileSizeKb);
                this.columnDataSizeKb = new System.Data.DataColumn("DataSizeKb", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSizeKb);
                this.columnDataGrowth = new System.Data.DataColumn("DataGrowth", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataGrowth);
                this.columnDataSizePercent = new System.Data.DataColumn("DataSizePercent", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSizePercent);
                this.columnIndexSizeKb = new System.Data.DataColumn("IndexSizeKb", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndexSizeKb);
                this.columnTextSizeKb = new System.Data.DataColumn("TextSizeKb", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextSizeKb);
                this.columnLogFileSizeKb = new System.Data.DataColumn("LogFileSizeKb", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogFileSizeKb);
                this.columnTotalSizeKb = new System.Data.DataColumn("TotalSizeKb", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSizeKb);
                this.columnDatabaseName.AllowDBNull = false;
                this.columnDatabaseName.MaxLength = 255;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnDataFileSizeKb.ReadOnly = true;
                this.columnDataSizeKb.ReadOnly = true;
                this.columnDataGrowth.ReadOnly = true;
                this.columnDataSizePercent.ReadOnly = true;
                this.columnIndexSizeKb.ReadOnly = true;
                this.columnTextSizeKb.ReadOnly = true;
                this.columnLogFileSizeKb.ReadOnly = true;
                this.columnTotalSizeKb.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseGrowthReportTempRow Newp_GetDatabaseGrowthReportTempRow() {
                return ((p_GetDatabaseGrowthReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetDatabaseGrowthReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetDatabaseGrowthReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetDatabaseGrowthReportTempRowChanged != null)) {
                    this.p_GetDatabaseGrowthReportTempRowChanged(this, new p_GetDatabaseGrowthReportTempRowChangeEvent(((p_GetDatabaseGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetDatabaseGrowthReportTempRowChanging != null)) {
                    this.p_GetDatabaseGrowthReportTempRowChanging(this, new p_GetDatabaseGrowthReportTempRowChangeEvent(((p_GetDatabaseGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetDatabaseGrowthReportTempRowDeleted != null)) {
                    this.p_GetDatabaseGrowthReportTempRowDeleted(this, new p_GetDatabaseGrowthReportTempRowChangeEvent(((p_GetDatabaseGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetDatabaseGrowthReportTempRowDeleting != null)) {
                    this.p_GetDatabaseGrowthReportTempRowDeleting(this, new p_GetDatabaseGrowthReportTempRowChangeEvent(((p_GetDatabaseGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetDatabaseGrowthReportTempRow(p_GetDatabaseGrowthReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetDatabaseGrowthReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetTableGrowthReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTableName;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnNumberOfRows;
            
            private System.Data.DataColumn columnDataSize;
            
            private System.Data.DataColumn columnTextSize;
            
            private System.Data.DataColumn columnIndexSize;
            
            private System.Data.DataColumn columnTotalSize;
            
            private System.Data.DataColumn columnGrowthPct;
            
            private System.Data.DataColumn columnRowGrowthPct;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableGrowthReportTempDataTable() {
                this.TableName = "p_GetTableGrowthReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetTableGrowthReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetTableGrowthReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfRowsColumn {
                get {
                    return this.columnNumberOfRows;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataSizeColumn {
                get {
                    return this.columnDataSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextSizeColumn {
                get {
                    return this.columnTextSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IndexSizeColumn {
                get {
                    return this.columnIndexSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalSizeColumn {
                get {
                    return this.columnTotalSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GrowthPctColumn {
                get {
                    return this.columnGrowthPct;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowGrowthPctColumn {
                get {
                    return this.columnRowGrowthPct;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableGrowthReportTempRow this[int index] {
                get {
                    return ((p_GetTableGrowthReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetTableGrowthReportTempRowChangeEventHandler p_GetTableGrowthReportTempRowChanging;
            
            public event p_GetTableGrowthReportTempRowChangeEventHandler p_GetTableGrowthReportTempRowChanged;
            
            public event p_GetTableGrowthReportTempRowChangeEventHandler p_GetTableGrowthReportTempRowDeleting;
            
            public event p_GetTableGrowthReportTempRowChangeEventHandler p_GetTableGrowthReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetTableGrowthReportTempRow(p_GetTableGrowthReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableGrowthReportTempRow Addp_GetTableGrowthReportTempRow(string TableName, System.DateTime Last_Collection_in_Interval, double NumberOfRows, double DataSize, double TextSize, double IndexSize, double TotalSize, double GrowthPct, double RowGrowthPct) {
                p_GetTableGrowthReportTempRow rowp_GetTableGrowthReportTempRow = ((p_GetTableGrowthReportTempRow)(this.NewRow()));
                rowp_GetTableGrowthReportTempRow.ItemArray = new object[] {
                        TableName,
                        Last_Collection_in_Interval,
                        NumberOfRows,
                        DataSize,
                        TextSize,
                        IndexSize,
                        TotalSize,
                        GrowthPct,
                        RowGrowthPct};
                this.Rows.Add(rowp_GetTableGrowthReportTempRow);
                return rowp_GetTableGrowthReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetTableGrowthReportTempDataTable cln = ((p_GetTableGrowthReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetTableGrowthReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTableName = base.Columns["TableName"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnNumberOfRows = base.Columns["NumberOfRows"];
                this.columnDataSize = base.Columns["DataSize"];
                this.columnTextSize = base.Columns["TextSize"];
                this.columnIndexSize = base.Columns["IndexSize"];
                this.columnTotalSize = base.Columns["TotalSize"];
                this.columnGrowthPct = base.Columns["GrowthPct"];
                this.columnRowGrowthPct = base.Columns["RowGrowthPct"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTableName = new System.Data.DataColumn("TableName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnNumberOfRows = new System.Data.DataColumn("NumberOfRows", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfRows);
                this.columnDataSize = new System.Data.DataColumn("DataSize", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSize);
                this.columnTextSize = new System.Data.DataColumn("TextSize", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextSize);
                this.columnIndexSize = new System.Data.DataColumn("IndexSize", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndexSize);
                this.columnTotalSize = new System.Data.DataColumn("TotalSize", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSize);
                this.columnGrowthPct = new System.Data.DataColumn("GrowthPct", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrowthPct);
                this.columnRowGrowthPct = new System.Data.DataColumn("RowGrowthPct", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowGrowthPct);
                this.columnTableName.AllowDBNull = false;
                this.columnTableName.MaxLength = 255;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnNumberOfRows.ReadOnly = true;
                this.columnDataSize.ReadOnly = true;
                this.columnTextSize.ReadOnly = true;
                this.columnIndexSize.ReadOnly = true;
                this.columnTotalSize.ReadOnly = true;
                this.columnGrowthPct.ReadOnly = true;
                this.columnRowGrowthPct.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableGrowthReportTempRow Newp_GetTableGrowthReportTempRow() {
                return ((p_GetTableGrowthReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetTableGrowthReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetTableGrowthReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetTableGrowthReportTempRowChanged != null)) {
                    this.p_GetTableGrowthReportTempRowChanged(this, new p_GetTableGrowthReportTempRowChangeEvent(((p_GetTableGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetTableGrowthReportTempRowChanging != null)) {
                    this.p_GetTableGrowthReportTempRowChanging(this, new p_GetTableGrowthReportTempRowChangeEvent(((p_GetTableGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetTableGrowthReportTempRowDeleted != null)) {
                    this.p_GetTableGrowthReportTempRowDeleted(this, new p_GetTableGrowthReportTempRowChangeEvent(((p_GetTableGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetTableGrowthReportTempRowDeleting != null)) {
                    this.p_GetTableGrowthReportTempRowDeleting(this, new p_GetTableGrowthReportTempRowChangeEvent(((p_GetTableGrowthReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetTableGrowthReportTempRow(p_GetTableGrowthReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetTableGrowthReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class p_GetTableReorgReportTempDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTableName;
            
            private System.Data.DataColumn columnLast_Collection_in_Interval;
            
            private System.Data.DataColumn columnScanDensity;
            
            private System.Data.DataColumn columnLogicalFragmentation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableReorgReportTempDataTable() {
                this.TableName = "p_GetTableReorgReportTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetTableReorgReportTempDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected p_GetTableReorgReportTempDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_Collection_in_IntervalColumn {
                get {
                    return this.columnLast_Collection_in_Interval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanDensityColumn {
                get {
                    return this.columnScanDensity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogicalFragmentationColumn {
                get {
                    return this.columnLogicalFragmentation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableReorgReportTempRow this[int index] {
                get {
                    return ((p_GetTableReorgReportTempRow)(this.Rows[index]));
                }
            }
            
            public event p_GetTableReorgReportTempRowChangeEventHandler p_GetTableReorgReportTempRowChanging;
            
            public event p_GetTableReorgReportTempRowChangeEventHandler p_GetTableReorgReportTempRowChanged;
            
            public event p_GetTableReorgReportTempRowChangeEventHandler p_GetTableReorgReportTempRowDeleting;
            
            public event p_GetTableReorgReportTempRowChangeEventHandler p_GetTableReorgReportTempRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addp_GetTableReorgReportTempRow(p_GetTableReorgReportTempRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableReorgReportTempRow Addp_GetTableReorgReportTempRow(string TableName, System.DateTime Last_Collection_in_Interval, double ScanDensity, double LogicalFragmentation) {
                p_GetTableReorgReportTempRow rowp_GetTableReorgReportTempRow = ((p_GetTableReorgReportTempRow)(this.NewRow()));
                rowp_GetTableReorgReportTempRow.ItemArray = new object[] {
                        TableName,
                        Last_Collection_in_Interval,
                        ScanDensity,
                        LogicalFragmentation};
                this.Rows.Add(rowp_GetTableReorgReportTempRow);
                return rowp_GetTableReorgReportTempRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                p_GetTableReorgReportTempDataTable cln = ((p_GetTableReorgReportTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new p_GetTableReorgReportTempDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTableName = base.Columns["TableName"];
                this.columnLast_Collection_in_Interval = base.Columns["Last Collection in Interval"];
                this.columnScanDensity = base.Columns["ScanDensity"];
                this.columnLogicalFragmentation = base.Columns["LogicalFragmentation"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTableName = new System.Data.DataColumn("TableName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnLast_Collection_in_Interval = new System.Data.DataColumn("Last Collection in Interval", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_Collection_in_IntervalColumn");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Collection_in_Interval");
                this.columnLast_Collection_in_Interval.ExtendedProperties.Add("Generator_UserColumnName", "Last Collection in Interval");
                base.Columns.Add(this.columnLast_Collection_in_Interval);
                this.columnScanDensity = new System.Data.DataColumn("ScanDensity", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanDensity);
                this.columnLogicalFragmentation = new System.Data.DataColumn("LogicalFragmentation", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalFragmentation);
                this.columnTableName.AllowDBNull = false;
                this.columnTableName.MaxLength = 255;
                this.columnLast_Collection_in_Interval.ReadOnly = true;
                this.columnScanDensity.ReadOnly = true;
                this.columnLogicalFragmentation.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableReorgReportTempRow Newp_GetTableReorgReportTempRow() {
                return ((p_GetTableReorgReportTempRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new p_GetTableReorgReportTempRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(p_GetTableReorgReportTempRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.p_GetTableReorgReportTempRowChanged != null)) {
                    this.p_GetTableReorgReportTempRowChanged(this, new p_GetTableReorgReportTempRowChangeEvent(((p_GetTableReorgReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.p_GetTableReorgReportTempRowChanging != null)) {
                    this.p_GetTableReorgReportTempRowChanging(this, new p_GetTableReorgReportTempRowChangeEvent(((p_GetTableReorgReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.p_GetTableReorgReportTempRowDeleted != null)) {
                    this.p_GetTableReorgReportTempRowDeleted(this, new p_GetTableReorgReportTempRowChangeEvent(((p_GetTableReorgReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.p_GetTableReorgReportTempRowDeleting != null)) {
                    this.p_GetTableReorgReportTempRowDeleting(this, new p_GetTableReorgReportTempRowChangeEvent(((p_GetTableReorgReportTempRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removep_GetTableReorgReportTempRow(p_GetTableReorgReportTempRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "p_GetTableReorgReportTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetProcessorReportTempRow : System.Data.DataRow {
            
            private p_GetProcessorReportTempDataTable tablep_GetProcessorReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetProcessorReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetProcessorReportTemp = ((p_GetProcessorReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Records {
                get {
                    try {
                        return ((int)(this[this.tablep_GetProcessorReportTemp.RecordsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Records\' in table \'p_GetProcessorReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.RecordsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetProcessorReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetProcessorReport" +
                                "Temp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstanceName {
                get {
                    try {
                        return ((string)(this[this.tablep_GetProcessorReportTemp.InstanceNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstanceName\' in table \'p_GetProcessorReportTemp\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.InstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ResponseTimeInMilliseconds {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.ResponseTimeInMillisecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResponseTimeInMilliseconds\' in table \'p_GetProcessorReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.ResponseTimeInMillisecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CPUActivityPercentage {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.CPUActivityPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CPUActivityPercentage\' in table \'p_GetProcessorReportTemp\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.CPUActivityPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SqlCompilations {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.SqlCompilationsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SqlCompilations\' in table \'p_GetProcessorReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.SqlCompilationsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SqlRecompilations {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.SqlRecompilationsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SqlRecompilations\' in table \'p_GetProcessorReportTemp\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.SqlRecompilationsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TableLockEscalations {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.TableLockEscalationsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TableLockEscalations\' in table \'p_GetProcessorReportTemp\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.TableLockEscalationsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LockWaits {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.LockWaitsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LockWaits\' in table \'p_GetProcessorReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.LockWaitsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PrivilegedTimePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.PrivilegedTimePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrivilegedTimePercent\' in table \'p_GetProcessorReportTemp\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.PrivilegedTimePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UserTimePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.UserTimePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserTimePercent\' in table \'p_GetProcessorReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.UserTimePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProcessorTimePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.ProcessorTimePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProcessorTimePercent\' in table \'p_GetProcessorReportTemp\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.ProcessorTimePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProcessorQueueLength {
                get {
                    try {
                        return ((double)(this[this.tablep_GetProcessorReportTemp.ProcessorQueueLengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProcessorQueueLength\' in table \'p_GetProcessorReportTemp\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetProcessorReportTemp.ProcessorQueueLengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordsNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.RecordsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordsNull() {
                this[this.tablep_GetProcessorReportTemp.RecordsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetProcessorReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceNameNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.InstanceNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceNameNull() {
                this[this.tablep_GetProcessorReportTemp.InstanceNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponseTimeInMillisecondsNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.ResponseTimeInMillisecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponseTimeInMillisecondsNull() {
                this[this.tablep_GetProcessorReportTemp.ResponseTimeInMillisecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCPUActivityPercentageNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.CPUActivityPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCPUActivityPercentageNull() {
                this[this.tablep_GetProcessorReportTemp.CPUActivityPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqlCompilationsNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.SqlCompilationsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqlCompilationsNull() {
                this[this.tablep_GetProcessorReportTemp.SqlCompilationsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqlRecompilationsNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.SqlRecompilationsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqlRecompilationsNull() {
                this[this.tablep_GetProcessorReportTemp.SqlRecompilationsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTableLockEscalationsNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.TableLockEscalationsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTableLockEscalationsNull() {
                this[this.tablep_GetProcessorReportTemp.TableLockEscalationsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockWaitsNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.LockWaitsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockWaitsNull() {
                this[this.tablep_GetProcessorReportTemp.LockWaitsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrivilegedTimePercentNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.PrivilegedTimePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrivilegedTimePercentNull() {
                this[this.tablep_GetProcessorReportTemp.PrivilegedTimePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserTimePercentNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.UserTimePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserTimePercentNull() {
                this[this.tablep_GetProcessorReportTemp.UserTimePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessorTimePercentNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.ProcessorTimePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessorTimePercentNull() {
                this[this.tablep_GetProcessorReportTemp.ProcessorTimePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessorQueueLengthNull() {
                return this.IsNull(this.tablep_GetProcessorReportTemp.ProcessorQueueLengthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessorQueueLengthNull() {
                this[this.tablep_GetProcessorReportTemp.ProcessorQueueLengthColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetDiskReportTempRow : System.Data.DataRow {
            
            private p_GetDiskReportTempDataTable tablep_GetDiskReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetDiskReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetDiskReportTemp = ((p_GetDiskReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Records {
                get {
                    try {
                        return ((int)(this[this.tablep_GetDiskReportTemp.RecordsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Records\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.RecordsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetDiskReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetDiskReportTemp\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstanceName {
                get {
                    try {
                        return ((string)(this[this.tablep_GetDiskReportTemp.InstanceNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstanceName\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.InstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double IOActivityPercentage {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.IOActivityPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IOActivityPercentage\' in table \'p_GetDiskReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.IOActivityPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageReads {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.PageReadsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageReads\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.PageReadsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageErrors {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.PageErrorsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageErrors\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.PageErrorsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LazyWriterWrites {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.LazyWriterWritesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LazyWriterWrites\' in table \'p_GetDiskReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.LazyWriterWritesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CheckpointWrites {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.CheckpointWritesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CheckpointWrites\' in table \'p_GetDiskReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.CheckpointWritesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogFlushes {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.LogFlushesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogFlushes\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.LogFlushesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WorkFilesCreated {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.WorkFilesCreatedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkFilesCreated\' in table \'p_GetDiskReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.WorkFilesCreatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ReadAheadPages {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.ReadAheadPagesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReadAheadPages\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.ReadAheadPagesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageSplits {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.PageSplitsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageSplits\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.PageSplitsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PageLifeExpectancy {
                get {
                    try {
                        return ((long)(this[this.tablep_GetDiskReportTemp.PageLifeExpectancyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageLifeExpectancy\' in table \'p_GetDiskReportTemp\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.PageLifeExpectancyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageLookups {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.PageLookupsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageLookups\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.PageLookupsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TempDBSizePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.TempDBSizePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TempDBSizePercent\' in table \'p_GetDiskReportTemp\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.TempDBSizePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TempDBSizeInKilobytes {
                get {
                    try {
                        return ((long)(this[this.tablep_GetDiskReportTemp.TempDBSizeInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TempDBSizeInKilobytes\' in table \'p_GetDiskReportTemp\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.TempDBSizeInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PagesPerSecond {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.PagesPerSecondColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PagesPerSecond\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.PagesPerSecondColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DiskTimePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.DiskTimePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiskTimePercent\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.DiskTimePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DiskQueueLength {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDiskReportTemp.DiskQueueLengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiskQueueLength\' in table \'p_GetDiskReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDiskReportTemp.DiskQueueLengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordsNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.RecordsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordsNull() {
                this[this.tablep_GetDiskReportTemp.RecordsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetDiskReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceNameNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.InstanceNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceNameNull() {
                this[this.tablep_GetDiskReportTemp.InstanceNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOActivityPercentageNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.IOActivityPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOActivityPercentageNull() {
                this[this.tablep_GetDiskReportTemp.IOActivityPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageReadsNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.PageReadsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageReadsNull() {
                this[this.tablep_GetDiskReportTemp.PageReadsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageErrorsNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.PageErrorsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageErrorsNull() {
                this[this.tablep_GetDiskReportTemp.PageErrorsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLazyWriterWritesNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.LazyWriterWritesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLazyWriterWritesNull() {
                this[this.tablep_GetDiskReportTemp.LazyWriterWritesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckpointWritesNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.CheckpointWritesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckpointWritesNull() {
                this[this.tablep_GetDiskReportTemp.CheckpointWritesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogFlushesNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.LogFlushesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogFlushesNull() {
                this[this.tablep_GetDiskReportTemp.LogFlushesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFilesCreatedNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.WorkFilesCreatedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFilesCreatedNull() {
                this[this.tablep_GetDiskReportTemp.WorkFilesCreatedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadAheadPagesNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.ReadAheadPagesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadAheadPagesNull() {
                this[this.tablep_GetDiskReportTemp.ReadAheadPagesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageSplitsNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.PageSplitsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageSplitsNull() {
                this[this.tablep_GetDiskReportTemp.PageSplitsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageLifeExpectancyNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.PageLifeExpectancyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageLifeExpectancyNull() {
                this[this.tablep_GetDiskReportTemp.PageLifeExpectancyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageLookupsNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.PageLookupsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageLookupsNull() {
                this[this.tablep_GetDiskReportTemp.PageLookupsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempDBSizePercentNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.TempDBSizePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempDBSizePercentNull() {
                this[this.tablep_GetDiskReportTemp.TempDBSizePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempDBSizeInKilobytesNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.TempDBSizeInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempDBSizeInKilobytesNull() {
                this[this.tablep_GetDiskReportTemp.TempDBSizeInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPagesPerSecondNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.PagesPerSecondColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPagesPerSecondNull() {
                this[this.tablep_GetDiskReportTemp.PagesPerSecondColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiskTimePercentNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.DiskTimePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiskTimePercentNull() {
                this[this.tablep_GetDiskReportTemp.DiskTimePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiskQueueLengthNull() {
                return this.IsNull(this.tablep_GetDiskReportTemp.DiskQueueLengthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiskQueueLengthNull() {
                this[this.tablep_GetDiskReportTemp.DiskQueueLengthColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetMemoryReportTempRow : System.Data.DataRow {
            
            private p_GetMemoryReportTempDataTable tablep_GetMemoryReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetMemoryReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetMemoryReportTemp = ((p_GetMemoryReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Records {
                get {
                    try {
                        return ((int)(this[this.tablep_GetMemoryReportTemp.RecordsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Records\' in table \'p_GetMemoryReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.RecordsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetMemoryReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetMemoryReportTem" +
                                "p\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstanceName {
                get {
                    try {
                        return ((string)(this[this.tablep_GetMemoryReportTemp.InstanceNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstanceName\' in table \'p_GetMemoryReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.InstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SqlMemoryAllocatedInKilobytes {
                get {
                    try {
                        return ((long)(this[this.tablep_GetMemoryReportTemp.SqlMemoryAllocatedInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SqlMemoryAllocatedInKilobytes\' in table \'p_GetMemoryReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.SqlMemoryAllocatedInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SqlMemoryUsedInKilobytes {
                get {
                    try {
                        return ((long)(this[this.tablep_GetMemoryReportTemp.SqlMemoryUsedInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SqlMemoryUsedInKilobytes\' in table \'p_GetMemoryReportTemp\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.SqlMemoryUsedInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ProcedureCacheSizeInKilobytes {
                get {
                    try {
                        return ((long)(this[this.tablep_GetMemoryReportTemp.ProcedureCacheSizeInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProcedureCacheSizeInKilobytes\' in table \'p_GetMemoryReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.ProcedureCacheSizeInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProcedureCacheSizePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.ProcedureCacheSizePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProcedureCacheSizePercent\' in table \'p_GetMemoryReportTemp\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.ProcedureCacheSizePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BufferCacheHitRatioPercentage {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.BufferCacheHitRatioPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BufferCacheHitRatioPercentage\' in table \'p_GetMemoryReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.BufferCacheHitRatioPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProcedureCacheHitRatioPercentage {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.ProcedureCacheHitRatioPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProcedureCacheHitRatioPercentage\' in table \'p_GetMemoryRepo" +
                                "rtTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.ProcedureCacheHitRatioPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WorkTablesCreated {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.WorkTablesCreatedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkTablesCreated\' in table \'p_GetMemoryReportTemp\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.WorkTablesCreatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OSAvailableMemoryInKilobytes {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.OSAvailableMemoryInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OSAvailableMemoryInKilobytes\' in table \'p_GetMemoryReportTe" +
                                "mp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.OSAvailableMemoryInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OSTotalPhysicalMemoryInKilobytes {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.OSTotalPhysicalMemoryInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OSTotalPhysicalMemoryInKilobytes\' in table \'p_GetMemoryRepo" +
                                "rtTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.OSTotalPhysicalMemoryInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageLifeExpectancy {
                get {
                    try {
                        return ((double)(this[this.tablep_GetMemoryReportTemp.PageLifeExpectancyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageLifeExpectancy\' in table \'p_GetMemoryReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetMemoryReportTemp.PageLifeExpectancyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordsNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.RecordsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordsNull() {
                this[this.tablep_GetMemoryReportTemp.RecordsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetMemoryReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceNameNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.InstanceNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceNameNull() {
                this[this.tablep_GetMemoryReportTemp.InstanceNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqlMemoryAllocatedInKilobytesNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.SqlMemoryAllocatedInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqlMemoryAllocatedInKilobytesNull() {
                this[this.tablep_GetMemoryReportTemp.SqlMemoryAllocatedInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqlMemoryUsedInKilobytesNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.SqlMemoryUsedInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqlMemoryUsedInKilobytesNull() {
                this[this.tablep_GetMemoryReportTemp.SqlMemoryUsedInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcedureCacheSizeInKilobytesNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.ProcedureCacheSizeInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcedureCacheSizeInKilobytesNull() {
                this[this.tablep_GetMemoryReportTemp.ProcedureCacheSizeInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcedureCacheSizePercentNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.ProcedureCacheSizePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcedureCacheSizePercentNull() {
                this[this.tablep_GetMemoryReportTemp.ProcedureCacheSizePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBufferCacheHitRatioPercentageNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.BufferCacheHitRatioPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBufferCacheHitRatioPercentageNull() {
                this[this.tablep_GetMemoryReportTemp.BufferCacheHitRatioPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcedureCacheHitRatioPercentageNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.ProcedureCacheHitRatioPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcedureCacheHitRatioPercentageNull() {
                this[this.tablep_GetMemoryReportTemp.ProcedureCacheHitRatioPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTablesCreatedNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.WorkTablesCreatedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTablesCreatedNull() {
                this[this.tablep_GetMemoryReportTemp.WorkTablesCreatedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSAvailableMemoryInKilobytesNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.OSAvailableMemoryInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSAvailableMemoryInKilobytesNull() {
                this[this.tablep_GetMemoryReportTemp.OSAvailableMemoryInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSTotalPhysicalMemoryInKilobytesNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.OSTotalPhysicalMemoryInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSTotalPhysicalMemoryInKilobytesNull() {
                this[this.tablep_GetMemoryReportTemp.OSTotalPhysicalMemoryInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageLifeExpectancyNull() {
                return this.IsNull(this.tablep_GetMemoryReportTemp.PageLifeExpectancyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageLifeExpectancyNull() {
                this[this.tablep_GetMemoryReportTemp.PageLifeExpectancyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetSessionsReportTempRow : System.Data.DataRow {
            
            private p_GetSessionsReportTempDataTable tablep_GetSessionsReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetSessionsReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetSessionsReportTemp = ((p_GetSessionsReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetSessionsReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetSessionsReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstanceName {
                get {
                    return ((string)(this[this.tablep_GetSessionsReportTemp.InstanceNameColumn]));
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.InstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Logins {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.LoginsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Logins\' in table \'p_GetSessionsReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.LoginsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UserProcesses {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.UserProcessesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserProcesses\' in table \'p_GetSessionsReportTemp\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.UserProcessesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxUserProcesses {
                get {
                    try {
                        return ((int)(this[this.tablep_GetSessionsReportTemp.MaxUserProcessesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaxUserProcesses\' in table \'p_GetSessionsReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.MaxUserProcessesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientComputers {
                get {
                    try {
                        return ((int)(this[this.tablep_GetSessionsReportTemp.ClientComputersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientComputers\' in table \'p_GetSessionsReportTemp\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.ClientComputersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Transactions {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.TransactionsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Transactions\' in table \'p_GetSessionsReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.TransactionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OldestOpenTransactionsInMinutes {
                get {
                    try {
                        return ((long)(this[this.tablep_GetSessionsReportTemp.OldestOpenTransactionsInMinutesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OldestOpenTransactionsInMinutes\' in table \'p_GetSessionsRep" +
                                "ortTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.OldestOpenTransactionsInMinutesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ReplicationLatencyInSeconds {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.ReplicationLatencyInSecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReplicationLatencyInSeconds\' in table \'p_GetSessionsReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.ReplicationLatencyInSecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ReplicationUnsubscribed {
                get {
                    try {
                        return ((long)(this[this.tablep_GetSessionsReportTemp.ReplicationUnsubscribedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReplicationUnsubscribed\' in table \'p_GetSessionsReportTemp\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.ReplicationUnsubscribedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ReplicationSubscribed {
                get {
                    try {
                        return ((long)(this[this.tablep_GetSessionsReportTemp.ReplicationSubscribedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReplicationSubscribed\' in table \'p_GetSessionsReportTemp\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.ReplicationSubscribedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ReplicationUndistributed {
                get {
                    try {
                        return ((long)(this[this.tablep_GetSessionsReportTemp.ReplicationUndistributedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReplicationUndistributed\' in table \'p_GetSessionsReportTemp" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.ReplicationUndistributedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PacketsReceived {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.PacketsReceivedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PacketsReceived\' in table \'p_GetSessionsReportTemp\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.PacketsReceivedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PacketsSent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.PacketsSentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PacketsSent\' in table \'p_GetSessionsReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.PacketsSentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PacketErrors {
                get {
                    try {
                        return ((double)(this[this.tablep_GetSessionsReportTemp.PacketErrorsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PacketErrors\' in table \'p_GetSessionsReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetSessionsReportTemp.PacketErrorsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetSessionsReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoginsNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.LoginsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoginsNull() {
                this[this.tablep_GetSessionsReportTemp.LoginsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserProcessesNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.UserProcessesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserProcessesNull() {
                this[this.tablep_GetSessionsReportTemp.UserProcessesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxUserProcessesNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.MaxUserProcessesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxUserProcessesNull() {
                this[this.tablep_GetSessionsReportTemp.MaxUserProcessesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientComputersNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.ClientComputersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientComputersNull() {
                this[this.tablep_GetSessionsReportTemp.ClientComputersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionsNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.TransactionsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionsNull() {
                this[this.tablep_GetSessionsReportTemp.TransactionsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldestOpenTransactionsInMinutesNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.OldestOpenTransactionsInMinutesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldestOpenTransactionsInMinutesNull() {
                this[this.tablep_GetSessionsReportTemp.OldestOpenTransactionsInMinutesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplicationLatencyInSecondsNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.ReplicationLatencyInSecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplicationLatencyInSecondsNull() {
                this[this.tablep_GetSessionsReportTemp.ReplicationLatencyInSecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplicationUnsubscribedNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.ReplicationUnsubscribedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplicationUnsubscribedNull() {
                this[this.tablep_GetSessionsReportTemp.ReplicationUnsubscribedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplicationSubscribedNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.ReplicationSubscribedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplicationSubscribedNull() {
                this[this.tablep_GetSessionsReportTemp.ReplicationSubscribedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplicationUndistributedNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.ReplicationUndistributedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplicationUndistributedNull() {
                this[this.tablep_GetSessionsReportTemp.ReplicationUndistributedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacketsReceivedNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.PacketsReceivedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacketsReceivedNull() {
                this[this.tablep_GetSessionsReportTemp.PacketsReceivedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacketsSentNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.PacketsSentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacketsSentNull() {
                this[this.tablep_GetSessionsReportTemp.PacketsSentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacketErrorsNull() {
                return this.IsNull(this.tablep_GetSessionsReportTemp.PacketErrorsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacketErrorsNull() {
                this[this.tablep_GetSessionsReportTemp.PacketErrorsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetOverviewReportTempRow : System.Data.DataRow {
            
            private p_GetOverviewReportTempDataTable tablep_GetOverviewReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetOverviewReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetOverviewReportTemp = ((p_GetOverviewReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetOverviewReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetOverviewReportT" +
                                "emp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstanceName {
                get {
                    try {
                        return ((string)(this[this.tablep_GetOverviewReportTemp.InstanceNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InstanceName\' in table \'p_GetOverviewReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.InstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ResponseTimeInMilliseconds {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.ResponseTimeInMillisecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResponseTimeInMilliseconds\' in table \'p_GetOverviewReportTe" +
                                "mp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.ResponseTimeInMillisecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UserProcesses {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.UserProcessesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserProcesses\' in table \'p_GetOverviewReportTemp\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.UserProcessesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PacketsReceived {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.PacketsReceivedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PacketsReceived\' in table \'p_GetOverviewReportTemp\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.PacketsReceivedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PacketsSent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.PacketsSentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PacketsSent\' in table \'p_GetOverviewReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.PacketsSentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PacketErrors {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.PacketErrorsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PacketErrors\' in table \'p_GetOverviewReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.PacketErrorsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SqlMemoryUsedInKilobytes {
                get {
                    try {
                        return ((long)(this[this.tablep_GetOverviewReportTemp.SqlMemoryUsedInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SqlMemoryUsedInKilobytes\' in table \'p_GetOverviewReportTemp" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.SqlMemoryUsedInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double IOActivityPercentage {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.IOActivityPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IOActivityPercentage\' in table \'p_GetOverviewReportTemp\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.IOActivityPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Transactions {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.TransactionsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Transactions\' in table \'p_GetOverviewReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.TransactionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataFileSpaceUsedInKilobytes {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.DataFileSpaceUsedInKilobytesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataFileSpaceUsedInKilobytes\' in table \'p_GetOverviewReport" +
                                "Temp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.DataFileSpaceUsedInKilobytesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageReads {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.PageReadsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageReads\' in table \'p_GetOverviewReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.PageReadsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PageErrors {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.PageErrorsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageErrors\' in table \'p_GetOverviewReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.PageErrorsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LazyWriterWrites {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.LazyWriterWritesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LazyWriterWrites\' in table \'p_GetOverviewReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.LazyWriterWritesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CheckpointWrites {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.CheckpointWritesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CheckpointWrites\' in table \'p_GetOverviewReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.CheckpointWritesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogFlushes {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.LogFlushesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogFlushes\' in table \'p_GetOverviewReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.LogFlushesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CPUActivityPercentage {
                get {
                    try {
                        return ((double)(this[this.tablep_GetOverviewReportTemp.CPUActivityPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CPUActivityPercentage\' in table \'p_GetOverviewReportTemp\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetOverviewReportTemp.CPUActivityPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetOverviewReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceNameNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.InstanceNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceNameNull() {
                this[this.tablep_GetOverviewReportTemp.InstanceNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponseTimeInMillisecondsNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.ResponseTimeInMillisecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponseTimeInMillisecondsNull() {
                this[this.tablep_GetOverviewReportTemp.ResponseTimeInMillisecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserProcessesNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.UserProcessesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserProcessesNull() {
                this[this.tablep_GetOverviewReportTemp.UserProcessesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacketsReceivedNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.PacketsReceivedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacketsReceivedNull() {
                this[this.tablep_GetOverviewReportTemp.PacketsReceivedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacketsSentNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.PacketsSentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacketsSentNull() {
                this[this.tablep_GetOverviewReportTemp.PacketsSentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacketErrorsNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.PacketErrorsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacketErrorsNull() {
                this[this.tablep_GetOverviewReportTemp.PacketErrorsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqlMemoryUsedInKilobytesNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.SqlMemoryUsedInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqlMemoryUsedInKilobytesNull() {
                this[this.tablep_GetOverviewReportTemp.SqlMemoryUsedInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOActivityPercentageNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.IOActivityPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOActivityPercentageNull() {
                this[this.tablep_GetOverviewReportTemp.IOActivityPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionsNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.TransactionsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionsNull() {
                this[this.tablep_GetOverviewReportTemp.TransactionsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataFileSpaceUsedInKilobytesNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.DataFileSpaceUsedInKilobytesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataFileSpaceUsedInKilobytesNull() {
                this[this.tablep_GetOverviewReportTemp.DataFileSpaceUsedInKilobytesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageReadsNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.PageReadsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageReadsNull() {
                this[this.tablep_GetOverviewReportTemp.PageReadsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageErrorsNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.PageErrorsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageErrorsNull() {
                this[this.tablep_GetOverviewReportTemp.PageErrorsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLazyWriterWritesNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.LazyWriterWritesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLazyWriterWritesNull() {
                this[this.tablep_GetOverviewReportTemp.LazyWriterWritesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckpointWritesNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.CheckpointWritesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckpointWritesNull() {
                this[this.tablep_GetOverviewReportTemp.CheckpointWritesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogFlushesNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.LogFlushesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogFlushesNull() {
                this[this.tablep_GetOverviewReportTemp.LogFlushesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCPUActivityPercentageNull() {
                return this.IsNull(this.tablep_GetOverviewReportTemp.CPUActivityPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCPUActivityPercentageNull() {
                this[this.tablep_GetOverviewReportTemp.CPUActivityPercentageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetDatabaseStatisticsReportTempRow : System.Data.DataRow {
            
            private p_GetDatabaseStatisticsReportTempDataTable tablep_GetDatabaseStatisticsReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetDatabaseStatisticsReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetDatabaseStatisticsReportTemp = ((p_GetDatabaseStatisticsReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DatabaseName {
                get {
                    return ((string)(this[this.tablep_GetDatabaseStatisticsReportTemp.DatabaseNameColumn]));
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.DatabaseNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetDatabaseStatisticsReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetDatabaseStatist" +
                                "icsReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Transactions {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseStatisticsReportTemp.TransactionsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Transactions\' in table \'p_GetDatabaseStatisticsReportTemp\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.TransactionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogFlushWaits {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseStatisticsReportTemp.LogFlushWaitsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogFlushWaits\' in table \'p_GetDatabaseStatisticsReportTemp\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.LogFlushWaitsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogFlushes {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseStatisticsReportTemp.LogFlushesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogFlushes\' in table \'p_GetDatabaseStatisticsReportTemp\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.LogFlushesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogKilobytesFlushed {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseStatisticsReportTemp.LogKilobytesFlushedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogKilobytesFlushed\' in table \'p_GetDatabaseStatisticsRepor" +
                                "tTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.LogKilobytesFlushedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogCacheReads {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseStatisticsReportTemp.LogCacheReadsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogCacheReads\' in table \'p_GetDatabaseStatisticsReportTemp\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.LogCacheReadsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogCacheHitRatio {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseStatisticsReportTemp.LogCacheHitRatioColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogCacheHitRatio\' in table \'p_GetDatabaseStatisticsReportTe" +
                                "mp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseStatisticsReportTemp.LogCacheHitRatioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionsNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.TransactionsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionsNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.TransactionsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogFlushWaitsNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.LogFlushWaitsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogFlushWaitsNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.LogFlushWaitsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogFlushesNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.LogFlushesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogFlushesNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.LogFlushesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogKilobytesFlushedNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.LogKilobytesFlushedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogKilobytesFlushedNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.LogKilobytesFlushedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogCacheReadsNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.LogCacheReadsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogCacheReadsNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.LogCacheReadsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogCacheHitRatioNull() {
                return this.IsNull(this.tablep_GetDatabaseStatisticsReportTemp.LogCacheHitRatioColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogCacheHitRatioNull() {
                this[this.tablep_GetDatabaseStatisticsReportTemp.LogCacheHitRatioColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetDatabaseGrowthReportTempRow : System.Data.DataRow {
            
            private p_GetDatabaseGrowthReportTempDataTable tablep_GetDatabaseGrowthReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetDatabaseGrowthReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetDatabaseGrowthReportTemp = ((p_GetDatabaseGrowthReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DatabaseName {
                get {
                    return ((string)(this[this.tablep_GetDatabaseGrowthReportTemp.DatabaseNameColumn]));
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.DatabaseNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetDatabaseGrowthReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetDatabaseGrowthR" +
                                "eportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataFileSizeKb {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.DataFileSizeKbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataFileSizeKb\' in table \'p_GetDatabaseGrowthReportTemp\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.DataFileSizeKbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataSizeKb {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.DataSizeKbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataSizeKb\' in table \'p_GetDatabaseGrowthReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.DataSizeKbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DataGrowth {
                get {
                    try {
                        return ((decimal)(this[this.tablep_GetDatabaseGrowthReportTemp.DataGrowthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataGrowth\' in table \'p_GetDatabaseGrowthReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.DataGrowthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataSizePercent {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.DataSizePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataSizePercent\' in table \'p_GetDatabaseGrowthReportTemp\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.DataSizePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double IndexSizeKb {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.IndexSizeKbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IndexSizeKb\' in table \'p_GetDatabaseGrowthReportTemp\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.IndexSizeKbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TextSizeKb {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.TextSizeKbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TextSizeKb\' in table \'p_GetDatabaseGrowthReportTemp\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.TextSizeKbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogFileSizeKb {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.LogFileSizeKbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogFileSizeKb\' in table \'p_GetDatabaseGrowthReportTemp\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.LogFileSizeKbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalSizeKb {
                get {
                    try {
                        return ((double)(this[this.tablep_GetDatabaseGrowthReportTemp.TotalSizeKbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalSizeKb\' in table \'p_GetDatabaseGrowthReportTemp\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablep_GetDatabaseGrowthReportTemp.TotalSizeKbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataFileSizeKbNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.DataFileSizeKbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataFileSizeKbNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.DataFileSizeKbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSizeKbNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.DataSizeKbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSizeKbNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.DataSizeKbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataGrowthNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.DataGrowthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataGrowthNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.DataGrowthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSizePercentNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.DataSizePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSizePercentNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.DataSizePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexSizeKbNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.IndexSizeKbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexSizeKbNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.IndexSizeKbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextSizeKbNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.TextSizeKbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextSizeKbNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.TextSizeKbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogFileSizeKbNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.LogFileSizeKbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogFileSizeKbNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.LogFileSizeKbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSizeKbNull() {
                return this.IsNull(this.tablep_GetDatabaseGrowthReportTemp.TotalSizeKbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSizeKbNull() {
                this[this.tablep_GetDatabaseGrowthReportTemp.TotalSizeKbColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetTableGrowthReportTempRow : System.Data.DataRow {
            
            private p_GetTableGrowthReportTempDataTable tablep_GetTableGrowthReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetTableGrowthReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetTableGrowthReportTemp = ((p_GetTableGrowthReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tablep_GetTableGrowthReportTemp.TableNameColumn]));
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.TableNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetTableGrowthReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetTableGrowthRepo" +
                                "rtTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumberOfRows {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.NumberOfRowsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumberOfRows\' in table \'p_GetTableGrowthReportTemp\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.NumberOfRowsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataSize {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.DataSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataSize\' in table \'p_GetTableGrowthReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.DataSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TextSize {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.TextSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TextSize\' in table \'p_GetTableGrowthReportTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.TextSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double IndexSize {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.IndexSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IndexSize\' in table \'p_GetTableGrowthReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.IndexSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalSize {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.TotalSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalSize\' in table \'p_GetTableGrowthReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.TotalSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GrowthPct {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.GrowthPctColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GrowthPct\' in table \'p_GetTableGrowthReportTemp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.GrowthPctColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RowGrowthPct {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableGrowthReportTemp.RowGrowthPctColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowGrowthPct\' in table \'p_GetTableGrowthReportTemp\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableGrowthReportTemp.RowGrowthPctColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetTableGrowthReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfRowsNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.NumberOfRowsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfRowsNull() {
                this[this.tablep_GetTableGrowthReportTemp.NumberOfRowsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSizeNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.DataSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSizeNull() {
                this[this.tablep_GetTableGrowthReportTemp.DataSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextSizeNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.TextSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextSizeNull() {
                this[this.tablep_GetTableGrowthReportTemp.TextSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexSizeNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.IndexSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexSizeNull() {
                this[this.tablep_GetTableGrowthReportTemp.IndexSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSizeNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.TotalSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSizeNull() {
                this[this.tablep_GetTableGrowthReportTemp.TotalSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrowthPctNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.GrowthPctColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrowthPctNull() {
                this[this.tablep_GetTableGrowthReportTemp.GrowthPctColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowGrowthPctNull() {
                return this.IsNull(this.tablep_GetTableGrowthReportTemp.RowGrowthPctColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowGrowthPctNull() {
                this[this.tablep_GetTableGrowthReportTemp.RowGrowthPctColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class p_GetTableReorgReportTempRow : System.Data.DataRow {
            
            private p_GetTableReorgReportTempDataTable tablep_GetTableReorgReportTemp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal p_GetTableReorgReportTempRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablep_GetTableReorgReportTemp = ((p_GetTableReorgReportTempDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tablep_GetTableReorgReportTemp.TableNameColumn]));
                }
                set {
                    this[this.tablep_GetTableReorgReportTemp.TableNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_Collection_in_Interval {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablep_GetTableReorgReportTemp.Last_Collection_in_IntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Collection in Interval\' in table \'p_GetTableReorgRepor" +
                                "tTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableReorgReportTemp.Last_Collection_in_IntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ScanDensity {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableReorgReportTemp.ScanDensityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ScanDensity\' in table \'p_GetTableReorgReportTemp\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablep_GetTableReorgReportTemp.ScanDensityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LogicalFragmentation {
                get {
                    try {
                        return ((double)(this[this.tablep_GetTableReorgReportTemp.LogicalFragmentationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogicalFragmentation\' in table \'p_GetTableReorgReportTemp\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablep_GetTableReorgReportTemp.LogicalFragmentationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_Collection_in_IntervalNull() {
                return this.IsNull(this.tablep_GetTableReorgReportTemp.Last_Collection_in_IntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_Collection_in_IntervalNull() {
                this[this.tablep_GetTableReorgReportTemp.Last_Collection_in_IntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanDensityNull() {
                return this.IsNull(this.tablep_GetTableReorgReportTemp.ScanDensityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanDensityNull() {
                this[this.tablep_GetTableReorgReportTemp.ScanDensityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicalFragmentationNull() {
                return this.IsNull(this.tablep_GetTableReorgReportTemp.LogicalFragmentationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicalFragmentationNull() {
                this[this.tablep_GetTableReorgReportTemp.LogicalFragmentationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetProcessorReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetProcessorReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetProcessorReportTempRowChangeEvent(p_GetProcessorReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetProcessorReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetDiskReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetDiskReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDiskReportTempRowChangeEvent(p_GetDiskReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDiskReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetMemoryReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetMemoryReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetMemoryReportTempRowChangeEvent(p_GetMemoryReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetMemoryReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetSessionsReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetSessionsReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetSessionsReportTempRowChangeEvent(p_GetSessionsReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetSessionsReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetOverviewReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetOverviewReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetOverviewReportTempRowChangeEvent(p_GetOverviewReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetOverviewReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetDatabaseStatisticsReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetDatabaseStatisticsReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseStatisticsReportTempRowChangeEvent(p_GetDatabaseStatisticsReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseStatisticsReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetDatabaseGrowthReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetDatabaseGrowthReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseGrowthReportTempRowChangeEvent(p_GetDatabaseGrowthReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetDatabaseGrowthReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetTableGrowthReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetTableGrowthReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableGrowthReportTempRowChangeEvent(p_GetTableGrowthReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableGrowthReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class p_GetTableReorgReportTempRowChangeEvent : System.EventArgs {
            
            private p_GetTableReorgReportTempRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableReorgReportTempRowChangeEvent(p_GetTableReorgReportTempRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public p_GetTableReorgReportTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Idera.SQLdm.DesktopClient.Views.Reports.ReportsDatasetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetProcessorReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetProcessorReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetProcessorReportTemp";
            tableMapping.ColumnMappings.Add("Records", "Records");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("InstanceName", "InstanceName");
            tableMapping.ColumnMappings.Add("ResponseTimeInMilliseconds", "ResponseTimeInMilliseconds");
            tableMapping.ColumnMappings.Add("CPUActivityPercentage", "CPUActivityPercentage");
            tableMapping.ColumnMappings.Add("SqlCompilations", "SqlCompilations");
            tableMapping.ColumnMappings.Add("SqlRecompilations", "SqlRecompilations");
            tableMapping.ColumnMappings.Add("TableLockEscalations", "TableLockEscalations");
            tableMapping.ColumnMappings.Add("LockWaits", "LockWaits");
            tableMapping.ColumnMappings.Add("PrivilegedTimePercent", "PrivilegedTimePercent");
            tableMapping.ColumnMappings.Add("UserTimePercent", "UserTimePercent");
            tableMapping.ColumnMappings.Add("ProcessorTimePercent", "ProcessorTimePercent");
            tableMapping.ColumnMappings.Add("ProcessorQueueLength", "ProcessorQueueLength");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetProcessorReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetProcessorReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetProcessorReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetProcessorReportTempDataTable dataTable = new ReportsDataset.p_GetProcessorReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetDiskReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetDiskReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetDiskReportTemp";
            tableMapping.ColumnMappings.Add("Records", "Records");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("InstanceName", "InstanceName");
            tableMapping.ColumnMappings.Add("IOActivityPercentage", "IOActivityPercentage");
            tableMapping.ColumnMappings.Add("PageReads", "PageReads");
            tableMapping.ColumnMappings.Add("PageErrors", "PageErrors");
            tableMapping.ColumnMappings.Add("LazyWriterWrites", "LazyWriterWrites");
            tableMapping.ColumnMappings.Add("CheckpointWrites", "CheckpointWrites");
            tableMapping.ColumnMappings.Add("LogFlushes", "LogFlushes");
            tableMapping.ColumnMappings.Add("WorkFilesCreated", "WorkFilesCreated");
            tableMapping.ColumnMappings.Add("ReadAheadPages", "ReadAheadPages");
            tableMapping.ColumnMappings.Add("PageSplits", "PageSplits");
            tableMapping.ColumnMappings.Add("PageLifeExpectancy", "PageLifeExpectancy");
            tableMapping.ColumnMappings.Add("PageLookups", "PageLookups");
            tableMapping.ColumnMappings.Add("TempDBSizePercent", "TempDBSizePercent");
            tableMapping.ColumnMappings.Add("TempDBSizeInKilobytes", "TempDBSizeInKilobytes");
            tableMapping.ColumnMappings.Add("PagesPerSecond", "PagesPerSecond");
            tableMapping.ColumnMappings.Add("DiskTimePercent", "DiskTimePercent");
            tableMapping.ColumnMappings.Add("DiskQueueLength", "DiskQueueLength");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetDiskReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetDiskReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetDiskReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetDiskReportTempDataTable dataTable = new ReportsDataset.p_GetDiskReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetMemoryReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetMemoryReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetMemoryReportTemp";
            tableMapping.ColumnMappings.Add("Records", "Records");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("InstanceName", "InstanceName");
            tableMapping.ColumnMappings.Add("SqlMemoryAllocatedInKilobytes", "SqlMemoryAllocatedInKilobytes");
            tableMapping.ColumnMappings.Add("SqlMemoryUsedInKilobytes", "SqlMemoryUsedInKilobytes");
            tableMapping.ColumnMappings.Add("ProcedureCacheSizeInKilobytes", "ProcedureCacheSizeInKilobytes");
            tableMapping.ColumnMappings.Add("ProcedureCacheSizePercent", "ProcedureCacheSizePercent");
            tableMapping.ColumnMappings.Add("BufferCacheHitRatioPercentage", "BufferCacheHitRatioPercentage");
            tableMapping.ColumnMappings.Add("ProcedureCacheHitRatioPercentage", "ProcedureCacheHitRatioPercentage");
            tableMapping.ColumnMappings.Add("WorkTablesCreated", "WorkTablesCreated");
            tableMapping.ColumnMappings.Add("OSAvailableMemoryInKilobytes", "OSAvailableMemoryInKilobytes");
            tableMapping.ColumnMappings.Add("OSTotalPhysicalMemoryInKilobytes", "OSTotalPhysicalMemoryInKilobytes");
            tableMapping.ColumnMappings.Add("PageLifeExpectancy", "PageLifeExpectancy");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetMemoryReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetMemoryReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetMemoryReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetMemoryReportTempDataTable dataTable = new ReportsDataset.p_GetMemoryReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetSessionsReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetSessionsReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetSessionsReportTemp";
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("InstanceName", "InstanceName");
            tableMapping.ColumnMappings.Add("Logins", "Logins");
            tableMapping.ColumnMappings.Add("UserProcesses", "UserProcesses");
            tableMapping.ColumnMappings.Add("MaxUserProcesses", "MaxUserProcesses");
            tableMapping.ColumnMappings.Add("ClientComputers", "ClientComputers");
            tableMapping.ColumnMappings.Add("Transactions", "Transactions");
            tableMapping.ColumnMappings.Add("OldestOpenTransactionsInMinutes", "OldestOpenTransactionsInMinutes");
            tableMapping.ColumnMappings.Add("ReplicationLatencyInSeconds", "ReplicationLatencyInSeconds");
            tableMapping.ColumnMappings.Add("ReplicationUnsubscribed", "ReplicationUnsubscribed");
            tableMapping.ColumnMappings.Add("ReplicationSubscribed", "ReplicationSubscribed");
            tableMapping.ColumnMappings.Add("ReplicationUndistributed", "ReplicationUndistributed");
            tableMapping.ColumnMappings.Add("PacketsReceived", "PacketsReceived");
            tableMapping.ColumnMappings.Add("PacketsSent", "PacketsSent");
            tableMapping.ColumnMappings.Add("PacketErrors", "PacketErrors");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetSessionsReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetSessionsReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetSessionsReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetSessionsReportTempDataTable dataTable = new ReportsDataset.p_GetSessionsReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetOverviewReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetOverviewReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetOverviewReportTemp";
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("InstanceName", "InstanceName");
            tableMapping.ColumnMappings.Add("ResponseTimeInMilliseconds", "ResponseTimeInMilliseconds");
            tableMapping.ColumnMappings.Add("UserProcesses", "UserProcesses");
            tableMapping.ColumnMappings.Add("PacketsReceived", "PacketsReceived");
            tableMapping.ColumnMappings.Add("PacketsSent", "PacketsSent");
            tableMapping.ColumnMappings.Add("PacketErrors", "PacketErrors");
            tableMapping.ColumnMappings.Add("SqlMemoryUsedInKilobytes", "SqlMemoryUsedInKilobytes");
            tableMapping.ColumnMappings.Add("IOActivityPercentage", "IOActivityPercentage");
            tableMapping.ColumnMappings.Add("Transactions", "Transactions");
            tableMapping.ColumnMappings.Add("DataFileSpaceUsedInKilobytes", "DataFileSpaceUsedInKilobytes");
            tableMapping.ColumnMappings.Add("CPUActivityPercentage", "CPUActivityPercentage");
            tableMapping.ColumnMappings.Add("PageReads", "PageReads");
            tableMapping.ColumnMappings.Add("PageErrors", "PageErrors");
            tableMapping.ColumnMappings.Add("LazyWriterWrites", "LazyWriterWrites");
            tableMapping.ColumnMappings.Add("CheckpointWrites", "CheckpointWrites");
            tableMapping.ColumnMappings.Add("LogFlushes", "LogFlushes");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetOverviewReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetOverviewReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetOverviewReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetOverviewReportTempDataTable dataTable = new ReportsDataset.p_GetOverviewReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetDatabaseStatisticsReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetDatabaseStatisticsReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetDatabaseStatisticsReportTemp";
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("Transactions", "Transactions");
            tableMapping.ColumnMappings.Add("LogFlushWaits", "LogFlushWaits");
            tableMapping.ColumnMappings.Add("LogFlushes", "LogFlushes");
            tableMapping.ColumnMappings.Add("LogKilobytesFlushed", "LogKilobytesFlushed");
            tableMapping.ColumnMappings.Add("LogCacheReads", "LogCacheReads");
            tableMapping.ColumnMappings.Add("LogCacheHitRatio", "LogCacheHitRatio");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetDatabaseStatisticsReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetDatabaseStatisticsReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetDatabaseStatisticsReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetDatabaseStatisticsReportTempDataTable dataTable = new ReportsDataset.p_GetDatabaseStatisticsReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetDatabaseGrowthReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetDatabaseGrowthReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetDatabaseGrowthReportTemp";
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("DataFileSizeKb", "DataFileSizeKb");
            tableMapping.ColumnMappings.Add("DataSizeKb", "DataSizeKb");
            tableMapping.ColumnMappings.Add("DataGrowth", "DataGrowth");
            tableMapping.ColumnMappings.Add("DataSizePercent", "DataSizePercent");
            tableMapping.ColumnMappings.Add("IndexSizeKb", "IndexSizeKb");
            tableMapping.ColumnMappings.Add("TextSizeKb", "TextSizeKb");
            tableMapping.ColumnMappings.Add("LogFileSizeKb", "LogFileSizeKb");
            tableMapping.ColumnMappings.Add("TotalSizeKb", "TotalSizeKb");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetDatabaseGrowthReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetDatabaseGrowthReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetDatabaseGrowthReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetDatabaseGrowthReportTempDataTable dataTable = new ReportsDataset.p_GetDatabaseGrowthReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetTableGrowthReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetTableGrowthReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetTableGrowthReportTemp";
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("NumberOfRows", "NumberOfRows");
            tableMapping.ColumnMappings.Add("DataSize", "DataSize");
            tableMapping.ColumnMappings.Add("TextSize", "TextSize");
            tableMapping.ColumnMappings.Add("IndexSize", "IndexSize");
            tableMapping.ColumnMappings.Add("TotalSize", "TotalSize");
            tableMapping.ColumnMappings.Add("GrowthPct", "GrowthPct");
            tableMapping.ColumnMappings.Add("RowGrowthPct", "RowGrowthPct");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetTableGrowthReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetTableGrowthReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetTableGrowthReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetTableGrowthReportTempDataTable dataTable = new ReportsDataset.p_GetTableGrowthReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class p_GetTableReorgReportTempTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public p_GetTableReorgReportTempTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "p_GetTableReorgReportTemp";
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            tableMapping.ColumnMappings.Add("Last Collection in Interval", "Last Collection in Interval");
            tableMapping.ColumnMappings.Add("ScanDensity", "ScanDensity");
            tableMapping.ColumnMappings.Add("LogicalFragmentation", "LogicalFragmentation");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLdm.DesktopClient.Properties.Settings.Default.MALVM2003_SQLdmRepository_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.p_GetTableReorgReportTemp";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.p_GetTableReorgReportTempDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.p_GetTableReorgReportTempDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.p_GetTableReorgReportTempDataTable dataTable = new ReportsDataset.p_GetTableReorgReportTempDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591